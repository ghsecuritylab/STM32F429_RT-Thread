ARM GAS  /tmp/ccSBno4V.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"cpuport.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_hw_stack_init,"ax",%progbits
  18              		.align	1
  19              		.global	rt_hw_stack_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_hw_stack_init:
  26              	.LFB15:
  27              		.file 1 "rt-thread/libcpu/arm/cortex-m4/cpuport.c"
   1:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /*
   2:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  *
   4:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  *
   6:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * Change Logs:
   7:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * Date           Author       Notes
   8:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2011-10-21     Bernard      the first version.
   9:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2011-10-27     aozima       update for cortex-M4 FPU.
  10:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2011-12-31     aozima       fixed stack align issues.
  11:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2012-01-01     aozima       support context switch load/store FPU register.
  12:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2012-12-11     lgnq         fixed the coding style.
  13:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2012-12-23     aozima       stack addr align to 8byte.
  14:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2012-12-29     Bernard      Add exception hook.
  15:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2013-06-23     aozima       support lazy stack optimized.
  16:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2018-07-24     aozima       enhancement hard fault exception handler.
  17:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * 2019-07-03     yangjie      add __rt_ffs() for armclang.
  18:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  */
  19:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  20:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #include <rtthread.h>
  21:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  22:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if               /* ARMCC */ (  (defined ( __CC_ARM ) && defined ( __TARGET_FPU_VFP ))    \
  23:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                   /* Clang */ || (defined ( __CLANG_ARM ) && defined ( __VFP_FP__ ) && !defined(__S
  24:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                   /* IAR */   || (defined ( __ICCARM__ ) && defined ( __ARMVFP__ ))        \
  25:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                   /* GNU */   || (defined ( __GNUC__ ) && defined ( __VFP_FP__ ) && !defined(__SOFT
  26:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define USE_FPU   1
  27:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #else
  28:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define USE_FPU   0
  29:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif
  30:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  31:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /* exception and interrupt handler table */
ARM GAS  /tmp/ccSBno4V.s 			page 2


  32:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** rt_uint32_t rt_interrupt_from_thread;
  33:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** rt_uint32_t rt_interrupt_to_thread;
  34:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** rt_uint32_t rt_thread_switch_interrupt_flag;
  35:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /* exception hook */
  36:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** static rt_err_t (*rt_exception_hook)(void *context) = RT_NULL;
  37:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  38:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** struct exception_stack_frame
  39:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
  40:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r0;
  41:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r1;
  42:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r2;
  43:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r3;
  44:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r12;
  45:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t lr;
  46:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t pc;
  47:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t psr;
  48:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** };
  49:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  50:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** struct stack_frame
  51:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
  52:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if USE_FPU
  53:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t flag;
  54:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif /* USE_FPU */
  55:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  56:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* r4 ~ r11 register */
  57:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r4;
  58:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r5;
  59:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r6;
  60:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r7;
  61:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r8;
  62:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r9;
  63:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r10;
  64:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r11;
  65:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  66:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct exception_stack_frame exception_stack_frame;
  67:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** };
  68:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  69:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** struct exception_stack_frame_fpu
  70:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
  71:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r0;
  72:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r1;
  73:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r2;
  74:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r3;
  75:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r12;
  76:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t lr;
  77:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t pc;
  78:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t psr;
  79:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
  80:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if USE_FPU
  81:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* FPU register */
  82:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S0;
  83:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S1;
  84:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S2;
  85:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S3;
  86:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S4;
  87:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S5;
  88:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S6;
ARM GAS  /tmp/ccSBno4V.s 			page 3


  89:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S7;
  90:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S8;
  91:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S9;
  92:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S10;
  93:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S11;
  94:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S12;
  95:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S13;
  96:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S14;
  97:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t S15;
  98:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t FPSCR;
  99:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t NO_NAME;
 100:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif
 101:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** };
 102:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 103:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** struct stack_frame_fpu
 104:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 105:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t flag;
 106:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 107:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* r4 ~ r11 register */
 108:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r4;
 109:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r5;
 110:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r6;
 111:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r7;
 112:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r8;
 113:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r9;
 114:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r10;
 115:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t r11;
 116:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 117:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if USE_FPU
 118:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* FPU register s16 ~ s31 */
 119:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s16;
 120:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s17;
 121:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s18;
 122:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s19;
 123:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s20;
 124:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s21;
 125:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s22;
 126:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s23;
 127:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s24;
 128:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s25;
 129:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s26;
 130:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s27;
 131:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s28;
 132:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s29;
 133:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s30;
 134:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t s31;
 135:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif
 136:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 137:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct exception_stack_frame_fpu exception_stack_frame;
 138:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** };
 139:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 140:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** rt_uint8_t *rt_hw_stack_init(void       *tentry,
 141:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                              void       *parameter,
 142:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                              rt_uint8_t *stack_addr,
 143:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                              void       *texit)
 144:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
  28              		.loc 1 144 0
ARM GAS  /tmp/ccSBno4V.s 			page 4


  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 70B4     		push	{r4, r5, r6}
  35              	.LCFI0:
  36              		.cfi_def_cfa_offset 12
  37              		.cfi_offset 4, -12
  38              		.cfi_offset 5, -8
  39              		.cfi_offset 6, -4
  40 0002 0646     		mov	r6, r0
 145:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct stack_frame *stack_frame;
 146:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint8_t         *stk;
 147:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     unsigned long       i;
 148:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 149:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stk  = stack_addr + sizeof(rt_uint32_t);
  41              		.loc 1 149 0
  42 0004 0432     		adds	r2, r2, #4
  43              	.LVL1:
 150:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stk  = (rt_uint8_t *)RT_ALIGN_DOWN((rt_uint32_t)stk, 8);
  44              		.loc 1 150 0
  45 0006 22F00705 		bic	r5, r2, #7
  46              	.LVL2:
 151:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stk -= sizeof(struct stack_frame);
  47              		.loc 1 151 0
  48 000a A5F14400 		sub	r0, r5, #68
  49              	.LVL3:
 152:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 153:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame = (struct stack_frame *)stk;
 154:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 155:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* init all register */
 156:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     for (i = 0; i < sizeof(struct stack_frame) / sizeof(rt_uint32_t); i ++)
  50              		.loc 1 156 0
  51 000e 0022     		movs	r2, #0
  52              	.LVL4:
  53 0010 03E0     		b	.L2
  54              	.LVL5:
  55              	.L3:
 157:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 158:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         ((rt_uint32_t *)stack_frame)[i] = 0xdeadbeef;
  56              		.loc 1 158 0 discriminator 3
  57 0012 0E4C     		ldr	r4, .L5
  58 0014 40F82240 		str	r4, [r0, r2, lsl #2]
 156:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
  59              		.loc 1 156 0 discriminator 3
  60 0018 0132     		adds	r2, r2, #1
  61              	.LVL6:
  62              	.L2:
 156:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
  63              		.loc 1 156 0 is_stmt 0 discriminator 1
  64 001a 102A     		cmp	r2, #16
  65 001c F9D9     		bls	.L3
 159:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 160:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 161:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.r0  = (unsigned long)parameter; /* r0 : argument */
  66              		.loc 1 161 0 is_stmt 1
ARM GAS  /tmp/ccSBno4V.s 			page 5


  67 001e 45F8201C 		str	r1, [r5, #-32]
 162:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.r1  = 0;                        /* r1 */
  68              		.loc 1 162 0
  69 0022 0022     		movs	r2, #0
  70              	.LVL7:
  71 0024 45F81C2C 		str	r2, [r5, #-28]
 163:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.r2  = 0;                        /* r2 */
  72              		.loc 1 163 0
  73 0028 45F8182C 		str	r2, [r5, #-24]
 164:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.r3  = 0;                        /* r3 */
  74              		.loc 1 164 0
  75 002c 45F8142C 		str	r2, [r5, #-20]
 165:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.r12 = 0;                        /* r12 */
  76              		.loc 1 165 0
  77 0030 45F8102C 		str	r2, [r5, #-16]
 166:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.lr  = (unsigned long)texit;     /* lr */
  78              		.loc 1 166 0
  79 0034 45F80C3C 		str	r3, [r5, #-12]
 167:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.pc  = (unsigned long)tentry;    /* entry point, pc */
  80              		.loc 1 167 0
  81 0038 45F8086C 		str	r6, [r5, #-8]
 168:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->exception_stack_frame.psr = 0x01000000L;              /* PSR */
  82              		.loc 1 168 0
  83 003c 4FF08073 		mov	r3, #16777216
  84              	.LVL8:
  85 0040 45F8043C 		str	r3, [r5, #-4]
 169:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 170:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if USE_FPU
 171:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     stack_frame->flag = 0;
  86              		.loc 1 171 0
  87 0044 45F8442C 		str	r2, [r5, #-68]
 172:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif /* USE_FPU */
 173:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 174:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     /* return task's current stack address */
 175:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     return stk;
 176:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
  88              		.loc 1 176 0
  89 0048 70BC     		pop	{r4, r5, r6}
  90              	.LCFI1:
  91              		.cfi_restore 6
  92              		.cfi_restore 5
  93              		.cfi_restore 4
  94              		.cfi_def_cfa_offset 0
  95              	.LVL9:
  96 004a 7047     		bx	lr
  97              	.L6:
  98              		.align	2
  99              	.L5:
 100 004c EFBEADDE 		.word	-559038737
 101              		.cfi_endproc
 102              	.LFE15:
 104              		.section	.text.rt_hw_exception_install,"ax",%progbits
 105              		.align	1
 106              		.global	rt_hw_exception_install
 107              		.syntax unified
 108              		.thumb
 109              		.thumb_func
ARM GAS  /tmp/ccSBno4V.s 			page 6


 110              		.fpu fpv4-sp-d16
 112              	rt_hw_exception_install:
 113              	.LFB16:
 177:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 178:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /**
 179:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * This function set the hook, which is invoked on fault exception handling.
 180:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  *
 181:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * @param exception_handle the exception handling hook function.
 182:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  */
 183:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** void rt_hw_exception_install(rt_err_t (*exception_handle)(void *context))
 184:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 114              		.loc 1 184 0
 115              		.cfi_startproc
 116              		@ args = 0, pretend = 0, frame = 0
 117              		@ frame_needed = 0, uses_anonymous_args = 0
 118              		@ link register save eliminated.
 119              	.LVL10:
 185:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_exception_hook = exception_handle;
 120              		.loc 1 185 0
 121 0000 014B     		ldr	r3, .L8
 122 0002 1860     		str	r0, [r3]
 123 0004 7047     		bx	lr
 124              	.L9:
 125 0006 00BF     		.align	2
 126              	.L8:
 127 0008 00000000 		.word	.LANCHOR0
 128              		.cfi_endproc
 129              	.LFE16:
 131              		.section	.text.rt_hw_hard_fault_exception,"ax",%progbits
 132              		.align	1
 133              		.global	rt_hw_hard_fault_exception
 134              		.syntax unified
 135              		.thumb
 136              		.thumb_func
 137              		.fpu fpv4-sp-d16
 139              	rt_hw_hard_fault_exception:
 140              	.LFB17:
 186:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 187:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 188:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_CFSR        (*(volatile const unsigned *)0xE000ED28) /* Configurable Fault Status Regis
 189:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_HFSR        (*(volatile const unsigned *)0xE000ED2C) /* HardFault Status Register */
 190:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_MMAR        (*(volatile const unsigned *)0xE000ED34) /* MemManage Fault Address registe
 191:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_BFAR        (*(volatile const unsigned *)0xE000ED38) /* Bus Fault Address Register */
 192:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_AIRCR       (*(volatile unsigned long *)0xE000ED0C)  /* Reset control Address Register 
 193:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_RESET_VALUE 0x05FA0004                               /* Reset value, write to SCB_AIRCR
 194:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 195:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_CFSR_MFSR   (*(volatile const unsigned char*)0xE000ED28)  /* Memory-management Fault St
 196:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_CFSR_BFSR   (*(volatile const unsigned char*)0xE000ED29)  /* Bus Fault Status Register 
 197:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #define SCB_CFSR_UFSR   (*(volatile const unsigned short*)0xE000ED2A) /* Usage Fault Status Registe
 198:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 199:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #ifdef RT_USING_FINSH
 200:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** static void usage_fault_track(void)
 201:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 202:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("usage fault:\n");
 203:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("SCB_CFSR_UFSR:0x%02X ", SCB_CFSR_UFSR);
 204:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 205:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<0))
ARM GAS  /tmp/ccSBno4V.s 			page 7


 206:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 207:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [0]:UNDEFINSTR */
 208:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("UNDEFINSTR ");
 209:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 210:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 211:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<1))
 212:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 213:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [1]:INVSTATE */
 214:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("INVSTATE ");
 215:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 216:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 217:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<2))
 218:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 219:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [2]:INVPC */
 220:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("INVPC ");
 221:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 222:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 223:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<3))
 224:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 225:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [3]:NOCP */
 226:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("NOCP ");
 227:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 228:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 229:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<8))
 230:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 231:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [8]:UNALIGNED */
 232:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("UNALIGNED ");
 233:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 234:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 235:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_UFSR & (1<<9))
 236:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 237:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [9]:DIVBYZERO */
 238:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("DIVBYZERO ");
 239:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 240:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 241:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("\n");
 242:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 243:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 244:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** static void bus_fault_track(void)
 245:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 246:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("bus fault:\n");
 247:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("SCB_CFSR_BFSR:0x%02X ", SCB_CFSR_BFSR);
 248:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 249:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<0))
 250:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 251:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [0]:IBUSERR */
 252:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("IBUSERR ");
 253:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 254:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 255:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<1))
 256:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 257:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [1]:PRECISERR */
 258:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("PRECISERR ");
 259:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 260:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 261:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<2))
 262:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
ARM GAS  /tmp/ccSBno4V.s 			page 8


 263:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [2]:IMPRECISERR */
 264:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("IMPRECISERR ");
 265:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 266:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 267:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<3))
 268:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 269:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [3]:UNSTKERR */
 270:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("UNSTKERR ");
 271:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 272:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 273:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<4))
 274:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 275:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [4]:STKERR */
 276:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("STKERR ");
 277:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 278:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 279:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_BFSR & (1<<7))
 280:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 281:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("SCB->BFAR:%08X\n", SCB_BFAR);
 282:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 283:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     else
 284:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 285:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("\n");
 286:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 287:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 288:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 289:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** static void mem_manage_fault_track(void)
 290:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 291:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("mem manage fault:\n");
 292:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("SCB_CFSR_MFSR:0x%02X ", SCB_CFSR_MFSR);
 293:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 294:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_MFSR & (1<<0))
 295:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 296:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [0]:IACCVIOL */
 297:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("IACCVIOL ");
 298:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 299:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 300:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_MFSR & (1<<1))
 301:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 302:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [1]:DACCVIOL */
 303:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("DACCVIOL ");
 304:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 305:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 306:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_MFSR & (1<<3))
 307:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 308:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [3]:MUNSTKERR */
 309:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("MUNSTKERR ");
 310:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 311:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 312:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_MFSR & (1<<4))
 313:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 314:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [4]:MSTKERR */
 315:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("MSTKERR ");
 316:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 317:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 318:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_CFSR_MFSR & (1<<7))
 319:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
ARM GAS  /tmp/ccSBno4V.s 			page 9


 320:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [7]:MMARVALID */
 321:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("SCB->MMAR:%08X\n", SCB_MMAR);
 322:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 323:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     else
 324:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 325:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("\n");
 326:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 327:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 328:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 329:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** static void hard_fault_track(void)
 330:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 331:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_HFSR & (1UL<<1))
 332:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 333:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [1]:VECTBL, Indicates hard fault is caused by failed vector fetch. */
 334:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("failed vector fetch\n");
 335:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 336:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 337:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_HFSR & (1UL<<30))
 338:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 339:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [30]:FORCED, Indicates hard fault is taken because of bus fault,
 340:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****                         memory management fault, or usage fault. */
 341:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         if(SCB_CFSR_BFSR)
 342:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         {
 343:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****             bus_fault_track();
 344:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         }
 345:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 346:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         if(SCB_CFSR_MFSR)
 347:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         {
 348:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****             mem_manage_fault_track();
 349:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         }
 350:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 351:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         if(SCB_CFSR_UFSR)
 352:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         {
 353:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****             usage_fault_track();
 354:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         }
 355:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 356:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 357:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if(SCB_HFSR & (1UL<<31))
 358:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 359:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         /* [31]:DEBUGEVT, Indicates hard fault is triggered by debug event. */
 360:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("debug event\n");
 361:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 362:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 363:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif /* RT_USING_FINSH */
 364:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 365:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** struct exception_info
 366:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 367:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_uint32_t exc_return;
 368:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct stack_frame stack_frame;
 369:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** };
 370:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 371:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** void rt_hw_hard_fault_exception(struct exception_info *exception_info)
 372:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 141              		.loc 1 372 0
 142              		.cfi_startproc
 143              		@ args = 0, pretend = 0, frame = 0
 144              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccSBno4V.s 			page 10


 145              	.LVL11:
 146 0000 10B5     		push	{r4, lr}
 147              	.LCFI2:
 148              		.cfi_def_cfa_offset 8
 149              		.cfi_offset 4, -8
 150              		.cfi_offset 14, -4
 151 0002 0446     		mov	r4, r0
 152              	.LVL12:
 373:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     extern long list_thread(void);
 374:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct exception_stack_frame *exception_stack = &exception_info->stack_frame.exception_stack_fr
 375:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     struct stack_frame *context = &exception_info->stack_frame;
 376:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 377:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if (rt_exception_hook != RT_NULL)
 153              		.loc 1 377 0
 154 0004 2F4B     		ldr	r3, .L18
 155 0006 1B68     		ldr	r3, [r3]
 156 0008 1BB1     		cbz	r3, .L11
 157 000a 2830     		adds	r0, r0, #40
 158              	.LVL13:
 159              	.LBB2:
 378:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 379:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_err_t result;
 380:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 381:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         result = rt_exception_hook(exception_stack);
 160              		.loc 1 381 0
 161 000c 9847     		blx	r3
 162              	.LVL14:
 382:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         if (result == RT_EOK) return;
 163              		.loc 1 382 0
 164 000e 0028     		cmp	r0, #0
 165 0010 56D0     		beq	.L10
 166              	.LVL15:
 167              	.L11:
 168              	.LBE2:
 383:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 384:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 385:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("psr: 0x%08x\n", context->exception_stack_frame.psr);
 169              		.loc 1 385 0
 170 0012 616C     		ldr	r1, [r4, #68]
 171 0014 2C48     		ldr	r0, .L18+4
 172 0016 FFF7FEFF 		bl	rt_kprintf
 173              	.LVL16:
 386:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 387:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r00: 0x%08x\n", context->exception_stack_frame.r0);
 174              		.loc 1 387 0
 175 001a A16A     		ldr	r1, [r4, #40]
 176 001c 2B48     		ldr	r0, .L18+8
 177 001e FFF7FEFF 		bl	rt_kprintf
 178              	.LVL17:
 388:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r01: 0x%08x\n", context->exception_stack_frame.r1);
 179              		.loc 1 388 0
 180 0022 E16A     		ldr	r1, [r4, #44]
 181 0024 2A48     		ldr	r0, .L18+12
 182 0026 FFF7FEFF 		bl	rt_kprintf
 183              	.LVL18:
 389:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r02: 0x%08x\n", context->exception_stack_frame.r2);
 184              		.loc 1 389 0
ARM GAS  /tmp/ccSBno4V.s 			page 11


 185 002a 216B     		ldr	r1, [r4, #48]
 186 002c 2948     		ldr	r0, .L18+16
 187 002e FFF7FEFF 		bl	rt_kprintf
 188              	.LVL19:
 390:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r03: 0x%08x\n", context->exception_stack_frame.r3);
 189              		.loc 1 390 0
 190 0032 616B     		ldr	r1, [r4, #52]
 191 0034 2848     		ldr	r0, .L18+20
 192 0036 FFF7FEFF 		bl	rt_kprintf
 193              	.LVL20:
 391:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r04: 0x%08x\n", context->r4);
 194              		.loc 1 391 0
 195 003a A168     		ldr	r1, [r4, #8]
 196 003c 2748     		ldr	r0, .L18+24
 197 003e FFF7FEFF 		bl	rt_kprintf
 198              	.LVL21:
 392:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r05: 0x%08x\n", context->r5);
 199              		.loc 1 392 0
 200 0042 E168     		ldr	r1, [r4, #12]
 201 0044 2648     		ldr	r0, .L18+28
 202 0046 FFF7FEFF 		bl	rt_kprintf
 203              	.LVL22:
 393:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r06: 0x%08x\n", context->r6);
 204              		.loc 1 393 0
 205 004a 2169     		ldr	r1, [r4, #16]
 206 004c 2548     		ldr	r0, .L18+32
 207 004e FFF7FEFF 		bl	rt_kprintf
 208              	.LVL23:
 394:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r07: 0x%08x\n", context->r7);
 209              		.loc 1 394 0
 210 0052 6169     		ldr	r1, [r4, #20]
 211 0054 2448     		ldr	r0, .L18+36
 212 0056 FFF7FEFF 		bl	rt_kprintf
 213              	.LVL24:
 395:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r08: 0x%08x\n", context->r8);
 214              		.loc 1 395 0
 215 005a A169     		ldr	r1, [r4, #24]
 216 005c 2348     		ldr	r0, .L18+40
 217 005e FFF7FEFF 		bl	rt_kprintf
 218              	.LVL25:
 396:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r09: 0x%08x\n", context->r9);
 219              		.loc 1 396 0
 220 0062 E169     		ldr	r1, [r4, #28]
 221 0064 2248     		ldr	r0, .L18+44
 222 0066 FFF7FEFF 		bl	rt_kprintf
 223              	.LVL26:
 397:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r10: 0x%08x\n", context->r10);
 224              		.loc 1 397 0
 225 006a 216A     		ldr	r1, [r4, #32]
 226 006c 2148     		ldr	r0, .L18+48
 227 006e FFF7FEFF 		bl	rt_kprintf
 228              	.LVL27:
 398:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r11: 0x%08x\n", context->r11);
 229              		.loc 1 398 0
 230 0072 616A     		ldr	r1, [r4, #36]
 231 0074 2048     		ldr	r0, .L18+52
 232 0076 FFF7FEFF 		bl	rt_kprintf
ARM GAS  /tmp/ccSBno4V.s 			page 12


 233              	.LVL28:
 399:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("r12: 0x%08x\n", context->exception_stack_frame.r12);
 234              		.loc 1 399 0
 235 007a A16B     		ldr	r1, [r4, #56]
 236 007c 1F48     		ldr	r0, .L18+56
 237 007e FFF7FEFF 		bl	rt_kprintf
 238              	.LVL29:
 400:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf(" lr: 0x%08x\n", context->exception_stack_frame.lr);
 239              		.loc 1 400 0
 240 0082 E16B     		ldr	r1, [r4, #60]
 241 0084 1E48     		ldr	r0, .L18+60
 242 0086 FFF7FEFF 		bl	rt_kprintf
 243              	.LVL30:
 401:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf(" pc: 0x%08x\n", context->exception_stack_frame.pc);
 244              		.loc 1 401 0
 245 008a 216C     		ldr	r1, [r4, #64]
 246 008c 1D48     		ldr	r0, .L18+64
 247 008e FFF7FEFF 		bl	rt_kprintf
 248              	.LVL31:
 402:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 403:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if (exception_info->exc_return & (1 << 2))
 249              		.loc 1 403 0
 250 0092 2368     		ldr	r3, [r4]
 251 0094 13F0040F 		tst	r3, #4
 252 0098 0AD0     		beq	.L13
 404:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 405:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("hard fault on thread: %s\r\n\r\n", rt_thread_self()->name);
 253              		.loc 1 405 0
 254 009a FFF7FEFF 		bl	rt_thread_self
 255              	.LVL32:
 256 009e 0146     		mov	r1, r0
 257 00a0 1948     		ldr	r0, .L18+68
 258 00a2 FFF7FEFF 		bl	rt_kprintf
 259              	.LVL33:
 260              	.L14:
 406:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 407:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #ifdef RT_USING_FINSH
 408:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         list_thread();
 409:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif
 410:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 411:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     else
 412:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 413:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("hard fault on handler\r\n\r\n");
 414:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 415:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 416:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if ( (exception_info->exc_return & 0x10) == 0)
 261              		.loc 1 416 0
 262 00a6 2368     		ldr	r3, [r4]
 263 00a8 13F0100F 		tst	r3, #16
 264 00ac 04D0     		beq	.L17
 265              	.L15:
 266 00ae FEE7     		b	.L15
 267              	.L13:
 413:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 268              		.loc 1 413 0
 269 00b0 1648     		ldr	r0, .L18+72
 270 00b2 FFF7FEFF 		bl	rt_kprintf
ARM GAS  /tmp/ccSBno4V.s 			page 13


 271              	.LVL34:
 272 00b6 F6E7     		b	.L14
 273              	.L17:
 417:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     {
 418:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         rt_kprintf("FPU active!\r\n");
 274              		.loc 1 418 0
 275 00b8 1548     		ldr	r0, .L18+76
 276 00ba FFF7FEFF 		bl	rt_kprintf
 277              	.LVL35:
 278 00be F6E7     		b	.L15
 279              	.LVL36:
 280              	.L10:
 281 00c0 10BD     		pop	{r4, pc}
 282              	.LVL37:
 283              	.L19:
 284 00c2 00BF     		.align	2
 285              	.L18:
 286 00c4 00000000 		.word	.LANCHOR0
 287 00c8 00000000 		.word	.LC0
 288 00cc 10000000 		.word	.LC1
 289 00d0 20000000 		.word	.LC2
 290 00d4 30000000 		.word	.LC3
 291 00d8 40000000 		.word	.LC4
 292 00dc 50000000 		.word	.LC5
 293 00e0 60000000 		.word	.LC6
 294 00e4 70000000 		.word	.LC7
 295 00e8 80000000 		.word	.LC8
 296 00ec 90000000 		.word	.LC9
 297 00f0 A0000000 		.word	.LC10
 298 00f4 B0000000 		.word	.LC11
 299 00f8 C0000000 		.word	.LC12
 300 00fc D0000000 		.word	.LC13
 301 0100 E0000000 		.word	.LC14
 302 0104 F0000000 		.word	.LC15
 303 0108 00010000 		.word	.LC16
 304 010c 20010000 		.word	.LC17
 305 0110 3C010000 		.word	.LC18
 306              		.cfi_endproc
 307              	.LFE17:
 309              		.section	.text.rt_hw_cpu_shutdown,"ax",%progbits
 310              		.align	1
 311              		.global	rt_hw_cpu_shutdown
 312              		.syntax unified
 313              		.thumb
 314              		.thumb_func
 315              		.fpu fpv4-sp-d16
 317              	rt_hw_cpu_shutdown:
 318              	.LFB18:
 419:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     }
 420:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 421:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #ifdef RT_USING_FINSH
 422:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     hard_fault_track();
 423:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #endif /* RT_USING_FINSH */
 424:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 425:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     while (1);
 426:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 427:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
ARM GAS  /tmp/ccSBno4V.s 			page 14


 428:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /**
 429:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * shutdown CPU
 430:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  */
 431:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** void rt_hw_cpu_shutdown(void)
 432:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 319              		.loc 1 432 0
 320              		.cfi_startproc
 321              		@ args = 0, pretend = 0, frame = 0
 322              		@ frame_needed = 0, uses_anonymous_args = 0
 323 0000 08B5     		push	{r3, lr}
 324              	.LCFI3:
 325              		.cfi_def_cfa_offset 8
 326              		.cfi_offset 3, -8
 327              		.cfi_offset 14, -4
 433:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     rt_kprintf("shutdown...\n");
 328              		.loc 1 433 0
 329 0002 0548     		ldr	r0, .L22
 330 0004 FFF7FEFF 		bl	rt_kprintf
 331              	.LVL38:
 434:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 435:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     RT_ASSERT(0);
 332              		.loc 1 435 0
 333 0008 40F2B312 		movw	r2, #435
 334 000c 0349     		ldr	r1, .L22+4
 335 000e 0448     		ldr	r0, .L22+8
 336 0010 FFF7FEFF 		bl	rt_assert_handler
 337              	.LVL39:
 338 0014 08BD     		pop	{r3, pc}
 339              	.L23:
 340 0016 00BF     		.align	2
 341              	.L22:
 342 0018 00000000 		.word	.LC19
 343 001c 00000000 		.word	.LANCHOR1
 344 0020 10000000 		.word	.LC20
 345              		.cfi_endproc
 346              	.LFE18:
 348              		.section	.text.rt_hw_cpu_reset,"ax",%progbits
 349              		.align	1
 350              		.weak	rt_hw_cpu_reset
 351              		.syntax unified
 352              		.thumb
 353              		.thumb_func
 354              		.fpu fpv4-sp-d16
 356              	rt_hw_cpu_reset:
 357              	.LFB19:
 436:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 437:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 438:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /**
 439:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * reset CPU
 440:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  */
 441:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** RT_WEAK void rt_hw_cpu_reset(void)
 442:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 358              		.loc 1 442 0
 359              		.cfi_startproc
 360              		@ args = 0, pretend = 0, frame = 0
 361              		@ frame_needed = 0, uses_anonymous_args = 0
 362              		@ link register save eliminated.
ARM GAS  /tmp/ccSBno4V.s 			page 15


 443:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     SCB_AIRCR = SCB_RESET_VALUE;
 363              		.loc 1 443 0
 364 0000 014A     		ldr	r2, .L25
 365 0002 024B     		ldr	r3, .L25+4
 366 0004 1A60     		str	r2, [r3]
 367 0006 7047     		bx	lr
 368              	.L26:
 369              		.align	2
 370              	.L25:
 371 0008 0400FA05 		.word	100270084
 372 000c 0CED00E0 		.word	-536810228
 373              		.cfi_endproc
 374              	.LFE19:
 376              		.section	.text.__rt_ffs,"ax",%progbits
 377              		.align	1
 378              		.global	__rt_ffs
 379              		.syntax unified
 380              		.thumb
 381              		.thumb_func
 382              		.fpu fpv4-sp-d16
 384              	__rt_ffs:
 385              	.LFB20:
 444:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 445:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 446:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #ifdef RT_USING_CPU_FFS
 447:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** /**
 448:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * This function finds the first bit set (beginning with the least significant bit)
 449:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * in value and return the index of that bit.
 450:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  *
 451:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * Bits are numbered starting at 1 (the least significant bit).  A return value of
 452:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * zero from any of these functions means that the argument was zero.
 453:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  *
 454:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * @return return the index of the first bit set. If value is 0, then this function
 455:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  * shall return 0.
 456:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****  */
 457:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #if defined(__CC_ARM) 
 458:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** __asm int __rt_ffs(int value)
 459:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 460:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     CMP     r0, #0x00
 461:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     BEQ     exit
 462:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 463:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     RBIT    r0, r0
 464:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     CLZ     r0, r0
 465:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     ADDS    r0, r0, #0x01
 466:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 467:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** exit
 468:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     BX      lr
 469:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 470:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #elif defined(__CLANG_ARM)
 471:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** int __rt_ffs(int value)
 472:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 473:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     __asm volatile(
 474:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "CMP     r0, #0x00            \n"
 475:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "BEQ     exit                 \n"
 476:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 477:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "RBIT    r0, r0               \n"
 478:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "CLZ     r0, r0               \n"
ARM GAS  /tmp/ccSBno4V.s 			page 16


 479:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "ADDS    r0, r0, #0x01        \n"
 480:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 481:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         "exit:                        \n"
 482:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 483:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         : "=r"(value)
 484:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****         : "r"(value)
 485:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     );
 486:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     return value;
 487:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 488:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #elif defined(__IAR_SYSTEMS_ICC__)
 489:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** int __rt_ffs(int value)
 490:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 491:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     if (value == 0) return value;
 492:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 493:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     asm("RBIT %0, %1" : "=r"(value) : "r"(value));
 494:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     asm("CLZ  %0, %1" : "=r"(value) : "r"(value));
 495:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     asm("ADDS %0, %1, #0x01" : "=r"(value) : "r"(value));
 496:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** 
 497:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     return value;
 498:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 499:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** #elif defined(__GNUC__)
 500:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** int __rt_ffs(int value)
 501:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** {
 386              		.loc 1 501 0
 387              		.cfi_startproc
 388              		@ args = 0, pretend = 0, frame = 0
 389              		@ frame_needed = 0, uses_anonymous_args = 0
 390              		@ link register save eliminated.
 391              	.LVL40:
 502:rt-thread/libcpu/arm/cortex-m4/cpuport.c ****     return __builtin_ffs(value);
 392              		.loc 1 502 0
 393 0000 90FAA0F3 		rbit	r3, r0
 394 0004 B3FA83F3 		clz	r3, r3
 395 0008 08B9     		cbnz	r0, .L28
 396 000a 4FF0FF33 		mov	r3, #-1
 397              	.L28:
 503:rt-thread/libcpu/arm/cortex-m4/cpuport.c **** }
 398              		.loc 1 503 0
 399 000e 581C     		adds	r0, r3, #1
 400              	.LVL41:
 401 0010 7047     		bx	lr
 402              		.cfi_endproc
 403              	.LFE20:
 405              		.comm	rt_thread_switch_interrupt_flag,4,4
 406              		.comm	rt_interrupt_to_thread,4,4
 407              		.comm	rt_interrupt_from_thread,4,4
 408              		.section	.bss.rt_exception_hook,"aw",%nobits
 409              		.align	2
 410              		.set	.LANCHOR0,. + 0
 413              	rt_exception_hook:
 414 0000 00000000 		.space	4
 415              		.section	.rodata.__FUNCTION__.6550,"a",%progbits
 416              		.align	2
 417              		.set	.LANCHOR1,. + 0
 420              	__FUNCTION__.6550:
 421 0000 72745F68 		.ascii	"rt_hw_cpu_shutdown\000"
 421      775F6370 
ARM GAS  /tmp/ccSBno4V.s 			page 17


 421      755F7368 
 421      7574646F 
 421      776E00
 422              		.section	.rodata.rt_hw_cpu_shutdown.str1.4,"aMS",%progbits,1
 423              		.align	2
 424              	.LC19:
 425 0000 73687574 		.ascii	"shutdown...\012\000"
 425      646F776E 
 425      2E2E2E0A 
 425      00
 426 000d 000000   		.space	3
 427              	.LC20:
 428 0010 3000     		.ascii	"0\000"
 429              		.section	.rodata.rt_hw_hard_fault_exception.str1.4,"aMS",%progbits,1
 430              		.align	2
 431              	.LC0:
 432 0000 7073723A 		.ascii	"psr: 0x%08x\012\000"
 432      20307825 
 432      3038780A 
 432      00
 433 000d 000000   		.space	3
 434              	.LC1:
 435 0010 7230303A 		.ascii	"r00: 0x%08x\012\000"
 435      20307825 
 435      3038780A 
 435      00
 436 001d 000000   		.space	3
 437              	.LC2:
 438 0020 7230313A 		.ascii	"r01: 0x%08x\012\000"
 438      20307825 
 438      3038780A 
 438      00
 439 002d 000000   		.space	3
 440              	.LC3:
 441 0030 7230323A 		.ascii	"r02: 0x%08x\012\000"
 441      20307825 
 441      3038780A 
 441      00
 442 003d 000000   		.space	3
 443              	.LC4:
 444 0040 7230333A 		.ascii	"r03: 0x%08x\012\000"
 444      20307825 
 444      3038780A 
 444      00
 445 004d 000000   		.space	3
 446              	.LC5:
 447 0050 7230343A 		.ascii	"r04: 0x%08x\012\000"
 447      20307825 
 447      3038780A 
 447      00
 448 005d 000000   		.space	3
 449              	.LC6:
 450 0060 7230353A 		.ascii	"r05: 0x%08x\012\000"
 450      20307825 
 450      3038780A 
 450      00
 451 006d 000000   		.space	3
ARM GAS  /tmp/ccSBno4V.s 			page 18


 452              	.LC7:
 453 0070 7230363A 		.ascii	"r06: 0x%08x\012\000"
 453      20307825 
 453      3038780A 
 453      00
 454 007d 000000   		.space	3
 455              	.LC8:
 456 0080 7230373A 		.ascii	"r07: 0x%08x\012\000"
 456      20307825 
 456      3038780A 
 456      00
 457 008d 000000   		.space	3
 458              	.LC9:
 459 0090 7230383A 		.ascii	"r08: 0x%08x\012\000"
 459      20307825 
 459      3038780A 
 459      00
 460 009d 000000   		.space	3
 461              	.LC10:
 462 00a0 7230393A 		.ascii	"r09: 0x%08x\012\000"
 462      20307825 
 462      3038780A 
 462      00
 463 00ad 000000   		.space	3
 464              	.LC11:
 465 00b0 7231303A 		.ascii	"r10: 0x%08x\012\000"
 465      20307825 
 465      3038780A 
 465      00
 466 00bd 000000   		.space	3
 467              	.LC12:
 468 00c0 7231313A 		.ascii	"r11: 0x%08x\012\000"
 468      20307825 
 468      3038780A 
 468      00
 469 00cd 000000   		.space	3
 470              	.LC13:
 471 00d0 7231323A 		.ascii	"r12: 0x%08x\012\000"
 471      20307825 
 471      3038780A 
 471      00
 472 00dd 000000   		.space	3
 473              	.LC14:
 474 00e0 206C723A 		.ascii	" lr: 0x%08x\012\000"
 474      20307825 
 474      3038780A 
 474      00
 475 00ed 000000   		.space	3
 476              	.LC15:
 477 00f0 2070633A 		.ascii	" pc: 0x%08x\012\000"
 477      20307825 
 477      3038780A 
 477      00
 478 00fd 000000   		.space	3
 479              	.LC16:
 480 0100 68617264 		.ascii	"hard fault on thread: %s\015\012\015\012\000"
 480      20666175 
ARM GAS  /tmp/ccSBno4V.s 			page 19


 480      6C74206F 
 480      6E207468 
 480      72656164 
 481 011d 000000   		.space	3
 482              	.LC17:
 483 0120 68617264 		.ascii	"hard fault on handler\015\012\015\012\000"
 483      20666175 
 483      6C74206F 
 483      6E206861 
 483      6E646C65 
 484 013a 0000     		.space	2
 485              	.LC18:
 486 013c 46505520 		.ascii	"FPU active!\015\012\000"
 486      61637469 
 486      7665210D 
 486      0A00
 487              		.text
 488              	.Letext0:
 489              		.file 2 "rt-thread/include/rtdef.h"
 490              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 491              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 492              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 493              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 494              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 495              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 496              		.file 9 "rt-thread/include/rtthread.h"
ARM GAS  /tmp/ccSBno4V.s 			page 20


DEFINED SYMBOLS
                            *ABS*:0000000000000000 cpuport.c
     /tmp/ccSBno4V.s:18     .text.rt_hw_stack_init:0000000000000000 $t
     /tmp/ccSBno4V.s:25     .text.rt_hw_stack_init:0000000000000000 rt_hw_stack_init
     /tmp/ccSBno4V.s:100    .text.rt_hw_stack_init:000000000000004c $d
     /tmp/ccSBno4V.s:105    .text.rt_hw_exception_install:0000000000000000 $t
     /tmp/ccSBno4V.s:112    .text.rt_hw_exception_install:0000000000000000 rt_hw_exception_install
     /tmp/ccSBno4V.s:127    .text.rt_hw_exception_install:0000000000000008 $d
     /tmp/ccSBno4V.s:132    .text.rt_hw_hard_fault_exception:0000000000000000 $t
     /tmp/ccSBno4V.s:139    .text.rt_hw_hard_fault_exception:0000000000000000 rt_hw_hard_fault_exception
     /tmp/ccSBno4V.s:286    .text.rt_hw_hard_fault_exception:00000000000000c4 $d
     /tmp/ccSBno4V.s:310    .text.rt_hw_cpu_shutdown:0000000000000000 $t
     /tmp/ccSBno4V.s:317    .text.rt_hw_cpu_shutdown:0000000000000000 rt_hw_cpu_shutdown
     /tmp/ccSBno4V.s:342    .text.rt_hw_cpu_shutdown:0000000000000018 $d
     /tmp/ccSBno4V.s:349    .text.rt_hw_cpu_reset:0000000000000000 $t
     /tmp/ccSBno4V.s:356    .text.rt_hw_cpu_reset:0000000000000000 rt_hw_cpu_reset
     /tmp/ccSBno4V.s:371    .text.rt_hw_cpu_reset:0000000000000008 $d
     /tmp/ccSBno4V.s:377    .text.__rt_ffs:0000000000000000 $t
     /tmp/ccSBno4V.s:384    .text.__rt_ffs:0000000000000000 __rt_ffs
                            *COM*:0000000000000004 rt_thread_switch_interrupt_flag
                            *COM*:0000000000000004 rt_interrupt_to_thread
                            *COM*:0000000000000004 rt_interrupt_from_thread
     /tmp/ccSBno4V.s:409    .bss.rt_exception_hook:0000000000000000 $d
     /tmp/ccSBno4V.s:413    .bss.rt_exception_hook:0000000000000000 rt_exception_hook
     /tmp/ccSBno4V.s:416    .rodata.__FUNCTION__.6550:0000000000000000 $d
     /tmp/ccSBno4V.s:420    .rodata.__FUNCTION__.6550:0000000000000000 __FUNCTION__.6550
     /tmp/ccSBno4V.s:423    .rodata.rt_hw_cpu_shutdown.str1.4:0000000000000000 $d
     /tmp/ccSBno4V.s:430    .rodata.rt_hw_hard_fault_exception.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_kprintf
rt_thread_self
rt_assert_handler
