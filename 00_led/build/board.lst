ARM GAS  /tmp/ccEdDHSj.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"board.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_heap_begin_get,"ax",%progbits
  18              		.align	1
  19              		.weak	rt_heap_begin_get
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_heap_begin_get:
  26              	.LFB134:
  27              		.file 1 "board/board.c"
   1:board/board.c **** /*
   2:board/board.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:board/board.c ****  *
   4:board/board.c ****  * SPDX-License-Identifier: Apache-2.0
   5:board/board.c ****  *
   6:board/board.c ****  * Change Logs:
   7:board/board.c ****  * Date           Author       Notes
   8:board/board.c ****  * 2018-11-06     SummerGift   first version
   9:board/board.c ****  */
  10:board/board.c **** /*bsp 硬件相关头文件*/
  11:board/board.c **** #include "board.h"
  12:board/board.c **** #include "rtconfig.h"
  13:board/board.c **** #include "rtdef.h"
  14:board/board.c **** #include "stm32f4xx_hal.h"
  15:board/board.c **** #include "stm32f4xx_hal_cortex.h"
  16:board/board.c **** #include "stm32f4xx_hal_gpio.h"
  17:board/board.c **** #include "stm32f4xx_hal_rcc.h"
  18:board/board.c **** 
  19:board/board.c **** /*硬件相关头文件*/
  20:board/board.c **** #include "led.h"
  21:board/board.c **** #include "sys.h"
  22:board/board.c **** 
  23:board/board.c **** /*RT-Thread 相关头文件*/
  24:board/board.c **** #include <rthw.h>
  25:board/board.c **** #include <rtthread.h>
  26:board/board.c **** 
  27:board/board.c **** #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
  28:board/board.c **** #define RT_HEAP_SIZE 1024
  29:board/board.c **** /*从内部SRAM里面分配一部分静态内存作为RTT的堆空间，这时配置为4KB*/
  30:board/board.c **** static uint32_t rt_heap[RT_HEAP_SIZE];	// heap default size: 4K(1024 * 4)
  31:board/board.c **** RT_WEAK void *rt_heap_begin_get(void)
ARM GAS  /tmp/ccEdDHSj.s 			page 2


  32:board/board.c **** {
  28              		.loc 1 32 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33:board/board.c ****     return rt_heap;
  34:board/board.c **** }
  33              		.loc 1 34 0
  34 0000 0048     		ldr	r0, .L2
  35 0002 7047     		bx	lr
  36              	.L3:
  37              		.align	2
  38              	.L2:
  39 0004 00000000 		.word	.LANCHOR0
  40              		.cfi_endproc
  41              	.LFE134:
  43              		.section	.text.rt_heap_end_get,"ax",%progbits
  44              		.align	1
  45              		.weak	rt_heap_end_get
  46              		.syntax unified
  47              		.thumb
  48              		.thumb_func
  49              		.fpu fpv4-sp-d16
  51              	rt_heap_end_get:
  52              	.LFB135:
  35:board/board.c **** 
  36:board/board.c **** RT_WEAK void *rt_heap_end_get(void)
  37:board/board.c **** {
  53              		.loc 1 37 0
  54              		.cfi_startproc
  55              		@ args = 0, pretend = 0, frame = 0
  56              		@ frame_needed = 0, uses_anonymous_args = 0
  57              		@ link register save eliminated.
  38:board/board.c ****     return rt_heap + RT_HEAP_SIZE;
  39:board/board.c **** }
  58              		.loc 1 39 0
  59 0000 0048     		ldr	r0, .L5
  60 0002 7047     		bx	lr
  61              	.L6:
  62              		.align	2
  63              	.L5:
  64 0004 00100000 		.word	.LANCHOR0+4096
  65              		.cfi_endproc
  66              	.LFE135:
  68              		.section	.text.SystemClock_Config,"ax",%progbits
  69              		.align	1
  70              		.global	SystemClock_Config
  71              		.syntax unified
  72              		.thumb
  73              		.thumb_func
  74              		.fpu fpv4-sp-d16
  76              	SystemClock_Config:
  77              	.LFB137:
  40:board/board.c **** #endif
  41:board/board.c **** 
  42:board/board.c **** 
ARM GAS  /tmp/ccEdDHSj.s 			page 3


  43:board/board.c **** /**
  44:board/board.c ****  * This function will initial your board.
  45:board/board.c ****  */
  46:board/board.c **** void rt_hw_board_init()
  47:board/board.c **** {	
  48:board/board.c **** #if 0
  49:board/board.c **** 	/* System Clock Update */
  50:board/board.c **** 	SystemCoreClockUpdate();
  51:board/board.c **** 	
  52:board/board.c **** 	/* System Tick Configuration */
  53:board/board.c **** 	_SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);
  54:board/board.c **** #endif
  55:board/board.c **** 	HAL_Init();
  56:board/board.c **** 	/*System clock Initializes*/
  57:board/board.c **** 	SystemClock_Config();  
  58:board/board.c **** 	/*Stm32_Clock_Init(15, 216, RCC_PLLP_DIV2, 4);*/
  59:board/board.c **** 
  60:board/board.c **** 	/* System Tick Configuration */
  61:board/board.c **** 	/*SysTick_Config(SystemCoreClock / RT_TICK_PER_SECOND);*/
  62:board/board.c **** 	HAL_SYSTICK_Config(HAL_RCC_GetSysClockFreq() / RT_TICK_PER_SECOND);
  63:board/board.c **** 
  64:board/board.c **** 	/* hardware initial , eg. led lcd uart*/
  65:board/board.c **** 	LED_Init();
  66:board/board.c **** 
  67:board/board.c **** 	/* Call components board initial (use INIT_BOARD_EXPORT()) */
  68:board/board.c **** #ifdef RT_USING_COMPONENTS_INIT
  69:board/board.c **** 	rt_components_board_init();
  70:board/board.c **** #endif
  71:board/board.c **** 	
  72:board/board.c **** #if defined(RT_USING_CONSOLE) && defined(RT_USING_DEVICE)
  73:board/board.c **** 	rt_console_set_device(RT_CONSOLE_DEVICE_NAME);
  74:board/board.c **** #endif
  75:board/board.c **** 	
  76:board/board.c **** #if defined(RT_USING_USER_MAIN) && defined(RT_USING_HEAP)
  77:board/board.c **** 	rt_system_heap_init(rt_heap_begin_get(), rt_heap_end_get());
  78:board/board.c **** #endif
  79:board/board.c **** }
  80:board/board.c **** 
  81:board/board.c **** void SystemClock_Config(void)
  82:board/board.c **** {
  78              		.loc 1 82 0
  79              		.cfi_startproc
  80              		@ args = 0, pretend = 0, frame = 80
  81              		@ frame_needed = 0, uses_anonymous_args = 0
  82 0000 70B5     		push	{r4, r5, r6, lr}
  83              	.LCFI0:
  84              		.cfi_def_cfa_offset 16
  85              		.cfi_offset 4, -16
  86              		.cfi_offset 5, -12
  87              		.cfi_offset 6, -8
  88              		.cfi_offset 14, -4
  89 0002 94B0     		sub	sp, sp, #80
  90              	.LCFI1:
  91              		.cfi_def_cfa_offset 96
  83:board/board.c ****   RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  92              		.loc 1 83 0
  93 0004 3022     		movs	r2, #48
ARM GAS  /tmp/ccEdDHSj.s 			page 4


  94 0006 0021     		movs	r1, #0
  95 0008 08A8     		add	r0, sp, #32
  96 000a FFF7FEFF 		bl	memset
  97              	.LVL0:
  84:board/board.c ****   RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
  98              		.loc 1 84 0
  99 000e 0024     		movs	r4, #0
 100 0010 0394     		str	r4, [sp, #12]
 101 0012 0494     		str	r4, [sp, #16]
 102 0014 0594     		str	r4, [sp, #20]
 103 0016 0694     		str	r4, [sp, #24]
 104 0018 0794     		str	r4, [sp, #28]
 105              	.LBB2:
  85:board/board.c **** 
  86:board/board.c ****   /** Configure the main internal regulator output voltage 
  87:board/board.c ****   */
  88:board/board.c ****   __HAL_RCC_PWR_CLK_ENABLE();
 106              		.loc 1 88 0
 107 001a 0194     		str	r4, [sp, #4]
 108 001c 1C4B     		ldr	r3, .L9
 109 001e 1A6C     		ldr	r2, [r3, #64]
 110 0020 42F08052 		orr	r2, r2, #268435456
 111 0024 1A64     		str	r2, [r3, #64]
 112 0026 1B6C     		ldr	r3, [r3, #64]
 113 0028 03F08053 		and	r3, r3, #268435456
 114 002c 0193     		str	r3, [sp, #4]
 115 002e 019B     		ldr	r3, [sp, #4]
 116              	.LBE2:
 117              	.LBB3:
  89:board/board.c ****   __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 118              		.loc 1 89 0
 119 0030 0294     		str	r4, [sp, #8]
 120 0032 184B     		ldr	r3, .L9+4
 121 0034 1A68     		ldr	r2, [r3]
 122 0036 42F44042 		orr	r2, r2, #49152
 123 003a 1A60     		str	r2, [r3]
 124 003c 1B68     		ldr	r3, [r3]
 125 003e 03F44043 		and	r3, r3, #49152
 126 0042 0293     		str	r3, [sp, #8]
 127 0044 029B     		ldr	r3, [sp, #8]
 128              	.LBE3:
  90:board/board.c ****   /** Initializes the CPU, AHB and APB busses clocks 
  91:board/board.c ****   */
  92:board/board.c ****   RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 129              		.loc 1 92 0
 130 0046 0123     		movs	r3, #1
 131 0048 0893     		str	r3, [sp, #32]
  93:board/board.c ****   RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 132              		.loc 1 93 0
 133 004a 4FF48033 		mov	r3, #65536
 134 004e 0993     		str	r3, [sp, #36]
  94:board/board.c ****   RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 135              		.loc 1 94 0
 136 0050 0225     		movs	r5, #2
 137 0052 0E95     		str	r5, [sp, #56]
  95:board/board.c ****   RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 138              		.loc 1 95 0
ARM GAS  /tmp/ccEdDHSj.s 			page 5


 139 0054 4FF48003 		mov	r3, #4194304
 140 0058 0F93     		str	r3, [sp, #60]
  96:board/board.c ****   RCC_OscInitStruct.PLL.PLLM = 15;
 141              		.loc 1 96 0
 142 005a 0F26     		movs	r6, #15
 143 005c 1096     		str	r6, [sp, #64]
  97:board/board.c ****   RCC_OscInitStruct.PLL.PLLN = 216;
 144              		.loc 1 97 0
 145 005e D823     		movs	r3, #216
 146 0060 1193     		str	r3, [sp, #68]
  98:board/board.c ****   RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 147              		.loc 1 98 0
 148 0062 1295     		str	r5, [sp, #72]
  99:board/board.c ****   RCC_OscInitStruct.PLL.PLLQ = 4;
 149              		.loc 1 99 0
 150 0064 0423     		movs	r3, #4
 151 0066 1393     		str	r3, [sp, #76]
 100:board/board.c ****   if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 152              		.loc 1 100 0
 153 0068 08A8     		add	r0, sp, #32
 154 006a FFF7FEFF 		bl	HAL_RCC_OscConfig
 155              	.LVL1:
 101:board/board.c ****   {
 102:board/board.c ****     /*Error_Handler();*/
 103:board/board.c ****   }
 104:board/board.c ****   /** Activate the Over-Drive mode 
 105:board/board.c ****   */
 106:board/board.c ****   if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 156              		.loc 1 106 0
 157 006e FFF7FEFF 		bl	HAL_PWREx_EnableOverDrive
 158              	.LVL2:
 107:board/board.c ****   {
 108:board/board.c ****     /*Error_Handler();*/
 109:board/board.c ****   }
 110:board/board.c ****   /** Initializes the CPU, AHB and APB busses clocks 
 111:board/board.c ****   */
 112:board/board.c ****   RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 159              		.loc 1 112 0
 160 0072 0396     		str	r6, [sp, #12]
 113:board/board.c ****                               |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 114:board/board.c ****   RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 161              		.loc 1 114 0
 162 0074 0495     		str	r5, [sp, #16]
 115:board/board.c ****   RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 163              		.loc 1 115 0
 164 0076 0594     		str	r4, [sp, #20]
 116:board/board.c ****   RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 165              		.loc 1 116 0
 166 0078 4FF4A053 		mov	r3, #5120
 167 007c 0693     		str	r3, [sp, #24]
 117:board/board.c ****   RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 168              		.loc 1 117 0
 169 007e 4FF48053 		mov	r3, #4096
 170 0082 0793     		str	r3, [sp, #28]
 118:board/board.c **** 
 119:board/board.c ****   if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 171              		.loc 1 119 0
ARM GAS  /tmp/ccEdDHSj.s 			page 6


 172 0084 0521     		movs	r1, #5
 173 0086 03A8     		add	r0, sp, #12
 174 0088 FFF7FEFF 		bl	HAL_RCC_ClockConfig
 175              	.LVL3:
 120:board/board.c ****   {
 121:board/board.c ****     /*Error_Handler();*/
 122:board/board.c ****   }
 123:board/board.c **** }
 176              		.loc 1 123 0
 177 008c 14B0     		add	sp, sp, #80
 178              	.LCFI2:
 179              		.cfi_def_cfa_offset 16
 180              		@ sp needed
 181 008e 70BD     		pop	{r4, r5, r6, pc}
 182              	.L10:
 183              		.align	2
 184              	.L9:
 185 0090 00380240 		.word	1073887232
 186 0094 00700040 		.word	1073770496
 187              		.cfi_endproc
 188              	.LFE137:
 190              		.section	.text.rt_hw_board_init,"ax",%progbits
 191              		.align	1
 192              		.global	rt_hw_board_init
 193              		.syntax unified
 194              		.thumb
 195              		.thumb_func
 196              		.fpu fpv4-sp-d16
 198              	rt_hw_board_init:
 199              	.LFB136:
  47:board/board.c **** #if 0
 200              		.loc 1 47 0
 201              		.cfi_startproc
 202              		@ args = 0, pretend = 0, frame = 0
 203              		@ frame_needed = 0, uses_anonymous_args = 0
 204 0000 10B5     		push	{r4, lr}
 205              	.LCFI3:
 206              		.cfi_def_cfa_offset 8
 207              		.cfi_offset 4, -8
 208              		.cfi_offset 14, -4
  55:board/board.c **** 	/*System clock Initializes*/
 209              		.loc 1 55 0
 210 0002 FFF7FEFF 		bl	HAL_Init
 211              	.LVL4:
  57:board/board.c **** 	/*Stm32_Clock_Init(15, 216, RCC_PLLP_DIV2, 4);*/
 212              		.loc 1 57 0
 213 0006 FFF7FEFF 		bl	SystemClock_Config
 214              	.LVL5:
  62:board/board.c **** 
 215              		.loc 1 62 0
 216 000a FFF7FEFF 		bl	HAL_RCC_GetSysClockFreq
 217              	.LVL6:
 218 000e 0B4B     		ldr	r3, .L13
 219 0010 A3FB0030 		umull	r3, r0, r3, r0
 220 0014 8009     		lsrs	r0, r0, #6
 221 0016 FFF7FEFF 		bl	HAL_SYSTICK_Config
 222              	.LVL7:
ARM GAS  /tmp/ccEdDHSj.s 			page 7


  65:board/board.c **** 
 223              		.loc 1 65 0
 224 001a FFF7FEFF 		bl	LED_Init
 225              	.LVL8:
  69:board/board.c **** #endif
 226              		.loc 1 69 0
 227 001e FFF7FEFF 		bl	rt_components_board_init
 228              	.LVL9:
  73:board/board.c **** #endif
 229              		.loc 1 73 0
 230 0022 0748     		ldr	r0, .L13+4
 231 0024 FFF7FEFF 		bl	rt_console_set_device
 232              	.LVL10:
  77:board/board.c **** #endif
 233              		.loc 1 77 0
 234 0028 FFF7FEFF 		bl	rt_heap_begin_get
 235              	.LVL11:
 236 002c 0446     		mov	r4, r0
 237 002e FFF7FEFF 		bl	rt_heap_end_get
 238              	.LVL12:
 239 0032 0146     		mov	r1, r0
 240 0034 2046     		mov	r0, r4
 241 0036 FFF7FEFF 		bl	rt_system_heap_init
 242              	.LVL13:
 243 003a 10BD     		pop	{r4, pc}
 244              	.L14:
 245              		.align	2
 246              	.L13:
 247 003c D34D6210 		.word	274877907
 248 0040 00000000 		.word	.LC0
 249              		.cfi_endproc
 250              	.LFE136:
 252              		.section	.text.SysTick_Handler,"ax",%progbits
 253              		.align	1
 254              		.global	SysTick_Handler
 255              		.syntax unified
 256              		.thumb
 257              		.thumb_func
 258              		.fpu fpv4-sp-d16
 260              	SysTick_Handler:
 261              	.LFB138:
 124:board/board.c **** 
 125:board/board.c **** 
 126:board/board.c **** void SysTick_Handler(void)
 127:board/board.c **** {
 262              		.loc 1 127 0
 263              		.cfi_startproc
 264              		@ args = 0, pretend = 0, frame = 0
 265              		@ frame_needed = 0, uses_anonymous_args = 0
 266 0000 08B5     		push	{r3, lr}
 267              	.LCFI4:
 268              		.cfi_def_cfa_offset 8
 269              		.cfi_offset 3, -8
 270              		.cfi_offset 14, -4
 128:board/board.c **** 	/* enter interrupt */
 129:board/board.c **** 	rt_interrupt_enter();
 271              		.loc 1 129 0
ARM GAS  /tmp/ccEdDHSj.s 			page 8


 272 0002 FFF7FEFF 		bl	rt_interrupt_enter
 273              	.LVL14:
 130:board/board.c **** 
 131:board/board.c **** 	rt_tick_increase();
 274              		.loc 1 131 0
 275 0006 FFF7FEFF 		bl	rt_tick_increase
 276              	.LVL15:
 132:board/board.c **** 
 133:board/board.c **** 	/* leave interrupt */
 134:board/board.c **** 	rt_interrupt_leave();
 277              		.loc 1 134 0
 278 000a FFF7FEFF 		bl	rt_interrupt_leave
 279              	.LVL16:
 280 000e 08BD     		pop	{r3, pc}
 281              		.cfi_endproc
 282              	.LFE138:
 284              		.section	.bss.rt_heap,"aw",%nobits
 285              		.align	2
 286              		.set	.LANCHOR0,. + 0
 289              	rt_heap:
 290 0000 00000000 		.space	4096
 290      00000000 
 290      00000000 
 290      00000000 
 290      00000000 
 291              		.section	.rodata.rt_hw_board_init.str1.4,"aMS",%progbits,1
 292              		.align	2
 293              	.LC0:
 294 0000 75617274 		.ascii	"uart1\000"
 294      3100
 295              		.text
 296              	.Letext0:
 297              		.file 2 "rt-thread/include/rtdef.h"
 298              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 299              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 300              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 301              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 302              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 303              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 304              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 305              		.file 10 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 306              		.file 11 "rt-thread/include/rtthread.h"
 307              		.file 12 "CORE/core_cm4.h"
 308              		.file 13 "USER/system_stm32f4xx.h"
 309              		.file 14 "USER/stm32f429xx.h"
 310              		.file 15 "HALLIB/Inc/stm32f4xx_hal_rcc_ex.h"
 311              		.file 16 "HALLIB/Inc/stm32f4xx_hal_rcc.h"
 312              		.file 17 "HALLIB/Inc/stm32f4xx_hal_def.h"
 313              		.file 18 "HALLIB/Inc/stm32f4xx_hal.h"
 314              		.file 19 "board/board.h"
 315              		.file 20 "HALLIB/Inc/stm32f4xx_hal_pwr_ex.h"
 316              		.file 21 "HALLIB/Inc/stm32f4xx_hal_cortex.h"
 317              		.file 22 "hardware/LED/led.h"
ARM GAS  /tmp/ccEdDHSj.s 			page 9


DEFINED SYMBOLS
                            *ABS*:0000000000000000 board.c
     /tmp/ccEdDHSj.s:18     .text.rt_heap_begin_get:0000000000000000 $t
     /tmp/ccEdDHSj.s:25     .text.rt_heap_begin_get:0000000000000000 rt_heap_begin_get
     /tmp/ccEdDHSj.s:39     .text.rt_heap_begin_get:0000000000000004 $d
     /tmp/ccEdDHSj.s:44     .text.rt_heap_end_get:0000000000000000 $t
     /tmp/ccEdDHSj.s:51     .text.rt_heap_end_get:0000000000000000 rt_heap_end_get
     /tmp/ccEdDHSj.s:64     .text.rt_heap_end_get:0000000000000004 $d
     /tmp/ccEdDHSj.s:69     .text.SystemClock_Config:0000000000000000 $t
     /tmp/ccEdDHSj.s:76     .text.SystemClock_Config:0000000000000000 SystemClock_Config
     /tmp/ccEdDHSj.s:185    .text.SystemClock_Config:0000000000000090 $d
     /tmp/ccEdDHSj.s:191    .text.rt_hw_board_init:0000000000000000 $t
     /tmp/ccEdDHSj.s:198    .text.rt_hw_board_init:0000000000000000 rt_hw_board_init
     /tmp/ccEdDHSj.s:247    .text.rt_hw_board_init:000000000000003c $d
     /tmp/ccEdDHSj.s:253    .text.SysTick_Handler:0000000000000000 $t
     /tmp/ccEdDHSj.s:260    .text.SysTick_Handler:0000000000000000 SysTick_Handler
     /tmp/ccEdDHSj.s:285    .bss.rt_heap:0000000000000000 $d
     /tmp/ccEdDHSj.s:289    .bss.rt_heap:0000000000000000 rt_heap
     /tmp/ccEdDHSj.s:292    .rodata.rt_hw_board_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
memset
HAL_RCC_OscConfig
HAL_PWREx_EnableOverDrive
HAL_RCC_ClockConfig
HAL_Init
HAL_RCC_GetSysClockFreq
HAL_SYSTICK_Config
LED_Init
rt_components_board_init
rt_console_set_device
rt_system_heap_init
rt_interrupt_enter
rt_tick_increase
rt_interrupt_leave
