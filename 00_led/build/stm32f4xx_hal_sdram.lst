ARM GAS  /tmp/ccy6hGOI.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"stm32f4xx_hal_sdram.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.HAL_SDRAM_DMA_XferCpltCallback,"ax",%progbits
  18              		.align	1
  19              		.weak	HAL_SDRAM_DMA_XferCpltCallback
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	HAL_SDRAM_DMA_XferCpltCallback:
  26              	.LFB125:
  27              		.file 1 "HALLIB/Src/stm32f4xx_hal_sdram.c"
   1:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
   2:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ******************************************************************************
   3:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @file    stm32f4xx_hal_sdram.c
   4:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @author  MCD Application Team
   5:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief   SDRAM HAL module driver.
   6:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          This file provides a generic firmware to drive SDRAM memories mounted 
   7:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          as external device.
   8:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *         
   9:HALLIB/Src/stm32f4xx_hal_sdram.c ****   @verbatim
  10:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
  11:HALLIB/Src/stm32f4xx_hal_sdram.c ****                        ##### How to use this driver #####
  12:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ============================================================================== 
  13:HALLIB/Src/stm32f4xx_hal_sdram.c ****   [..]
  14:HALLIB/Src/stm32f4xx_hal_sdram.c ****     This driver is a generic layered driver which contains a set of APIs used to 
  15:HALLIB/Src/stm32f4xx_hal_sdram.c ****     control SDRAM memories. It uses the FMC layer functions to interface 
  16:HALLIB/Src/stm32f4xx_hal_sdram.c ****     with SDRAM devices.  
  17:HALLIB/Src/stm32f4xx_hal_sdram.c ****     The following sequence should be followed to configure the FMC to interface
  18:HALLIB/Src/stm32f4xx_hal_sdram.c ****     with SDRAM memories: 
  19:HALLIB/Src/stm32f4xx_hal_sdram.c ****       
  20:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) Declare a SDRAM_HandleTypeDef handle structure, for example:
  21:HALLIB/Src/stm32f4xx_hal_sdram.c ****           SDRAM_HandleTypeDef  hdsram 
  22:HALLIB/Src/stm32f4xx_hal_sdram.c ****           
  23:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (++) Fill the SDRAM_HandleTypeDef handle "Init" field with the allowed 
  24:HALLIB/Src/stm32f4xx_hal_sdram.c ****             values of the structure member.
  25:HALLIB/Src/stm32f4xx_hal_sdram.c ****             
  26:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (++) Fill the SDRAM_HandleTypeDef handle "Instance" field with a predefined 
  27:HALLIB/Src/stm32f4xx_hal_sdram.c ****             base register instance for NOR or SDRAM device 
  28:HALLIB/Src/stm32f4xx_hal_sdram.c ****              
  29:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) Declare a FMC_SDRAM_TimingTypeDef structure; for example:
  30:HALLIB/Src/stm32f4xx_hal_sdram.c ****           FMC_SDRAM_TimingTypeDef  Timing;
  31:HALLIB/Src/stm32f4xx_hal_sdram.c ****       and fill its fields with the allowed values of the structure member.
ARM GAS  /tmp/ccy6hGOI.s 			page 2


  32:HALLIB/Src/stm32f4xx_hal_sdram.c ****       
  33:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) Initialize the SDRAM Controller by calling the function HAL_SDRAM_Init(). This function
  34:HALLIB/Src/stm32f4xx_hal_sdram.c ****        performs the following sequence:
  35:HALLIB/Src/stm32f4xx_hal_sdram.c ****           
  36:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (##) MSP hardware layer configuration using the function HAL_SDRAM_MspInit()
  37:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (##) Control register configuration using the FMC SDRAM interface function 
  38:HALLIB/Src/stm32f4xx_hal_sdram.c ****             FMC_SDRAM_Init()
  39:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (##) Timing register configuration using the FMC SDRAM interface function 
  40:HALLIB/Src/stm32f4xx_hal_sdram.c ****             FMC_SDRAM_Timing_Init()
  41:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (##) Program the SDRAM external device by applying its initialization sequence
  42:HALLIB/Src/stm32f4xx_hal_sdram.c ****             according to the device plugged in your hardware. This step is mandatory
  43:HALLIB/Src/stm32f4xx_hal_sdram.c ****             for accessing the SDRAM device.   
  44:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  45:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) At this stage you can perform read/write accesses from/to the memory connected 
  46:HALLIB/Src/stm32f4xx_hal_sdram.c ****        to the SDRAM Bank. You can perform either polling or DMA transfer using the
  47:HALLIB/Src/stm32f4xx_hal_sdram.c ****        following APIs:
  48:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (++) HAL_SDRAM_Read()/HAL_SDRAM_Write() for polling read/write access
  49:HALLIB/Src/stm32f4xx_hal_sdram.c ****        (++) HAL_SDRAM_Read_DMA()/HAL_SDRAM_Write_DMA() for DMA read/write transfer
  50:HALLIB/Src/stm32f4xx_hal_sdram.c ****        
  51:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) You can also control the SDRAM device by calling the control APIs HAL_SDRAM_WriteOperation_E
  52:HALLIB/Src/stm32f4xx_hal_sdram.c ****        HAL_SDRAM_WriteOperation_Disable() to respectively enable/disable the SDRAM write operation 
  53:HALLIB/Src/stm32f4xx_hal_sdram.c ****        the function HAL_SDRAM_SendCommand() to send a specified command to the SDRAM
  54:HALLIB/Src/stm32f4xx_hal_sdram.c ****        device. The command to be sent must be configured with the FMC_SDRAM_CommandTypeDef 
  55:HALLIB/Src/stm32f4xx_hal_sdram.c ****        structure.   
  56:HALLIB/Src/stm32f4xx_hal_sdram.c ****        
  57:HALLIB/Src/stm32f4xx_hal_sdram.c ****    (#) You can continuously monitor the SDRAM device HAL state by calling the function
  58:HALLIB/Src/stm32f4xx_hal_sdram.c ****        HAL_SDRAM_GetState()
  59:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  60:HALLIB/Src/stm32f4xx_hal_sdram.c ****    *** Callback registration ***
  61:HALLIB/Src/stm32f4xx_hal_sdram.c ****     =============================================
  62:HALLIB/Src/stm32f4xx_hal_sdram.c ****     [..]
  63:HALLIB/Src/stm32f4xx_hal_sdram.c ****       The compilation define  USE_HAL_SDRAM_REGISTER_CALLBACKS when set to 1
  64:HALLIB/Src/stm32f4xx_hal_sdram.c ****       allows the user to configure dynamically the driver callbacks.
  65:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  66:HALLIB/Src/stm32f4xx_hal_sdram.c ****       Use Functions @ref HAL_SDRAM_RegisterCallback() to register a user callback,
  67:HALLIB/Src/stm32f4xx_hal_sdram.c ****       it allows to register following callbacks:
  68:HALLIB/Src/stm32f4xx_hal_sdram.c ****         (+) MspInitCallback    : SDRAM MspInit.
  69:HALLIB/Src/stm32f4xx_hal_sdram.c ****         (+) MspDeInitCallback  : SDRAM MspDeInit.
  70:HALLIB/Src/stm32f4xx_hal_sdram.c ****       This function takes as parameters the HAL peripheral handle, the Callback ID
  71:HALLIB/Src/stm32f4xx_hal_sdram.c ****       and a pointer to the user callback function.
  72:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  73:HALLIB/Src/stm32f4xx_hal_sdram.c ****       Use function @ref HAL_SDRAM_UnRegisterCallback() to reset a callback to the default
  74:HALLIB/Src/stm32f4xx_hal_sdram.c ****       weak (surcharged) function. It allows to reset following callbacks:
  75:HALLIB/Src/stm32f4xx_hal_sdram.c ****         (+) MspInitCallback    : SDRAM MspInit.
  76:HALLIB/Src/stm32f4xx_hal_sdram.c ****         (+) MspDeInitCallback  : SDRAM MspDeInit.
  77:HALLIB/Src/stm32f4xx_hal_sdram.c ****       This function) takes as parameters the HAL peripheral handle and the Callback ID.
  78:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  79:HALLIB/Src/stm32f4xx_hal_sdram.c ****       By default, after the @ref HAL_SDRAM_Init and if the state is HAL_SDRAM_STATE_RESET
  80:HALLIB/Src/stm32f4xx_hal_sdram.c ****       all callbacks are reset to the corresponding legacy weak (surcharged) functions.
  81:HALLIB/Src/stm32f4xx_hal_sdram.c ****       Exception done for MspInit and MspDeInit callbacks that are respectively
  82:HALLIB/Src/stm32f4xx_hal_sdram.c ****       reset to the legacy weak (surcharged) functions in the @ref HAL_SDRAM_Init
  83:HALLIB/Src/stm32f4xx_hal_sdram.c ****       and @ref  HAL_SDRAM_DeInit only when these callbacks are null (not registered beforehand).
  84:HALLIB/Src/stm32f4xx_hal_sdram.c ****       If not, MspInit or MspDeInit are not null, the @ref HAL_SDRAM_Init and @ref HAL_SDRAM_DeInit
  85:HALLIB/Src/stm32f4xx_hal_sdram.c ****       keep and use the user MspInit/MspDeInit callbacks (registered beforehand)
  86:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  87:HALLIB/Src/stm32f4xx_hal_sdram.c ****       Callbacks can be registered/unregistered in READY state only.
  88:HALLIB/Src/stm32f4xx_hal_sdram.c ****       Exception done for MspInit/MspDeInit callbacks that can be registered/unregistered
ARM GAS  /tmp/ccy6hGOI.s 			page 3


  89:HALLIB/Src/stm32f4xx_hal_sdram.c ****       in READY or RESET state, thus registered (user) MspInit/DeInit callbacks can be used
  90:HALLIB/Src/stm32f4xx_hal_sdram.c ****       during the Init/DeInit.
  91:HALLIB/Src/stm32f4xx_hal_sdram.c ****       In that case first register the MspInit/MspDeInit user callbacks
  92:HALLIB/Src/stm32f4xx_hal_sdram.c ****       using @ref HAL_SDRAM_RegisterCallback before calling @ref HAL_SDRAM_DeInit
  93:HALLIB/Src/stm32f4xx_hal_sdram.c ****       or @ref HAL_SDRAM_Init function.
  94:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  95:HALLIB/Src/stm32f4xx_hal_sdram.c ****       When The compilation define USE_HAL_SDRAM_REGISTER_CALLBACKS is set to 0 or
  96:HALLIB/Src/stm32f4xx_hal_sdram.c ****       not defined, the callback registering feature is not available
  97:HALLIB/Src/stm32f4xx_hal_sdram.c ****       and weak (surcharged) callbacks are used.
  98:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
  99:HALLIB/Src/stm32f4xx_hal_sdram.c ****   @endverbatim
 100:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ******************************************************************************
 101:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @attention
 102:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *
 103:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * <h2><center>&copy; Copyright (c) 2017 STMicroelectronics.
 104:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * All rights reserved.</center></h2>
 105:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *
 106:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * This software component is licensed by ST under BSD 3-Clause license,
 107:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * the "License"; You may not use this file except in compliance with the
 108:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * License. You may obtain a copy of the License at:
 109:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                        opensource.org/licenses/BSD-3-Clause
 110:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *
 111:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ******************************************************************************
 112:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */ 
 113:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 114:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Includes ------------------------------------------------------------------*/
 115:HALLIB/Src/stm32f4xx_hal_sdram.c **** #include "stm32f4xx_hal.h"
 116:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 117:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @addtogroup STM32F4xx_HAL_Driver
 118:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 119:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 120:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 121:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM SDRAM
 122:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief SDRAM driver modules
 123:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 124:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 125:HALLIB/Src/stm32f4xx_hal_sdram.c **** #ifdef HAL_SDRAM_MODULE_ENABLED
 126:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if defined(STM32F427xx) || defined(STM32F437xx) || defined(STM32F429xx) || defined(STM32F439xx) ||
 127:HALLIB/Src/stm32f4xx_hal_sdram.c ****     defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx)
 128:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 129:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Private typedef -----------------------------------------------------------*/
 130:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Private define ------------------------------------------------------------*/
 131:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Private macro -------------------------------------------------------------*/    
 132:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Private variables ---------------------------------------------------------*/
 133:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Private functions ---------------------------------------------------------*/
 134:HALLIB/Src/stm32f4xx_hal_sdram.c **** /* Exported functions --------------------------------------------------------*/
 135:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions SDRAM Exported Functions
 136:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 137:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 138:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 139:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group1 Initialization and de-initialization functions 
 140:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief    Initialization and Configuration functions 
 141:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *
 142:HALLIB/Src/stm32f4xx_hal_sdram.c ****   @verbatim    
 143:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
 144:HALLIB/Src/stm32f4xx_hal_sdram.c ****            ##### SDRAM Initialization and de_initialization functions #####
 145:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
ARM GAS  /tmp/ccy6hGOI.s 			page 4


 146:HALLIB/Src/stm32f4xx_hal_sdram.c ****   [..]  
 147:HALLIB/Src/stm32f4xx_hal_sdram.c ****     This section provides functions allowing to initialize/de-initialize
 148:HALLIB/Src/stm32f4xx_hal_sdram.c ****     the SDRAM memory
 149:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 150:HALLIB/Src/stm32f4xx_hal_sdram.c **** @endverbatim
 151:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 152:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 153:HALLIB/Src/stm32f4xx_hal_sdram.c ****     
 154:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 155:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Performs the SDRAM device initialization sequence.
 156:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 157:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 158:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  Timing Pointer to SDRAM control timing structure 
 159:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 160:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 161:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
 162:HALLIB/Src/stm32f4xx_hal_sdram.c **** {   
 163:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
 164:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram == NULL)
 165:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 166:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_ERROR;
 167:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 168:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 169:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_RESET)
 170:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {  
 171:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* Allocate lock resource and initialize it */
 172:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->Lock = HAL_UNLOCKED;
 173:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 174:HALLIB/Src/stm32f4xx_hal_sdram.c ****     if(hsdram->MspInitCallback == NULL)
 175:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 176:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 177:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
 178:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
 179:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
 180:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 181:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 182:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* Init the low level hardware */
 183:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->MspInitCallback(hsdram);
 184:HALLIB/Src/stm32f4xx_hal_sdram.c **** #else
 185:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* Initialize the low level hardware (MSP) */
 186:HALLIB/Src/stm32f4xx_hal_sdram.c ****     HAL_SDRAM_MspInit(hsdram);
 187:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 188:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 189:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 190:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Initialize the SDRAM controller state */
 191:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 192:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 193:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Initialize SDRAM control Interface */
 194:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 195:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 196:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Initialize SDRAM timing Interface */
 197:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 198:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 199:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM controller state */
 200:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 201:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 202:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;
ARM GAS  /tmp/ccy6hGOI.s 			page 5


 203:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 204:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 205:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 206:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Perform the SDRAM device initialization sequence.
 207:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 208:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 209:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 210:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 211:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
 212:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 213:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 214:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->MspDeInitCallback == NULL)
 215:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 216:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->MspDeInitCallback = HAL_SDRAM_MspDeInit;
 217:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 218:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 219:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* DeInit the low level hardware */
 220:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->MspDeInitCallback(hsdram);
 221:HALLIB/Src/stm32f4xx_hal_sdram.c **** #else
 222:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Initialize the low level hardware (MSP) */
 223:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_SDRAM_MspDeInit(hsdram);
 224:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 225:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 226:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Configure the SDRAM registers with their reset values */
 227:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 228:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 229:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Reset the SDRAM controller state */
 230:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_RESET;
 231:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 232:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Release Lock */
 233:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 234:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 235:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;
 236:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 237:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 238:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 239:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  SDRAM MSP Init.
 240:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 241:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 242:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval None
 243:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 244:HALLIB/Src/stm32f4xx_hal_sdram.c **** __weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
 245:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 246:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 247:HALLIB/Src/stm32f4xx_hal_sdram.c ****   UNUSED(hsdram);
 248:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 249:HALLIB/Src/stm32f4xx_hal_sdram.c ****             the HAL_SDRAM_MspInit could be implemented in the user file
 250:HALLIB/Src/stm32f4xx_hal_sdram.c ****    */ 
 251:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 252:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 253:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 254:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  SDRAM MSP DeInit.
 255:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 256:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 257:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval None
 258:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 259:HALLIB/Src/stm32f4xx_hal_sdram.c **** __weak void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef *hsdram)
ARM GAS  /tmp/ccy6hGOI.s 			page 6


 260:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 261:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 262:HALLIB/Src/stm32f4xx_hal_sdram.c ****   UNUSED(hsdram);
 263:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 264:HALLIB/Src/stm32f4xx_hal_sdram.c ****             the HAL_SDRAM_MspDeInit could be implemented in the user file
 265:HALLIB/Src/stm32f4xx_hal_sdram.c ****    */ 
 266:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 267:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 268:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 269:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  This function handles SDRAM refresh error interrupt request.
 270:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 271:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 272:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 273:HALLIB/Src/stm32f4xx_hal_sdram.c **** */
 274:HALLIB/Src/stm32f4xx_hal_sdram.c **** void HAL_SDRAM_IRQHandler(SDRAM_HandleTypeDef *hsdram)
 275:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 276:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 277:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(__FMC_SDRAM_GET_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_IT))
 278:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 279:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* SDRAM refresh error interrupt callback */
 280:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 281:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->RefreshErrorCallback(hsdram);
 282:HALLIB/Src/stm32f4xx_hal_sdram.c **** #else
 283:HALLIB/Src/stm32f4xx_hal_sdram.c ****     HAL_SDRAM_RefreshErrorCallback(hsdram);
 284:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 285:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 286:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* Clear SDRAM refresh error interrupt pending bit */
 287:HALLIB/Src/stm32f4xx_hal_sdram.c ****     __FMC_SDRAM_CLEAR_FLAG(hsdram->Instance, FMC_SDRAM_FLAG_REFRESH_ERROR);
 288:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 289:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 290:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 291:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 292:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  SDRAM Refresh error callback.
 293:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 294:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module. 
 295:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval None
 296:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 297:HALLIB/Src/stm32f4xx_hal_sdram.c **** __weak void HAL_SDRAM_RefreshErrorCallback(SDRAM_HandleTypeDef *hsdram)
 298:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 299:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 300:HALLIB/Src/stm32f4xx_hal_sdram.c ****   UNUSED(hsdram);
 301:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 302:HALLIB/Src/stm32f4xx_hal_sdram.c ****             the HAL_SDRAM_RefreshErrorCallback could be implemented in the user file
 303:HALLIB/Src/stm32f4xx_hal_sdram.c ****    */ 
 304:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 305:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 306:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 307:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  DMA transfer complete callback.
 308:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
 309:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for the specified DMA module.
 310:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval None
 311:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 312:HALLIB/Src/stm32f4xx_hal_sdram.c **** __weak void HAL_SDRAM_DMA_XferCpltCallback(DMA_HandleTypeDef *hdma)
 313:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
  28              		.loc 1 313 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccy6hGOI.s 			page 7


  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33              	.LVL0:
  34 0000 7047     		bx	lr
  35              		.cfi_endproc
  36              	.LFE125:
  38              		.section	.text.HAL_SDRAM_DMA_XferErrorCallback,"ax",%progbits
  39              		.align	1
  40              		.weak	HAL_SDRAM_DMA_XferErrorCallback
  41              		.syntax unified
  42              		.thumb
  43              		.thumb_func
  44              		.fpu fpv4-sp-d16
  46              	HAL_SDRAM_DMA_XferErrorCallback:
  47              	.LFB126:
 314:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 315:HALLIB/Src/stm32f4xx_hal_sdram.c ****   UNUSED(hdma);
 316:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 317:HALLIB/Src/stm32f4xx_hal_sdram.c ****             the HAL_SDRAM_DMA_XferCpltCallback could be implemented in the user file
 318:HALLIB/Src/stm32f4xx_hal_sdram.c ****    */ 
 319:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 320:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 321:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 322:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  DMA transfer complete error callback.
 323:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hdma DMA handle
 324:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval None
 325:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 326:HALLIB/Src/stm32f4xx_hal_sdram.c **** __weak void HAL_SDRAM_DMA_XferErrorCallback(DMA_HandleTypeDef *hdma)
 327:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
  48              		.loc 1 327 0
  49              		.cfi_startproc
  50              		@ args = 0, pretend = 0, frame = 0
  51              		@ frame_needed = 0, uses_anonymous_args = 0
  52              		@ link register save eliminated.
  53              	.LVL1:
  54 0000 7047     		bx	lr
  55              		.cfi_endproc
  56              	.LFE126:
  58              		.section	.text.HAL_SDRAM_MspInit,"ax",%progbits
  59              		.align	1
  60              		.weak	HAL_SDRAM_MspInit
  61              		.syntax unified
  62              		.thumb
  63              		.thumb_func
  64              		.fpu fpv4-sp-d16
  66              	HAL_SDRAM_MspInit:
  67              	.LFB121:
 245:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
  68              		.loc 1 245 0
  69              		.cfi_startproc
  70              		@ args = 0, pretend = 0, frame = 0
  71              		@ frame_needed = 0, uses_anonymous_args = 0
  72              		@ link register save eliminated.
  73              	.LVL2:
  74 0000 7047     		bx	lr
  75              		.cfi_endproc
  76              	.LFE121:
ARM GAS  /tmp/ccy6hGOI.s 			page 8


  78              		.section	.text.HAL_SDRAM_Init,"ax",%progbits
  79              		.align	1
  80              		.global	HAL_SDRAM_Init
  81              		.syntax unified
  82              		.thumb
  83              		.thumb_func
  84              		.fpu fpv4-sp-d16
  86              	HAL_SDRAM_Init:
  87              	.LFB119:
 162:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
  88              		.loc 1 162 0
  89              		.cfi_startproc
  90              		@ args = 0, pretend = 0, frame = 0
  91              		@ frame_needed = 0, uses_anonymous_args = 0
  92              	.LVL3:
 164:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
  93              		.loc 1 164 0
  94 0000 D8B1     		cbz	r0, .L7
 162:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM handle parameter */
  95              		.loc 1 162 0
  96 0002 38B5     		push	{r3, r4, r5, lr}
  97              	.LCFI0:
  98              		.cfi_def_cfa_offset 16
  99              		.cfi_offset 3, -16
 100              		.cfi_offset 4, -12
 101              		.cfi_offset 5, -8
 102              		.cfi_offset 14, -4
 103 0004 0446     		mov	r4, r0
 104 0006 0D46     		mov	r5, r1
 169:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {  
 105              		.loc 1 169 0
 106 0008 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 107 000c 83B1     		cbz	r3, .L12
 108              	.LVL4:
 109              	.L6:
 191:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 110              		.loc 1 191 0
 111 000e 0223     		movs	r3, #2
 112 0010 84F82C30 		strb	r3, [r4, #44]
 194:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 113              		.loc 1 194 0
 114 0014 211D     		adds	r1, r4, #4
 115 0016 2068     		ldr	r0, [r4]
 116 0018 FFF7FEFF 		bl	FMC_SDRAM_Init
 117              	.LVL5:
 197:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 118              		.loc 1 197 0
 119 001c 6268     		ldr	r2, [r4, #4]
 120 001e 2946     		mov	r1, r5
 121 0020 2068     		ldr	r0, [r4]
 122 0022 FFF7FEFF 		bl	FMC_SDRAM_Timing_Init
 123              	.LVL6:
 200:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 124              		.loc 1 200 0
 125 0026 0123     		movs	r3, #1
 126 0028 84F82C30 		strb	r3, [r4, #44]
 202:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
ARM GAS  /tmp/ccy6hGOI.s 			page 9


 127              		.loc 1 202 0
 128 002c 0020     		movs	r0, #0
 129 002e 38BD     		pop	{r3, r4, r5, pc}
 130              	.LVL7:
 131              	.L12:
 172:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 132              		.loc 1 172 0
 133 0030 80F82D30 		strb	r3, [r0, #45]
 186:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 134              		.loc 1 186 0
 135 0034 FFF7FEFF 		bl	HAL_SDRAM_MspInit
 136              	.LVL8:
 137 0038 E9E7     		b	.L6
 138              	.LVL9:
 139              	.L7:
 140              	.LCFI1:
 141              		.cfi_def_cfa_offset 0
 142              		.cfi_restore 3
 143              		.cfi_restore 4
 144              		.cfi_restore 5
 145              		.cfi_restore 14
 166:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 146              		.loc 1 166 0
 147 003a 0120     		movs	r0, #1
 148              	.LVL10:
 149 003c 7047     		bx	lr
 150              		.cfi_endproc
 151              	.LFE119:
 153              		.section	.text.HAL_SDRAM_MspDeInit,"ax",%progbits
 154              		.align	1
 155              		.weak	HAL_SDRAM_MspDeInit
 156              		.syntax unified
 157              		.thumb
 158              		.thumb_func
 159              		.fpu fpv4-sp-d16
 161              	HAL_SDRAM_MspDeInit:
 162              	.LFB122:
 260:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 163              		.loc 1 260 0
 164              		.cfi_startproc
 165              		@ args = 0, pretend = 0, frame = 0
 166              		@ frame_needed = 0, uses_anonymous_args = 0
 167              		@ link register save eliminated.
 168              	.LVL11:
 169 0000 7047     		bx	lr
 170              		.cfi_endproc
 171              	.LFE122:
 173              		.section	.text.HAL_SDRAM_DeInit,"ax",%progbits
 174              		.align	1
 175              		.global	HAL_SDRAM_DeInit
 176              		.syntax unified
 177              		.thumb
 178              		.thumb_func
 179              		.fpu fpv4-sp-d16
 181              	HAL_SDRAM_DeInit:
 182              	.LFB120:
 212:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
ARM GAS  /tmp/ccy6hGOI.s 			page 10


 183              		.loc 1 212 0
 184              		.cfi_startproc
 185              		@ args = 0, pretend = 0, frame = 0
 186              		@ frame_needed = 0, uses_anonymous_args = 0
 187              	.LVL12:
 212:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 188              		.loc 1 212 0
 189 0000 10B5     		push	{r4, lr}
 190              	.LCFI2:
 191              		.cfi_def_cfa_offset 8
 192              		.cfi_offset 4, -8
 193              		.cfi_offset 14, -4
 194 0002 0446     		mov	r4, r0
 223:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 195              		.loc 1 223 0
 196 0004 FFF7FEFF 		bl	HAL_SDRAM_MspDeInit
 197              	.LVL13:
 227:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 198              		.loc 1 227 0
 199 0008 6168     		ldr	r1, [r4, #4]
 200 000a 2068     		ldr	r0, [r4]
 201 000c FFF7FEFF 		bl	FMC_SDRAM_DeInit
 202              	.LVL14:
 230:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 203              		.loc 1 230 0
 204 0010 0020     		movs	r0, #0
 205 0012 84F82C00 		strb	r0, [r4, #44]
 233:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 206              		.loc 1 233 0
 207 0016 84F82D00 		strb	r0, [r4, #45]
 236:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 208              		.loc 1 236 0
 209 001a 10BD     		pop	{r4, pc}
 210              		.cfi_endproc
 211              	.LFE120:
 213              		.section	.text.HAL_SDRAM_RefreshErrorCallback,"ax",%progbits
 214              		.align	1
 215              		.weak	HAL_SDRAM_RefreshErrorCallback
 216              		.syntax unified
 217              		.thumb
 218              		.thumb_func
 219              		.fpu fpv4-sp-d16
 221              	HAL_SDRAM_RefreshErrorCallback:
 222              	.LFB124:
 298:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 223              		.loc 1 298 0
 224              		.cfi_startproc
 225              		@ args = 0, pretend = 0, frame = 0
 226              		@ frame_needed = 0, uses_anonymous_args = 0
 227              		@ link register save eliminated.
 228              	.LVL15:
 229 0000 7047     		bx	lr
 230              		.cfi_endproc
 231              	.LFE124:
 233              		.section	.text.HAL_SDRAM_IRQHandler,"ax",%progbits
 234              		.align	1
 235              		.global	HAL_SDRAM_IRQHandler
ARM GAS  /tmp/ccy6hGOI.s 			page 11


 236              		.syntax unified
 237              		.thumb
 238              		.thumb_func
 239              		.fpu fpv4-sp-d16
 241              	HAL_SDRAM_IRQHandler:
 242              	.LFB123:
 275:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 243              		.loc 1 275 0
 244              		.cfi_startproc
 245              		@ args = 0, pretend = 0, frame = 0
 246              		@ frame_needed = 0, uses_anonymous_args = 0
 247              	.LVL16:
 277:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 248              		.loc 1 277 0
 249 0000 0368     		ldr	r3, [r0]
 250 0002 9B69     		ldr	r3, [r3, #24]
 251 0004 13F0010F 		tst	r3, #1
 252 0008 00D1     		bne	.L23
 253 000a 7047     		bx	lr
 254              	.L23:
 275:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check SDRAM interrupt Rising edge flag */
 255              		.loc 1 275 0
 256 000c 10B5     		push	{r4, lr}
 257              	.LCFI3:
 258              		.cfi_def_cfa_offset 8
 259              		.cfi_offset 4, -8
 260              		.cfi_offset 14, -4
 261 000e 0446     		mov	r4, r0
 283:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 262              		.loc 1 283 0
 263 0010 FFF7FEFF 		bl	HAL_SDRAM_RefreshErrorCallback
 264              	.LVL17:
 287:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 265              		.loc 1 287 0
 266 0014 2268     		ldr	r2, [r4]
 267 0016 5369     		ldr	r3, [r2, #20]
 268 0018 43F00103 		orr	r3, r3, #1
 269 001c 5361     		str	r3, [r2, #20]
 270 001e 10BD     		pop	{r4, pc}
 271              		.cfi_endproc
 272              	.LFE123:
 274              		.section	.text.HAL_SDRAM_Read_8b,"ax",%progbits
 275              		.align	1
 276              		.global	HAL_SDRAM_Read_8b
 277              		.syntax unified
 278              		.thumb
 279              		.thumb_func
 280              		.fpu fpv4-sp-d16
 282              	HAL_SDRAM_Read_8b:
 283              	.LFB127:
 328:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Prevent unused argument(s) compilation warning */
 329:HALLIB/Src/stm32f4xx_hal_sdram.c ****   UNUSED(hdma);
 330:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* NOTE: This function Should not be modified, when the callback is needed,
 331:HALLIB/Src/stm32f4xx_hal_sdram.c ****             the HAL_SDRAM_DMA_XferErrorCallback could be implemented in the user file
 332:HALLIB/Src/stm32f4xx_hal_sdram.c ****    */ 
 333:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 334:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
ARM GAS  /tmp/ccy6hGOI.s 			page 12


 335:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @}
 336:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 337:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 338:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group2 Input and Output functions 
 339:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief    Input Output and memory control functions 
 340:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *
 341:HALLIB/Src/stm32f4xx_hal_sdram.c ****   @verbatim    
 342:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
 343:HALLIB/Src/stm32f4xx_hal_sdram.c ****                     ##### SDRAM Input and Output functions #####
 344:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
 345:HALLIB/Src/stm32f4xx_hal_sdram.c ****   [..]  
 346:HALLIB/Src/stm32f4xx_hal_sdram.c ****     This section provides functions allowing to use and control the SDRAM memory
 347:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 348:HALLIB/Src/stm32f4xx_hal_sdram.c **** @endverbatim
 349:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 350:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 351:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 352:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 353:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Reads 8-bit data buffer from the SDRAM memory.
 354:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 355:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 356:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 357:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 358:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 359:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 360:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 361:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_8b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint8_t *pDstB
 362:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 284              		.loc 1 362 0
 285              		.cfi_startproc
 286              		@ args = 0, pretend = 0, frame = 0
 287              		@ frame_needed = 0, uses_anonymous_args = 0
 288              		@ link register save eliminated.
 289              	.LVL18:
 290 0000 10B4     		push	{r4}
 291              	.LCFI4:
 292              		.cfi_def_cfa_offset 4
 293              		.cfi_offset 4, -4
 294              	.LVL19:
 363:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint8_t *pSdramAddress = (uint8_t *)pAddress;
 364:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 365:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 366:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 295              		.loc 1 366 0
 296 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 297 0006 012C     		cmp	r4, #1
 298 0008 19D0     		beq	.L28
 299              		.loc 1 366 0 is_stmt 0 discriminator 2
 300 000a 0124     		movs	r4, #1
 301 000c 80F82D40 		strb	r4, [r0, #45]
 367:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 368:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 369:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 302              		.loc 1 369 0 is_stmt 1 discriminator 2
 303 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 304 0014 E4B2     		uxtb	r4, r4
 305 0016 022C     		cmp	r4, #2
ARM GAS  /tmp/ccy6hGOI.s 			page 13


 306 0018 15D0     		beq	.L29
 370:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 371:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 372:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 373:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 307              		.loc 1 373 0
 308 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 309 001e E4B2     		uxtb	r4, r4
 310 0020 052C     		cmp	r4, #5
 311 0022 06D1     		bne	.L26
 374:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 375:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 312              		.loc 1 375 0
 313 0024 0120     		movs	r0, #1
 314              	.LVL20:
 315 0026 0BE0     		b	.L25
 316              	.LVL21:
 317              	.L27:
 376:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 377:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 378:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Read data from source */
 379:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 380:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 381:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint8_t *)pSdramAddress;  
 318              		.loc 1 381 0 discriminator 2
 319 0028 11F8014B 		ldrb	r4, [r1], #1	@ zero_extendqisi2
 320              	.LVL22:
 321 002c 02F8014B 		strb	r4, [r2], #1
 322              	.LVL23:
 379:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 323              		.loc 1 379 0 discriminator 2
 324 0030 013B     		subs	r3, r3, #1
 325              	.LVL24:
 326              	.L26:
 379:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 327              		.loc 1 379 0 is_stmt 0 discriminator 1
 328 0032 002B     		cmp	r3, #0
 329 0034 F8D1     		bne	.L27
 382:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pDstBuffer++;
 383:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;
 384:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 385:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 386:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 387:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 330              		.loc 1 387 0 is_stmt 1
 331 0036 80F82D30 		strb	r3, [r0, #45]
 388:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 389:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK; 
 332              		.loc 1 389 0
 333 003a 1846     		mov	r0, r3
 334              	.LVL25:
 335 003c 00E0     		b	.L25
 336              	.LVL26:
 337              	.L28:
 366:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 338              		.loc 1 366 0
 339 003e 0220     		movs	r0, #2
ARM GAS  /tmp/ccy6hGOI.s 			page 14


 340              	.LVL27:
 341              	.L25:
 390:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 342              		.loc 1 390 0
 343 0040 5DF8044B 		ldr	r4, [sp], #4
 344              	.LCFI5:
 345              		.cfi_remember_state
 346              		.cfi_restore 4
 347              		.cfi_def_cfa_offset 0
 348 0044 7047     		bx	lr
 349              	.LVL28:
 350              	.L29:
 351              	.LCFI6:
 352              		.cfi_restore_state
 371:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 353              		.loc 1 371 0
 354 0046 0220     		movs	r0, #2
 355              	.LVL29:
 356 0048 FAE7     		b	.L25
 357              		.cfi_endproc
 358              	.LFE127:
 360              		.section	.text.HAL_SDRAM_Write_8b,"ax",%progbits
 361              		.align	1
 362              		.global	HAL_SDRAM_Write_8b
 363              		.syntax unified
 364              		.thumb
 365              		.thumb_func
 366              		.fpu fpv4-sp-d16
 368              	HAL_SDRAM_Write_8b:
 369              	.LFB128:
 391:HALLIB/Src/stm32f4xx_hal_sdram.c ****  
 392:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 393:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Writes 8-bit data buffer to SDRAM memory.
 394:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 395:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 396:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 397:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 398:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 399:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 400:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 401:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_8b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint8_t *pSrc
 402:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 370              		.loc 1 402 0
 371              		.cfi_startproc
 372              		@ args = 0, pretend = 0, frame = 0
 373              		@ frame_needed = 0, uses_anonymous_args = 0
 374              		@ link register save eliminated.
 375              	.LVL30:
 376 0000 10B4     		push	{r4}
 377              	.LCFI7:
 378              		.cfi_def_cfa_offset 4
 379              		.cfi_offset 4, -4
 380              	.LVL31:
 403:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint8_t *pSdramAddress = (uint8_t *)pAddress;
 404:HALLIB/Src/stm32f4xx_hal_sdram.c ****   uint32_t tmp = 0U;
 405:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 406:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
ARM GAS  /tmp/ccy6hGOI.s 			page 15


 407:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 381              		.loc 1 407 0
 382 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 383 0006 012C     		cmp	r4, #1
 384 0008 17D0     		beq	.L36
 385              		.loc 1 407 0 is_stmt 0 discriminator 2
 386 000a 0124     		movs	r4, #1
 387 000c 80F82D40 		strb	r4, [r0, #45]
 408:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 409:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 410:HALLIB/Src/stm32f4xx_hal_sdram.c ****   tmp = hsdram->State;
 388              		.loc 1 410 0 is_stmt 1 discriminator 2
 389 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 390 0014 E4B2     		uxtb	r4, r4
 391              	.LVL32:
 411:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 412:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 392              		.loc 1 412 0 discriminator 2
 393 0016 022C     		cmp	r4, #2
 394 0018 13D0     		beq	.L37
 413:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 414:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 415:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 416:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 395              		.loc 1 416 0
 396 001a 043C     		subs	r4, r4, #4
 397              	.LVL33:
 398 001c 012C     		cmp	r4, #1
 399 001e 06D8     		bhi	.L34
 417:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 418:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 400              		.loc 1 418 0
 401 0020 0120     		movs	r0, #1
 402              	.LVL34:
 403 0022 0BE0     		b	.L33
 404              	.LVL35:
 405              	.L35:
 419:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 420:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 421:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Write data to memory */
 422:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 423:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 424:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *(__IO uint8_t *)pSdramAddress = *pSrcBuffer;
 406              		.loc 1 424 0 discriminator 2
 407 0024 12F8014B 		ldrb	r4, [r2], #1	@ zero_extendqisi2
 408              	.LVL36:
 409 0028 01F8014B 		strb	r4, [r1], #1
 410              	.LVL37:
 422:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 411              		.loc 1 422 0 discriminator 2
 412 002c 013B     		subs	r3, r3, #1
 413              	.LVL38:
 414              	.L34:
 422:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 415              		.loc 1 422 0 is_stmt 0 discriminator 1
 416 002e 002B     		cmp	r3, #0
 417 0030 F8D1     		bne	.L35
ARM GAS  /tmp/ccy6hGOI.s 			page 16


 425:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSrcBuffer++;
 426:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;
 427:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 428:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 429:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 430:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 418              		.loc 1 430 0 is_stmt 1
 419 0032 80F82D30 		strb	r3, [r0, #45]
 431:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 432:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;   
 420              		.loc 1 432 0
 421 0036 1846     		mov	r0, r3
 422              	.LVL39:
 423 0038 00E0     		b	.L33
 424              	.LVL40:
 425              	.L36:
 407:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 426              		.loc 1 407 0
 427 003a 0220     		movs	r0, #2
 428              	.LVL41:
 429              	.L33:
 433:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 430              		.loc 1 433 0
 431 003c 5DF8044B 		ldr	r4, [sp], #4
 432              	.LCFI8:
 433              		.cfi_remember_state
 434              		.cfi_restore 4
 435              		.cfi_def_cfa_offset 0
 436 0040 7047     		bx	lr
 437              	.LVL42:
 438              	.L37:
 439              	.LCFI9:
 440              		.cfi_restore_state
 414:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 441              		.loc 1 414 0
 442 0042 0220     		movs	r0, #2
 443              	.LVL43:
 444 0044 FAE7     		b	.L33
 445              		.cfi_endproc
 446              	.LFE128:
 448              		.section	.text.HAL_SDRAM_Read_16b,"ax",%progbits
 449              		.align	1
 450              		.global	HAL_SDRAM_Read_16b
 451              		.syntax unified
 452              		.thumb
 453              		.thumb_func
 454              		.fpu fpv4-sp-d16
 456              	HAL_SDRAM_Read_16b:
 457              	.LFB129:
 434:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 435:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 436:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Reads 16-bit data buffer from the SDRAM memory. 
 437:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 438:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 439:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 440:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 441:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
ARM GAS  /tmp/ccy6hGOI.s 			page 17


 442:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 443:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 444:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pDs
 445:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 458              		.loc 1 445 0
 459              		.cfi_startproc
 460              		@ args = 0, pretend = 0, frame = 0
 461              		@ frame_needed = 0, uses_anonymous_args = 0
 462              		@ link register save eliminated.
 463              	.LVL44:
 464 0000 10B4     		push	{r4}
 465              	.LCFI10:
 466              		.cfi_def_cfa_offset 4
 467              		.cfi_offset 4, -4
 468              	.LVL45:
 446:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 447:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 448:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 449:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 469              		.loc 1 449 0
 470 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 471 0006 012C     		cmp	r4, #1
 472 0008 19D0     		beq	.L44
 473              		.loc 1 449 0 is_stmt 0 discriminator 2
 474 000a 0124     		movs	r4, #1
 475 000c 80F82D40 		strb	r4, [r0, #45]
 450:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 451:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 452:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 476              		.loc 1 452 0 is_stmt 1 discriminator 2
 477 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 478 0014 E4B2     		uxtb	r4, r4
 479 0016 022C     		cmp	r4, #2
 480 0018 15D0     		beq	.L45
 453:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 454:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 455:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 456:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 481              		.loc 1 456 0
 482 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 483 001e E4B2     		uxtb	r4, r4
 484 0020 052C     		cmp	r4, #5
 485 0022 06D1     		bne	.L42
 457:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 458:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 486              		.loc 1 458 0
 487 0024 0120     		movs	r0, #1
 488              	.LVL46:
 489 0026 0BE0     		b	.L41
 490              	.LVL47:
 491              	.L43:
 459:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 460:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 461:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Read data from source */
 462:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 463:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 464:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint16_t *)pSdramAddress;  
ARM GAS  /tmp/ccy6hGOI.s 			page 18


 492              		.loc 1 464 0 discriminator 2
 493 0028 31F8024B 		ldrh	r4, [r1], #2
 494              	.LVL48:
 495 002c 22F8024B 		strh	r4, [r2], #2	@ movhi
 496              	.LVL49:
 462:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 497              		.loc 1 462 0 discriminator 2
 498 0030 013B     		subs	r3, r3, #1
 499              	.LVL50:
 500              	.L42:
 462:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 501              		.loc 1 462 0 is_stmt 0 discriminator 1
 502 0032 002B     		cmp	r3, #0
 503 0034 F8D1     		bne	.L43
 465:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pDstBuffer++;
 466:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;               
 467:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 468:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 469:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 470:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);       
 504              		.loc 1 470 0 is_stmt 1
 505 0036 80F82D30 		strb	r3, [r0, #45]
 471:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 472:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK; 
 506              		.loc 1 472 0
 507 003a 1846     		mov	r0, r3
 508              	.LVL51:
 509 003c 00E0     		b	.L41
 510              	.LVL52:
 511              	.L44:
 449:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 512              		.loc 1 449 0
 513 003e 0220     		movs	r0, #2
 514              	.LVL53:
 515              	.L41:
 473:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 516              		.loc 1 473 0
 517 0040 5DF8044B 		ldr	r4, [sp], #4
 518              	.LCFI11:
 519              		.cfi_remember_state
 520              		.cfi_restore 4
 521              		.cfi_def_cfa_offset 0
 522 0044 7047     		bx	lr
 523              	.LVL54:
 524              	.L45:
 525              	.LCFI12:
 526              		.cfi_restore_state
 454:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 527              		.loc 1 454 0
 528 0046 0220     		movs	r0, #2
 529              	.LVL55:
 530 0048 FAE7     		b	.L41
 531              		.cfi_endproc
 532              	.LFE129:
 534              		.section	.text.HAL_SDRAM_Write_16b,"ax",%progbits
 535              		.align	1
 536              		.global	HAL_SDRAM_Write_16b
ARM GAS  /tmp/ccy6hGOI.s 			page 19


 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv4-sp-d16
 542              	HAL_SDRAM_Write_16b:
 543              	.LFB130:
 474:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 475:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 476:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Writes 16-bit data buffer to SDRAM memory. 
 477:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 478:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 479:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 480:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 481:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 482:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 483:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 484:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_16b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint16_t *pS
 485:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 544              		.loc 1 485 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 0
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              		@ link register save eliminated.
 549              	.LVL56:
 550 0000 10B4     		push	{r4}
 551              	.LCFI13:
 552              		.cfi_def_cfa_offset 4
 553              		.cfi_offset 4, -4
 554              	.LVL57:
 486:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint16_t *pSdramAddress = (uint16_t *)pAddress;
 487:HALLIB/Src/stm32f4xx_hal_sdram.c ****   uint32_t tmp = 0U;
 488:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 489:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 490:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 555              		.loc 1 490 0
 556 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 557 0006 012C     		cmp	r4, #1
 558 0008 17D0     		beq	.L52
 559              		.loc 1 490 0 is_stmt 0 discriminator 2
 560 000a 0124     		movs	r4, #1
 561 000c 80F82D40 		strb	r4, [r0, #45]
 491:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 492:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 493:HALLIB/Src/stm32f4xx_hal_sdram.c ****   tmp = hsdram->State;
 562              		.loc 1 493 0 is_stmt 1 discriminator 2
 563 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 564 0014 E4B2     		uxtb	r4, r4
 565              	.LVL58:
 494:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 495:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 566              		.loc 1 495 0 discriminator 2
 567 0016 022C     		cmp	r4, #2
 568 0018 13D0     		beq	.L53
 496:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 497:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 498:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 499:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
ARM GAS  /tmp/ccy6hGOI.s 			page 20


 569              		.loc 1 499 0
 570 001a 043C     		subs	r4, r4, #4
 571              	.LVL59:
 572 001c 012C     		cmp	r4, #1
 573 001e 06D8     		bhi	.L50
 500:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 501:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 574              		.loc 1 501 0
 575 0020 0120     		movs	r0, #1
 576              	.LVL60:
 577 0022 0BE0     		b	.L49
 578              	.LVL61:
 579              	.L51:
 502:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 503:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 504:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Write data to memory */
 505:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 506:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 507:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *(__IO uint16_t *)pSdramAddress = *pSrcBuffer;
 580              		.loc 1 507 0 discriminator 2
 581 0024 32F8024B 		ldrh	r4, [r2], #2
 582              	.LVL62:
 583 0028 21F8024B 		strh	r4, [r1], #2	@ movhi
 584              	.LVL63:
 505:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 585              		.loc 1 505 0 discriminator 2
 586 002c 013B     		subs	r3, r3, #1
 587              	.LVL64:
 588              	.L50:
 505:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 589              		.loc 1 505 0 is_stmt 0 discriminator 1
 590 002e 002B     		cmp	r3, #0
 591 0030 F8D1     		bne	.L51
 508:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSrcBuffer++;
 509:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;            
 510:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 511:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 512:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 513:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 592              		.loc 1 513 0 is_stmt 1
 593 0032 80F82D30 		strb	r3, [r0, #45]
 514:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 515:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;   
 594              		.loc 1 515 0
 595 0036 1846     		mov	r0, r3
 596              	.LVL65:
 597 0038 00E0     		b	.L49
 598              	.LVL66:
 599              	.L52:
 490:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 600              		.loc 1 490 0
 601 003a 0220     		movs	r0, #2
 602              	.LVL67:
 603              	.L49:
 516:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 604              		.loc 1 516 0
 605 003c 5DF8044B 		ldr	r4, [sp], #4
ARM GAS  /tmp/ccy6hGOI.s 			page 21


 606              	.LCFI14:
 607              		.cfi_remember_state
 608              		.cfi_restore 4
 609              		.cfi_def_cfa_offset 0
 610 0040 7047     		bx	lr
 611              	.LVL68:
 612              	.L53:
 613              	.LCFI15:
 614              		.cfi_restore_state
 497:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 615              		.loc 1 497 0
 616 0042 0220     		movs	r0, #2
 617              	.LVL69:
 618 0044 FAE7     		b	.L49
 619              		.cfi_endproc
 620              	.LFE130:
 622              		.section	.text.HAL_SDRAM_Read_32b,"ax",%progbits
 623              		.align	1
 624              		.global	HAL_SDRAM_Read_32b
 625              		.syntax unified
 626              		.thumb
 627              		.thumb_func
 628              		.fpu fpv4-sp-d16
 630              	HAL_SDRAM_Read_32b:
 631              	.LFB131:
 517:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 518:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 519:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Reads 32-bit data buffer from the SDRAM memory. 
 520:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 521:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 522:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 523:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 524:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 525:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 526:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 527:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDs
 528:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 632              		.loc 1 528 0
 633              		.cfi_startproc
 634              		@ args = 0, pretend = 0, frame = 0
 635              		@ frame_needed = 0, uses_anonymous_args = 0
 636              		@ link register save eliminated.
 637              	.LVL70:
 638 0000 10B4     		push	{r4}
 639              	.LCFI16:
 640              		.cfi_def_cfa_offset 4
 641              		.cfi_offset 4, -4
 642              	.LVL71:
 529:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 530:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 531:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 532:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 643              		.loc 1 532 0
 644 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 645 0006 012C     		cmp	r4, #1
 646 0008 19D0     		beq	.L60
 647              		.loc 1 532 0 is_stmt 0 discriminator 2
ARM GAS  /tmp/ccy6hGOI.s 			page 22


 648 000a 0124     		movs	r4, #1
 649 000c 80F82D40 		strb	r4, [r0, #45]
 533:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 534:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 535:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 650              		.loc 1 535 0 is_stmt 1 discriminator 2
 651 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 652 0014 E4B2     		uxtb	r4, r4
 653 0016 022C     		cmp	r4, #2
 654 0018 15D0     		beq	.L61
 536:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 537:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 538:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 539:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_PRECHARGED)
 655              		.loc 1 539 0
 656 001a 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 657 001e E4B2     		uxtb	r4, r4
 658 0020 052C     		cmp	r4, #5
 659 0022 06D1     		bne	.L58
 540:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 541:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 660              		.loc 1 541 0
 661 0024 0120     		movs	r0, #1
 662              	.LVL72:
 663 0026 0BE0     		b	.L57
 664              	.LVL73:
 665              	.L59:
 542:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 543:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 544:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Read data from source */
 545:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 546:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 547:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *pDstBuffer = *(__IO uint32_t *)pSdramAddress;  
 666              		.loc 1 547 0 discriminator 2
 667 0028 51F8044B 		ldr	r4, [r1], #4
 668              	.LVL74:
 669 002c 42F8044B 		str	r4, [r2], #4
 670              	.LVL75:
 545:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 671              		.loc 1 545 0 discriminator 2
 672 0030 013B     		subs	r3, r3, #1
 673              	.LVL76:
 674              	.L58:
 545:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 675              		.loc 1 545 0 is_stmt 0 discriminator 1
 676 0032 002B     		cmp	r3, #0
 677 0034 F8D1     		bne	.L59
 548:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pDstBuffer++;
 549:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;               
 550:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 551:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 552:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 553:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);       
 678              		.loc 1 553 0 is_stmt 1
 679 0036 80F82D30 		strb	r3, [r0, #45]
 554:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 555:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK; 
ARM GAS  /tmp/ccy6hGOI.s 			page 23


 680              		.loc 1 555 0
 681 003a 1846     		mov	r0, r3
 682              	.LVL77:
 683 003c 00E0     		b	.L57
 684              	.LVL78:
 685              	.L60:
 532:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 686              		.loc 1 532 0
 687 003e 0220     		movs	r0, #2
 688              	.LVL79:
 689              	.L57:
 556:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 690              		.loc 1 556 0
 691 0040 5DF8044B 		ldr	r4, [sp], #4
 692              	.LCFI17:
 693              		.cfi_remember_state
 694              		.cfi_restore 4
 695              		.cfi_def_cfa_offset 0
 696 0044 7047     		bx	lr
 697              	.LVL80:
 698              	.L61:
 699              	.LCFI18:
 700              		.cfi_restore_state
 537:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 701              		.loc 1 537 0
 702 0046 0220     		movs	r0, #2
 703              	.LVL81:
 704 0048 FAE7     		b	.L57
 705              		.cfi_endproc
 706              	.LFE131:
 708              		.section	.text.HAL_SDRAM_Write_32b,"ax",%progbits
 709              		.align	1
 710              		.global	HAL_SDRAM_Write_32b
 711              		.syntax unified
 712              		.thumb
 713              		.thumb_func
 714              		.fpu fpv4-sp-d16
 716              	HAL_SDRAM_Write_32b:
 717              	.LFB132:
 557:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 558:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 559:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Writes 32-bit data buffer to SDRAM memory. 
 560:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 561:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 562:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 563:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 564:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 565:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 566:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 567:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pS
 568:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 718              		.loc 1 568 0
 719              		.cfi_startproc
 720              		@ args = 0, pretend = 0, frame = 0
 721              		@ frame_needed = 0, uses_anonymous_args = 0
 722              		@ link register save eliminated.
 723              	.LVL82:
ARM GAS  /tmp/ccy6hGOI.s 			page 24


 724 0000 10B4     		push	{r4}
 725              	.LCFI19:
 726              		.cfi_def_cfa_offset 4
 727              		.cfi_offset 4, -4
 728              	.LVL83:
 569:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 570:HALLIB/Src/stm32f4xx_hal_sdram.c ****   uint32_t tmp = 0U;
 571:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 572:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 573:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 729              		.loc 1 573 0
 730 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 731 0006 012C     		cmp	r4, #1
 732 0008 17D0     		beq	.L68
 733              		.loc 1 573 0 is_stmt 0 discriminator 2
 734 000a 0124     		movs	r4, #1
 735 000c 80F82D40 		strb	r4, [r0, #45]
 574:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 575:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 576:HALLIB/Src/stm32f4xx_hal_sdram.c ****   tmp = hsdram->State;
 736              		.loc 1 576 0 is_stmt 1 discriminator 2
 737 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 738 0014 E4B2     		uxtb	r4, r4
 739              	.LVL84:
 577:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 578:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 740              		.loc 1 578 0 discriminator 2
 741 0016 022C     		cmp	r4, #2
 742 0018 13D0     		beq	.L69
 579:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 580:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 581:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 582:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 743              		.loc 1 582 0
 744 001a 043C     		subs	r4, r4, #4
 745              	.LVL85:
 746 001c 012C     		cmp	r4, #1
 747 001e 06D8     		bhi	.L66
 583:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 584:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 748              		.loc 1 584 0
 749 0020 0120     		movs	r0, #1
 750              	.LVL86:
 751 0022 0BE0     		b	.L65
 752              	.LVL87:
 753              	.L67:
 585:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 586:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 587:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Write data to memory */
 588:HALLIB/Src/stm32f4xx_hal_sdram.c ****   for(; BufferSize != 0U; BufferSize--)
 589:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 590:HALLIB/Src/stm32f4xx_hal_sdram.c ****     *(__IO uint32_t *)pSdramAddress = *pSrcBuffer;
 754              		.loc 1 590 0 discriminator 2
 755 0024 52F8044B 		ldr	r4, [r2], #4
 756              	.LVL88:
 757 0028 41F8044B 		str	r4, [r1], #4
 758              	.LVL89:
ARM GAS  /tmp/ccy6hGOI.s 			page 25


 588:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 759              		.loc 1 588 0 discriminator 2
 760 002c 013B     		subs	r3, r3, #1
 761              	.LVL90:
 762              	.L66:
 588:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 763              		.loc 1 588 0 is_stmt 0 discriminator 1
 764 002e 002B     		cmp	r3, #0
 765 0030 F8D1     		bne	.L67
 591:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSrcBuffer++;
 592:HALLIB/Src/stm32f4xx_hal_sdram.c ****     pSdramAddress++;          
 593:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 594:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 595:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 596:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);    
 766              		.loc 1 596 0 is_stmt 1
 767 0032 80F82D30 		strb	r3, [r0, #45]
 597:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 598:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;  
 768              		.loc 1 598 0
 769 0036 1846     		mov	r0, r3
 770              	.LVL91:
 771 0038 00E0     		b	.L65
 772              	.LVL92:
 773              	.L68:
 573:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 774              		.loc 1 573 0
 775 003a 0220     		movs	r0, #2
 776              	.LVL93:
 777              	.L65:
 599:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 778              		.loc 1 599 0
 779 003c 5DF8044B 		ldr	r4, [sp], #4
 780              	.LCFI20:
 781              		.cfi_remember_state
 782              		.cfi_restore 4
 783              		.cfi_def_cfa_offset 0
 784 0040 7047     		bx	lr
 785              	.LVL94:
 786              	.L69:
 787              	.LCFI21:
 788              		.cfi_restore_state
 580:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 789              		.loc 1 580 0
 790 0042 0220     		movs	r0, #2
 791              	.LVL95:
 792 0044 FAE7     		b	.L65
 793              		.cfi_endproc
 794              	.LFE132:
 796              		.section	.text.HAL_SDRAM_Read_DMA,"ax",%progbits
 797              		.align	1
 798              		.global	HAL_SDRAM_Read_DMA
 799              		.syntax unified
 800              		.thumb
 801              		.thumb_func
 802              		.fpu fpv4-sp-d16
 804              	HAL_SDRAM_Read_DMA:
ARM GAS  /tmp/ccy6hGOI.s 			page 26


 805              	.LFB133:
 600:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 601:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 602:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Reads a Words data from the SDRAM memory using DMA transfer. 
 603:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 604:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 605:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to read start address
 606:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pDstBuffer Pointer to destination buffer  
 607:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to read from memory
 608:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 609:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 610:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDs
 611:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 806              		.loc 1 611 0
 807              		.cfi_startproc
 808              		@ args = 0, pretend = 0, frame = 0
 809              		@ frame_needed = 0, uses_anonymous_args = 0
 810              	.LVL96:
 811 0000 38B5     		push	{r3, r4, r5, lr}
 812              	.LCFI22:
 813              		.cfi_def_cfa_offset 16
 814              		.cfi_offset 3, -16
 815              		.cfi_offset 4, -12
 816              		.cfi_offset 5, -8
 817              		.cfi_offset 14, -4
 818              	.LVL97:
 612:HALLIB/Src/stm32f4xx_hal_sdram.c ****   uint32_t tmp = 0U;
 613:HALLIB/Src/stm32f4xx_hal_sdram.c ****     
 614:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 615:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 819              		.loc 1 615 0
 820 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 821 0006 012C     		cmp	r4, #1
 822 0008 17D0     		beq	.L74
 823              		.loc 1 615 0 is_stmt 0 discriminator 2
 824 000a 0124     		movs	r4, #1
 825 000c 80F82D40 		strb	r4, [r0, #45]
 616:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 617:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */  
 618:HALLIB/Src/stm32f4xx_hal_sdram.c ****   tmp = hsdram->State;
 826              		.loc 1 618 0 is_stmt 1 discriminator 2
 827 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 828 0014 E4B2     		uxtb	r4, r4
 829              	.LVL98:
 619:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 620:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 830              		.loc 1 620 0 discriminator 2
 831 0016 022C     		cmp	r4, #2
 832 0018 11D0     		beq	.L75
 621:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 622:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 623:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 624:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(tmp == HAL_SDRAM_STATE_PRECHARGED)
 833              		.loc 1 624 0
 834 001a 052C     		cmp	r4, #5
 835 001c 11D0     		beq	.L76
 836 001e 0446     		mov	r4, r0
ARM GAS  /tmp/ccy6hGOI.s 			page 27


 837              	.LVL99:
 625:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 626:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 627:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 628:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 629:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Configure DMA user callbacks */
 630:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 838              		.loc 1 630 0
 839 0020 006B     		ldr	r0, [r0, #48]
 840              	.LVL100:
 841 0022 094D     		ldr	r5, .L78
 842 0024 C563     		str	r5, [r0, #60]
 631:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 843              		.loc 1 631 0
 844 0026 206B     		ldr	r0, [r4, #48]
 845 0028 084D     		ldr	r5, .L78+4
 846 002a C564     		str	r5, [r0, #76]
 632:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 633:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Enable the DMA Stream */
 634:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)BufferSize);
 847              		.loc 1 634 0
 848 002c 206B     		ldr	r0, [r4, #48]
 849 002e FFF7FEFF 		bl	HAL_DMA_Start_IT
 850              	.LVL101:
 635:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 636:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 637:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);  
 851              		.loc 1 637 0
 852 0032 0020     		movs	r0, #0
 853 0034 84F82D00 		strb	r0, [r4, #45]
 638:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 639:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK; 
 854              		.loc 1 639 0
 855 0038 38BD     		pop	{r3, r4, r5, pc}
 856              	.LVL102:
 857              	.L74:
 615:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 858              		.loc 1 615 0
 859 003a 0220     		movs	r0, #2
 860              	.LVL103:
 861 003c 38BD     		pop	{r3, r4, r5, pc}
 862              	.LVL104:
 863              	.L75:
 622:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 864              		.loc 1 622 0
 865 003e 0220     		movs	r0, #2
 866              	.LVL105:
 867 0040 38BD     		pop	{r3, r4, r5, pc}
 868              	.LVL106:
 869              	.L76:
 626:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 870              		.loc 1 626 0
 871 0042 0120     		movs	r0, #1
 872              	.LVL107:
 640:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 873              		.loc 1 640 0
 874 0044 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccy6hGOI.s 			page 28


 875              	.LVL108:
 876              	.L79:
 877 0046 00BF     		.align	2
 878              	.L78:
 879 0048 00000000 		.word	HAL_SDRAM_DMA_XferCpltCallback
 880 004c 00000000 		.word	HAL_SDRAM_DMA_XferErrorCallback
 881              		.cfi_endproc
 882              	.LFE133:
 884              		.section	.text.HAL_SDRAM_Write_DMA,"ax",%progbits
 885              		.align	1
 886              		.global	HAL_SDRAM_Write_DMA
 887              		.syntax unified
 888              		.thumb
 889              		.thumb_func
 890              		.fpu fpv4-sp-d16
 892              	HAL_SDRAM_Write_DMA:
 893              	.LFB134:
 641:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 642:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 643:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Writes a Words data buffer to SDRAM memory using DMA transfer.
 644:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 645:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 646:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pAddress Pointer to write start address
 647:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  pSrcBuffer Pointer to source buffer to write  
 648:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  BufferSize Size of the buffer to write to memory
 649:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 650:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 651:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_Write_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pS
 652:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 894              		.loc 1 652 0
 895              		.cfi_startproc
 896              		@ args = 0, pretend = 0, frame = 0
 897              		@ frame_needed = 0, uses_anonymous_args = 0
 898              	.LVL109:
 899 0000 38B5     		push	{r3, r4, r5, lr}
 900              	.LCFI23:
 901              		.cfi_def_cfa_offset 16
 902              		.cfi_offset 3, -16
 903              		.cfi_offset 4, -12
 904              		.cfi_offset 5, -8
 905              		.cfi_offset 14, -4
 906              	.LVL110:
 653:HALLIB/Src/stm32f4xx_hal_sdram.c ****   uint32_t tmp = 0U;
 654:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 655:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Locked */
 656:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 907              		.loc 1 656 0
 908 0002 90F82D40 		ldrb	r4, [r0, #45]	@ zero_extendqisi2
 909 0006 012C     		cmp	r4, #1
 910 0008 1BD0     		beq	.L82
 911              		.loc 1 656 0 is_stmt 0 discriminator 2
 912 000a 0124     		movs	r4, #1
 913 000c 80F82D40 		strb	r4, [r0, #45]
 657:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 658:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */  
 659:HALLIB/Src/stm32f4xx_hal_sdram.c ****   tmp = hsdram->State;
 914              		.loc 1 659 0 is_stmt 1 discriminator 2
ARM GAS  /tmp/ccy6hGOI.s 			page 29


 915 0010 90F82C40 		ldrb	r4, [r0, #44]	@ zero_extendqisi2
 916 0014 E4B2     		uxtb	r4, r4
 917              	.LVL111:
 660:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 661:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(tmp == HAL_SDRAM_STATE_BUSY)
 918              		.loc 1 661 0 discriminator 2
 919 0016 022C     		cmp	r4, #2
 920 0018 15D0     		beq	.L83
 662:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 663:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 664:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 665:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if((tmp == HAL_SDRAM_STATE_PRECHARGED) || (tmp == HAL_SDRAM_STATE_WRITE_PROTECTED))
 921              		.loc 1 665 0
 922 001a 043C     		subs	r4, r4, #4
 923              	.LVL112:
 924 001c 012C     		cmp	r4, #1
 925 001e 14D9     		bls	.L84
 926 0020 1446     		mov	r4, r2
 927              	.LVL113:
 928 0022 0A46     		mov	r2, r1
 929              	.LVL114:
 930 0024 0546     		mov	r5, r0
 666:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 667:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return  HAL_ERROR; 
 668:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 669:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 670:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Configure DMA user callbacks */
 671:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->hdma->XferCpltCallback  = HAL_SDRAM_DMA_XferCpltCallback;
 931              		.loc 1 671 0
 932 0026 016B     		ldr	r1, [r0, #48]
 933              	.LVL115:
 934 0028 0948     		ldr	r0, .L86
 935              	.LVL116:
 936 002a C863     		str	r0, [r1, #60]
 672:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->hdma->XferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 937              		.loc 1 672 0
 938 002c 296B     		ldr	r1, [r5, #48]
 939 002e 0948     		ldr	r0, .L86+4
 940 0030 C864     		str	r0, [r1, #76]
 673:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 674:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Enable the DMA Stream */
 675:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_DMA_Start_IT(hsdram->hdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)BufferSize);
 941              		.loc 1 675 0
 942 0032 2146     		mov	r1, r4
 943 0034 286B     		ldr	r0, [r5, #48]
 944 0036 FFF7FEFF 		bl	HAL_DMA_Start_IT
 945              	.LVL117:
 676:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 677:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process Unlocked */
 678:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 946              		.loc 1 678 0
 947 003a 0020     		movs	r0, #0
 948 003c 85F82D00 		strb	r0, [r5, #45]
 679:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 680:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;
 949              		.loc 1 680 0
 950 0040 38BD     		pop	{r3, r4, r5, pc}
ARM GAS  /tmp/ccy6hGOI.s 			page 30


 951              	.LVL118:
 952              	.L82:
 656:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 953              		.loc 1 656 0
 954 0042 0220     		movs	r0, #2
 955              	.LVL119:
 956 0044 38BD     		pop	{r3, r4, r5, pc}
 957              	.LVL120:
 958              	.L83:
 663:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 959              		.loc 1 663 0
 960 0046 0220     		movs	r0, #2
 961              	.LVL121:
 962 0048 38BD     		pop	{r3, r4, r5, pc}
 963              	.LVL122:
 964              	.L84:
 667:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }  
 965              		.loc 1 667 0
 966 004a 0120     		movs	r0, #1
 967              	.LVL123:
 681:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 968              		.loc 1 681 0
 969 004c 38BD     		pop	{r3, r4, r5, pc}
 970              	.LVL124:
 971              	.L87:
 972 004e 00BF     		.align	2
 973              	.L86:
 974 0050 00000000 		.word	HAL_SDRAM_DMA_XferCpltCallback
 975 0054 00000000 		.word	HAL_SDRAM_DMA_XferErrorCallback
 976              		.cfi_endproc
 977              	.LFE134:
 979              		.section	.text.HAL_SDRAM_WriteProtection_Enable,"ax",%progbits
 980              		.align	1
 981              		.global	HAL_SDRAM_WriteProtection_Enable
 982              		.syntax unified
 983              		.thumb
 984              		.thumb_func
 985              		.fpu fpv4-sp-d16
 987              	HAL_SDRAM_WriteProtection_Enable:
 988              	.LFB135:
 682:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 683:HALLIB/Src/stm32f4xx_hal_sdram.c **** #if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
 684:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 685:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Register a User SDRAM Callback
 686:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *         To be used instead of the weak (surcharged) predefined callback
 687:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param hsdram : SDRAM handle
 688:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param CallbackId : ID of the callback to be registered
 689:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *        This parameter can be one of the following values:
 690:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_MSP_INIT_CB_ID       SDRAM MspInit callback ID
 691:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_MSP_DEINIT_CB_ID     SDRAM MspDeInit callback ID
 692:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_REFRESH_ERR_CB_ID    SDRAM Refresh Error callback ID
 693:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param pCallback : pointer to the Callback function
 694:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval status
 695:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 696:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_RegisterCallback (SDRAM_HandleTypeDef *hsdram, HAL_SDRAM_CallbackIDType
 697:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 698:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_StatusTypeDef status = HAL_OK;
ARM GAS  /tmp/ccy6hGOI.s 			page 31


 699:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_SDRAM_StateTypeDef state;
 700:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 701:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(pCallback == NULL)
 702:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 703:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_ERROR;
 704:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 705:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 706:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process locked */
 707:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 708:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 709:HALLIB/Src/stm32f4xx_hal_sdram.c ****   state = hsdram->State;
 710:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 711:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 712:HALLIB/Src/stm32f4xx_hal_sdram.c ****     switch (CallbackId)
 713:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 714:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_INIT_CB_ID :
 715:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspInitCallback = pCallback;
 716:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 717:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_DEINIT_CB_ID :
 718:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspDeInitCallback = pCallback;
 719:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 720:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_REFRESH_ERR_CB_ID :
 721:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->RefreshErrorCallback = pCallback;
 722:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 723:HALLIB/Src/stm32f4xx_hal_sdram.c ****     default :
 724:HALLIB/Src/stm32f4xx_hal_sdram.c ****       /* update return status */
 725:HALLIB/Src/stm32f4xx_hal_sdram.c ****       status =  HAL_ERROR;
 726:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 727:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
 728:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 729:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_RESET)
 730:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 731:HALLIB/Src/stm32f4xx_hal_sdram.c ****     switch (CallbackId)
 732:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 733:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_INIT_CB_ID :
 734:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspInitCallback = pCallback;
 735:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 736:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_DEINIT_CB_ID :
 737:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspDeInitCallback = pCallback;
 738:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 739:HALLIB/Src/stm32f4xx_hal_sdram.c ****     default :
 740:HALLIB/Src/stm32f4xx_hal_sdram.c ****       /* update return status */
 741:HALLIB/Src/stm32f4xx_hal_sdram.c ****       status =  HAL_ERROR;
 742:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 743:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
 744:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 745:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else
 746:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 747:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* update return status */
 748:HALLIB/Src/stm32f4xx_hal_sdram.c ****     status =  HAL_ERROR;
 749:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 750:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 751:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Release Lock */
 752:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 753:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return status;
 754:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 755:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
ARM GAS  /tmp/ccy6hGOI.s 			page 32


 756:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 757:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Unregister a User SDRAM Callback
 758:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *         SDRAM Callback is redirected to the weak (surcharged) predefined callback
 759:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param hsdram : SDRAM handle
 760:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param CallbackId : ID of the callback to be unregistered
 761:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *        This parameter can be one of the following values:
 762:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_MSP_INIT_CB_ID       SDRAM MspInit callback ID
 763:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_MSP_DEINIT_CB_ID     SDRAM MspDeInit callback ID
 764:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_REFRESH_ERR_CB_ID    SDRAM Refresh Error callback ID
 765:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_DMA_XFER_CPLT_CB_ID  SDRAM DMA Xfer Complete callback ID
 766:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_DMA_XFER_ERR_CB_ID   SDRAM DMA Xfer Error callback ID
 767:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval status
 768:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 769:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_UnRegisterCallback (SDRAM_HandleTypeDef *hsdram, HAL_SDRAM_CallbackIDTy
 770:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 771:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_StatusTypeDef status = HAL_OK;
 772:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_SDRAM_StateTypeDef state;
 773:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 774:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process locked */
 775:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 776:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 777:HALLIB/Src/stm32f4xx_hal_sdram.c ****   state = hsdram->State;
 778:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 779:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 780:HALLIB/Src/stm32f4xx_hal_sdram.c ****     switch (CallbackId)
 781:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 782:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_INIT_CB_ID :
 783:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 784:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 785:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_DEINIT_CB_ID :
 786:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspDeInitCallback = HAL_SDRAM_MspDeInit;
 787:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 788:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_REFRESH_ERR_CB_ID :
 789:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->RefreshErrorCallback = HAL_SDRAM_RefreshErrorCallback;
 790:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 791:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_DMA_XFER_CPLT_CB_ID :
 792:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->DmaXferCpltCallback = HAL_SDRAM_DMA_XferCpltCallback;
 793:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 794:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_DMA_XFER_ERR_CB_ID :
 795:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->DmaXferErrorCallback = HAL_SDRAM_DMA_XferErrorCallback;
 796:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 797:HALLIB/Src/stm32f4xx_hal_sdram.c ****     default :
 798:HALLIB/Src/stm32f4xx_hal_sdram.c ****       /* update return status */
 799:HALLIB/Src/stm32f4xx_hal_sdram.c ****       status =  HAL_ERROR;
 800:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 801:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
 802:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 803:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else if(hsdram->State == HAL_SDRAM_STATE_RESET)
 804:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 805:HALLIB/Src/stm32f4xx_hal_sdram.c ****     switch (CallbackId)
 806:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 807:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_INIT_CB_ID :
 808:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspInitCallback = HAL_SDRAM_MspInit;
 809:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 810:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_MSP_DEINIT_CB_ID :
 811:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->MspDeInitCallback = HAL_SDRAM_MspDeInit;
 812:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
ARM GAS  /tmp/ccy6hGOI.s 			page 33


 813:HALLIB/Src/stm32f4xx_hal_sdram.c ****     default :
 814:HALLIB/Src/stm32f4xx_hal_sdram.c ****       /* update return status */
 815:HALLIB/Src/stm32f4xx_hal_sdram.c ****       status =  HAL_ERROR;
 816:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 817:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
 818:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 819:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else
 820:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 821:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* update return status */
 822:HALLIB/Src/stm32f4xx_hal_sdram.c ****     status =  HAL_ERROR;
 823:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 824:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 825:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Release Lock */
 826:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 827:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return status;
 828:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 829:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 830:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 831:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Register a User SDRAM Callback for DMA transfers
 832:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *         To be used instead of the weak (surcharged) predefined callback
 833:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param hsdram : SDRAM handle
 834:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param CallbackId : ID of the callback to be registered
 835:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *        This parameter can be one of the following values:
 836:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_DMA_XFER_CPLT_CB_ID  SDRAM DMA Xfer Complete callback ID
 837:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *          @arg @ref HAL_SDRAM_DMA_XFER_ERR_CB_ID   SDRAM DMA Xfer Error callback ID
 838:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param pCallback : pointer to the Callback function
 839:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval status
 840:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 841:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_RegisterDmaCallback(SDRAM_HandleTypeDef *hsdram, HAL_SDRAM_CallbackIDTy
 842:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 843:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_StatusTypeDef status = HAL_OK;
 844:HALLIB/Src/stm32f4xx_hal_sdram.c ****   HAL_SDRAM_StateTypeDef state;
 845:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 846:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(pCallback == NULL)
 847:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 848:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_ERROR;
 849:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 850:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 851:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Process locked */
 852:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_LOCK(hsdram);
 853:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 854:HALLIB/Src/stm32f4xx_hal_sdram.c ****   state = hsdram->State;
 855:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 856:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 857:HALLIB/Src/stm32f4xx_hal_sdram.c ****     switch (CallbackId)
 858:HALLIB/Src/stm32f4xx_hal_sdram.c ****     {
 859:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_DMA_XFER_CPLT_CB_ID :
 860:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->DmaXferCpltCallback = pCallback;
 861:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 862:HALLIB/Src/stm32f4xx_hal_sdram.c ****     case HAL_SDRAM_DMA_XFER_ERR_CB_ID :
 863:HALLIB/Src/stm32f4xx_hal_sdram.c ****       hsdram->DmaXferErrorCallback = pCallback;
 864:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 865:HALLIB/Src/stm32f4xx_hal_sdram.c ****     default :
 866:HALLIB/Src/stm32f4xx_hal_sdram.c ****       /* update return status */
 867:HALLIB/Src/stm32f4xx_hal_sdram.c ****       status =  HAL_ERROR;
 868:HALLIB/Src/stm32f4xx_hal_sdram.c ****       break;
 869:HALLIB/Src/stm32f4xx_hal_sdram.c ****     }
ARM GAS  /tmp/ccy6hGOI.s 			page 34


 870:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 871:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else
 872:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 873:HALLIB/Src/stm32f4xx_hal_sdram.c ****     /* update return status */
 874:HALLIB/Src/stm32f4xx_hal_sdram.c ****     status =  HAL_ERROR;
 875:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 876:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 877:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Release Lock */
 878:HALLIB/Src/stm32f4xx_hal_sdram.c ****   __HAL_UNLOCK(hsdram);
 879:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return status;
 880:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 881:HALLIB/Src/stm32f4xx_hal_sdram.c **** #endif
 882:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 883:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 884:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @}
 885:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 886:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 887:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group3 Control functions 
 888:HALLIB/Src/stm32f4xx_hal_sdram.c ****  *  @brief   management functions 
 889:HALLIB/Src/stm32f4xx_hal_sdram.c ****  *
 890:HALLIB/Src/stm32f4xx_hal_sdram.c **** @verbatim   
 891:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
 892:HALLIB/Src/stm32f4xx_hal_sdram.c ****                          ##### SDRAM Control functions #####
 893:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================  
 894:HALLIB/Src/stm32f4xx_hal_sdram.c ****   [..]
 895:HALLIB/Src/stm32f4xx_hal_sdram.c ****     This subsection provides a set of functions allowing to control dynamically
 896:HALLIB/Src/stm32f4xx_hal_sdram.c ****     the SDRAM interface.
 897:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 898:HALLIB/Src/stm32f4xx_hal_sdram.c **** @endverbatim
 899:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
 900:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 901:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 902:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 903:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Enables dynamically SDRAM write protection.
 904:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 905:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 906:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 907:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 908:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Enable(SDRAM_HandleTypeDef *hsdram)
 909:HALLIB/Src/stm32f4xx_hal_sdram.c **** { 
 989              		.loc 1 909 0
 990              		.cfi_startproc
 991              		@ args = 0, pretend = 0, frame = 0
 992              		@ frame_needed = 0, uses_anonymous_args = 0
 993              	.LVL125:
 910:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */ 
 911:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 994              		.loc 1 911 0
 995 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 996 0004 DBB2     		uxtb	r3, r3
 997 0006 022B     		cmp	r3, #2
 998 0008 01D1     		bne	.L95
 912:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 913:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 999              		.loc 1 913 0
 1000 000a 0220     		movs	r0, #2
 1001              	.LVL126:
ARM GAS  /tmp/ccy6hGOI.s 			page 35


 1002 000c 7047     		bx	lr
 1003              	.LVL127:
 1004              	.L95:
 909:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */ 
 1005              		.loc 1 909 0
 1006 000e 10B5     		push	{r4, lr}
 1007              	.LCFI24:
 1008              		.cfi_def_cfa_offset 8
 1009              		.cfi_offset 4, -8
 1010              		.cfi_offset 14, -4
 1011 0010 0446     		mov	r4, r0
 914:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 915:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 916:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
 917:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1012              		.loc 1 917 0
 1013 0012 0223     		movs	r3, #2
 1014 0014 80F82C30 		strb	r3, [r0, #44]
 918:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 919:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Enable write protection */
 920:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_WriteProtection_Enable(hsdram->Instance, hsdram->Init.SDBank);
 1015              		.loc 1 920 0
 1016 0018 4168     		ldr	r1, [r0, #4]
 1017 001a 0068     		ldr	r0, [r0]
 1018              	.LVL128:
 1019 001c FFF7FEFF 		bl	FMC_SDRAM_WriteProtection_Enable
 1020              	.LVL129:
 921:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 922:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
 923:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 1021              		.loc 1 923 0
 1022 0020 0423     		movs	r3, #4
 1023 0022 84F82C30 		strb	r3, [r4, #44]
 924:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 925:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;  
 1024              		.loc 1 925 0
 1025 0026 0020     		movs	r0, #0
 1026 0028 10BD     		pop	{r4, pc}
 1027              		.cfi_endproc
 1028              	.LFE135:
 1030              		.section	.text.HAL_SDRAM_WriteProtection_Disable,"ax",%progbits
 1031              		.align	1
 1032              		.global	HAL_SDRAM_WriteProtection_Disable
 1033              		.syntax unified
 1034              		.thumb
 1035              		.thumb_func
 1036              		.fpu fpv4-sp-d16
 1038              	HAL_SDRAM_WriteProtection_Disable:
 1039              	.LFB136:
 926:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 927:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 928:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 929:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Disables dynamically SDRAM write protection.
 930:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 931:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 932:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 933:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
ARM GAS  /tmp/ccy6hGOI.s 			page 36


 934:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_WriteProtection_Disable(SDRAM_HandleTypeDef *hsdram)
 935:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1040              		.loc 1 935 0
 1041              		.cfi_startproc
 1042              		@ args = 0, pretend = 0, frame = 0
 1043              		@ frame_needed = 0, uses_anonymous_args = 0
 1044              	.LVL130:
 936:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 937:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1045              		.loc 1 937 0
 1046 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1047 0004 DBB2     		uxtb	r3, r3
 1048 0006 022B     		cmp	r3, #2
 1049 0008 01D1     		bne	.L103
 938:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 939:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 1050              		.loc 1 939 0
 1051 000a 0220     		movs	r0, #2
 1052              	.LVL131:
 1053 000c 7047     		bx	lr
 1054              	.LVL132:
 1055              	.L103:
 935:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1056              		.loc 1 935 0
 1057 000e 10B5     		push	{r4, lr}
 1058              	.LCFI25:
 1059              		.cfi_def_cfa_offset 8
 1060              		.cfi_offset 4, -8
 1061              		.cfi_offset 14, -4
 1062 0010 0446     		mov	r4, r0
 940:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 941:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 942:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
 943:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1063              		.loc 1 943 0
 1064 0012 0223     		movs	r3, #2
 1065 0014 80F82C30 		strb	r3, [r0, #44]
 944:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 945:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Disable write protection */
 946:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_WriteProtection_Disable(hsdram->Instance, hsdram->Init.SDBank);
 1066              		.loc 1 946 0
 1067 0018 4168     		ldr	r1, [r0, #4]
 1068 001a 0068     		ldr	r0, [r0]
 1069              	.LVL133:
 1070 001c FFF7FEFF 		bl	FMC_SDRAM_WriteProtection_Disable
 1071              	.LVL134:
 947:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 948:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
 949:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1072              		.loc 1 949 0
 1073 0020 0123     		movs	r3, #1
 1074 0022 84F82C30 		strb	r3, [r4, #44]
 950:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 951:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;
 1075              		.loc 1 951 0
 1076 0026 0020     		movs	r0, #0
 1077 0028 10BD     		pop	{r4, pc}
ARM GAS  /tmp/ccy6hGOI.s 			page 37


 1078              		.cfi_endproc
 1079              	.LFE136:
 1081              		.section	.text.HAL_SDRAM_SendCommand,"ax",%progbits
 1082              		.align	1
 1083              		.global	HAL_SDRAM_SendCommand
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	HAL_SDRAM_SendCommand:
 1090              	.LFB137:
 952:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 953:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 954:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 955:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Sends Command to the SDRAM bank.
 956:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 957:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
 958:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  Command SDRAM command structure
 959:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  Timeout Timeout duration
 960:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 961:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */  
 962:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Comm
 963:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1091              		.loc 1 963 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095              	.LVL135:
 1096 0000 38B5     		push	{r3, r4, r5, lr}
 1097              	.LCFI26:
 1098              		.cfi_def_cfa_offset 16
 1099              		.cfi_offset 3, -16
 1100              		.cfi_offset 4, -12
 1101              		.cfi_offset 5, -8
 1102              		.cfi_offset 14, -4
 964:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 965:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1103              		.loc 1 965 0
 1104 0002 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1105 0006 DBB2     		uxtb	r3, r3
 1106 0008 022B     		cmp	r3, #2
 1107 000a 01D1     		bne	.L109
 966:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 967:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 1108              		.loc 1 967 0
 1109 000c 0220     		movs	r0, #2
 1110              	.LVL136:
 968:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 969:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 970:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
 971:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 972:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 973:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Send SDRAM command */
 974:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 975:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 976:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM controller state */
 977:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
ARM GAS  /tmp/ccy6hGOI.s 			page 38


 978:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 979:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 980:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 981:HALLIB/Src/stm32f4xx_hal_sdram.c ****   else
 982:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 983:HALLIB/Src/stm32f4xx_hal_sdram.c ****     hsdram->State = HAL_SDRAM_STATE_READY;
 984:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 985:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 986:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;  
 987:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 1111              		.loc 1 987 0
 1112 000e 38BD     		pop	{r3, r4, r5, pc}
 1113              	.LVL137:
 1114              	.L109:
 1115 0010 0D46     		mov	r5, r1
 1116 0012 0446     		mov	r4, r0
 971:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 1117              		.loc 1 971 0
 1118 0014 0223     		movs	r3, #2
 1119 0016 80F82C30 		strb	r3, [r0, #44]
 974:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
 1120              		.loc 1 974 0
 1121 001a 0068     		ldr	r0, [r0]
 1122              	.LVL138:
 1123 001c FFF7FEFF 		bl	FMC_SDRAM_SendCommand
 1124              	.LVL139:
 977:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
 1125              		.loc 1 977 0
 1126 0020 2B68     		ldr	r3, [r5]
 1127 0022 022B     		cmp	r3, #2
 1128 0024 04D0     		beq	.L110
 983:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 1129              		.loc 1 983 0
 1130 0026 0123     		movs	r3, #1
 1131 0028 84F82C30 		strb	r3, [r4, #44]
 986:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 1132              		.loc 1 986 0
 1133 002c 0020     		movs	r0, #0
 1134 002e 38BD     		pop	{r3, r4, r5, pc}
 1135              	.LVL140:
 1136              	.L110:
 979:HALLIB/Src/stm32f4xx_hal_sdram.c ****   }
 1137              		.loc 1 979 0
 1138 0030 0523     		movs	r3, #5
 1139 0032 84F82C30 		strb	r3, [r4, #44]
 986:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 1140              		.loc 1 986 0
 1141 0036 0020     		movs	r0, #0
 1142 0038 38BD     		pop	{r3, r4, r5, pc}
 1143              		.cfi_endproc
 1144              	.LFE137:
 1146              		.section	.text.HAL_SDRAM_ProgramRefreshRate,"ax",%progbits
 1147              		.align	1
 1148              		.global	HAL_SDRAM_ProgramRefreshRate
 1149              		.syntax unified
 1150              		.thumb
 1151              		.thumb_func
ARM GAS  /tmp/ccy6hGOI.s 			page 39


 1152              		.fpu fpv4-sp-d16
 1154              	HAL_SDRAM_ProgramRefreshRate:
 1155              	.LFB138:
 988:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
 989:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
 990:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Programs the SDRAM Memory Refresh rate.
 991:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
 992:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.  
 993:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  RefreshRate The SDRAM refresh rate value       
 994:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
 995:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
 996:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
 997:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1156              		.loc 1 997 0
 1157              		.cfi_startproc
 1158              		@ args = 0, pretend = 0, frame = 0
 1159              		@ frame_needed = 0, uses_anonymous_args = 0
 1160              	.LVL141:
 998:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 999:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1161              		.loc 1 999 0
 1162 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1163 0004 DBB2     		uxtb	r3, r3
 1164 0006 022B     		cmp	r3, #2
 1165 0008 01D1     		bne	.L118
1000:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
1001:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 1166              		.loc 1 1001 0
 1167 000a 0220     		movs	r0, #2
 1168              	.LVL142:
 1169 000c 7047     		bx	lr
 1170              	.LVL143:
 1171              	.L118:
 997:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1172              		.loc 1 997 0
 1173 000e 10B5     		push	{r4, lr}
 1174              	.LCFI27:
 1175              		.cfi_def_cfa_offset 8
 1176              		.cfi_offset 4, -8
 1177              		.cfi_offset 14, -4
 1178 0010 0446     		mov	r4, r0
1002:HALLIB/Src/stm32f4xx_hal_sdram.c ****   } 
1003:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1004:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
1005:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1179              		.loc 1 1005 0
 1180 0012 0223     		movs	r3, #2
 1181 0014 80F82C30 		strb	r3, [r0, #44]
1006:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1007:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Program the refresh rate */
1008:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 1182              		.loc 1 1008 0
 1183 0018 0068     		ldr	r0, [r0]
 1184              	.LVL144:
 1185 001a FFF7FEFF 		bl	FMC_SDRAM_ProgramRefreshRate
 1186              	.LVL145:
1009:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
ARM GAS  /tmp/ccy6hGOI.s 			page 40


1010:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
1011:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1187              		.loc 1 1011 0
 1188 001e 0123     		movs	r3, #1
 1189 0020 84F82C30 		strb	r3, [r4, #44]
1012:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1013:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;   
 1190              		.loc 1 1013 0
 1191 0024 0020     		movs	r0, #0
 1192 0026 10BD     		pop	{r4, pc}
 1193              		.cfi_endproc
 1194              	.LFE138:
 1196              		.section	.text.HAL_SDRAM_SetAutoRefreshNumber,"ax",%progbits
 1197              		.align	1
 1198              		.global	HAL_SDRAM_SetAutoRefreshNumber
 1199              		.syntax unified
 1200              		.thumb
 1201              		.thumb_func
 1202              		.fpu fpv4-sp-d16
 1204              	HAL_SDRAM_SetAutoRefreshNumber:
 1205              	.LFB139:
1014:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
1015:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
1016:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
1017:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Sets the Number of consecutive SDRAM Memory auto Refresh commands.
1018:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
1019:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.  
1020:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  AutoRefreshNumber The SDRAM auto Refresh number       
1021:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL status
1022:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
1023:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_StatusTypeDef HAL_SDRAM_SetAutoRefreshNumber(SDRAM_HandleTypeDef *hsdram, uint32_t AutoRefreshN
1024:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1206              		.loc 1 1024 0
 1207              		.cfi_startproc
 1208              		@ args = 0, pretend = 0, frame = 0
 1209              		@ frame_needed = 0, uses_anonymous_args = 0
 1210              	.LVL146:
1025:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
1026:HALLIB/Src/stm32f4xx_hal_sdram.c ****   if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 1211              		.loc 1 1026 0
 1212 0000 90F82C30 		ldrb	r3, [r0, #44]	@ zero_extendqisi2
 1213 0004 DBB2     		uxtb	r3, r3
 1214 0006 022B     		cmp	r3, #2
 1215 0008 01D1     		bne	.L126
1027:HALLIB/Src/stm32f4xx_hal_sdram.c ****   {
1028:HALLIB/Src/stm32f4xx_hal_sdram.c ****     return HAL_BUSY;
 1216              		.loc 1 1028 0
 1217 000a 0220     		movs	r0, #2
 1218              	.LVL147:
 1219 000c 7047     		bx	lr
 1220              	.LVL148:
 1221              	.L126:
1024:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Check the SDRAM controller state */
 1222              		.loc 1 1024 0
 1223 000e 10B5     		push	{r4, lr}
 1224              	.LCFI28:
 1225              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccy6hGOI.s 			page 41


 1226              		.cfi_offset 4, -8
 1227              		.cfi_offset 14, -4
 1228 0010 0446     		mov	r4, r0
1029:HALLIB/Src/stm32f4xx_hal_sdram.c ****   } 
1030:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1031:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
1032:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_BUSY;
 1229              		.loc 1 1032 0
 1230 0012 0223     		movs	r3, #2
 1231 0014 80F82C30 		strb	r3, [r0, #44]
1033:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1034:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Set the Auto-Refresh number */
1035:HALLIB/Src/stm32f4xx_hal_sdram.c ****   FMC_SDRAM_SetAutoRefreshNumber(hsdram->Instance ,AutoRefreshNumber);
 1232              		.loc 1 1035 0
 1233 0018 0068     		ldr	r0, [r0]
 1234              	.LVL149:
 1235 001a FFF7FEFF 		bl	FMC_SDRAM_SetAutoRefreshNumber
 1236              	.LVL150:
1036:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1037:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Update the SDRAM state */
1038:HALLIB/Src/stm32f4xx_hal_sdram.c ****   hsdram->State = HAL_SDRAM_STATE_READY;
 1237              		.loc 1 1038 0
 1238 001e 0123     		movs	r3, #1
 1239 0020 84F82C30 		strb	r3, [r4, #44]
1039:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1040:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return HAL_OK;
 1240              		.loc 1 1040 0
 1241 0024 0020     		movs	r0, #0
 1242 0026 10BD     		pop	{r4, pc}
 1243              		.cfi_endproc
 1244              	.LFE139:
 1246              		.section	.text.HAL_SDRAM_GetModeStatus,"ax",%progbits
 1247              		.align	1
 1248              		.global	HAL_SDRAM_GetModeStatus
 1249              		.syntax unified
 1250              		.thumb
 1251              		.thumb_func
 1252              		.fpu fpv4-sp-d16
 1254              	HAL_SDRAM_GetModeStatus:
 1255              	.LFB140:
1041:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
1042:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
1043:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
1044:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Returns the SDRAM memory current mode.
1045:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
1046:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
1047:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval The SDRAM memory mode.        
1048:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
1049:HALLIB/Src/stm32f4xx_hal_sdram.c **** uint32_t HAL_SDRAM_GetModeStatus(SDRAM_HandleTypeDef *hsdram)
1050:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1256              		.loc 1 1050 0
 1257              		.cfi_startproc
 1258              		@ args = 0, pretend = 0, frame = 0
 1259              		@ frame_needed = 0, uses_anonymous_args = 0
 1260              	.LVL151:
 1261 0000 08B5     		push	{r3, lr}
 1262              	.LCFI29:
ARM GAS  /tmp/ccy6hGOI.s 			page 42


 1263              		.cfi_def_cfa_offset 8
 1264              		.cfi_offset 3, -8
 1265              		.cfi_offset 14, -4
1051:HALLIB/Src/stm32f4xx_hal_sdram.c ****   /* Return the SDRAM memory current mode */
1052:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return(FMC_SDRAM_GetModeStatus(hsdram->Instance, hsdram->Init.SDBank));
 1266              		.loc 1 1052 0
 1267 0002 4168     		ldr	r1, [r0, #4]
 1268 0004 0068     		ldr	r0, [r0]
 1269              	.LVL152:
 1270 0006 FFF7FEFF 		bl	FMC_SDRAM_GetModeStatus
 1271              	.LVL153:
1053:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 1272              		.loc 1 1053 0
 1273 000a 08BD     		pop	{r3, pc}
 1274              		.cfi_endproc
 1275              	.LFE140:
 1277              		.section	.text.HAL_SDRAM_GetState,"ax",%progbits
 1278              		.align	1
 1279              		.global	HAL_SDRAM_GetState
 1280              		.syntax unified
 1281              		.thumb
 1282              		.thumb_func
 1283              		.fpu fpv4-sp-d16
 1285              	HAL_SDRAM_GetState:
 1286              	.LFB141:
1054:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
1055:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
1056:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @}
1057:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
1058:HALLIB/Src/stm32f4xx_hal_sdram.c ****   
1059:HALLIB/Src/stm32f4xx_hal_sdram.c **** /** @defgroup SDRAM_Exported_Functions_Group4 State functions 
1060:HALLIB/Src/stm32f4xx_hal_sdram.c ****  *  @brief   Peripheral State functions 
1061:HALLIB/Src/stm32f4xx_hal_sdram.c ****  *
1062:HALLIB/Src/stm32f4xx_hal_sdram.c **** @verbatim   
1063:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================
1064:HALLIB/Src/stm32f4xx_hal_sdram.c ****                       ##### SDRAM State functions #####
1065:HALLIB/Src/stm32f4xx_hal_sdram.c ****   ==============================================================================  
1066:HALLIB/Src/stm32f4xx_hal_sdram.c ****   [..]
1067:HALLIB/Src/stm32f4xx_hal_sdram.c ****     This subsection permits to get in run-time the status of the SDRAM controller 
1068:HALLIB/Src/stm32f4xx_hal_sdram.c ****     and the data flow.
1069:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
1070:HALLIB/Src/stm32f4xx_hal_sdram.c **** @endverbatim
1071:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @{
1072:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
1073:HALLIB/Src/stm32f4xx_hal_sdram.c **** 
1074:HALLIB/Src/stm32f4xx_hal_sdram.c **** /**
1075:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @brief  Returns the SDRAM state.
1076:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
1077:HALLIB/Src/stm32f4xx_hal_sdram.c ****   *                the configuration information for SDRAM module.
1078:HALLIB/Src/stm32f4xx_hal_sdram.c ****   * @retval HAL state
1079:HALLIB/Src/stm32f4xx_hal_sdram.c ****   */
1080:HALLIB/Src/stm32f4xx_hal_sdram.c **** HAL_SDRAM_StateTypeDef HAL_SDRAM_GetState(SDRAM_HandleTypeDef *hsdram)
1081:HALLIB/Src/stm32f4xx_hal_sdram.c **** {
 1287              		.loc 1 1081 0
 1288              		.cfi_startproc
 1289              		@ args = 0, pretend = 0, frame = 0
 1290              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccy6hGOI.s 			page 43


 1291              		@ link register save eliminated.
 1292              	.LVL154:
1082:HALLIB/Src/stm32f4xx_hal_sdram.c ****   return hsdram->State;
 1293              		.loc 1 1082 0
 1294 0000 90F82C00 		ldrb	r0, [r0, #44]	@ zero_extendqisi2
 1295              	.LVL155:
1083:HALLIB/Src/stm32f4xx_hal_sdram.c **** }
 1296              		.loc 1 1083 0
 1297 0004 7047     		bx	lr
 1298              		.cfi_endproc
 1299              	.LFE141:
 1301              		.text
 1302              	.Letext0:
 1303              		.file 2 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/machine/_default_types.h"
 1304              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_stdint.h"
 1305              		.file 4 "CORE/core_cm4.h"
 1306              		.file 5 "USER/system_stm32f4xx.h"
 1307              		.file 6 "USER/stm32f429xx.h"
 1308              		.file 7 "HALLIB/Inc/stm32f4xx_hal_def.h"
 1309              		.file 8 "HALLIB/Inc/stm32f4xx_hal_dma.h"
 1310              		.file 9 "HALLIB/Inc/stm32f4xx_ll_fmc.h"
 1311              		.file 10 "HALLIB/Inc/stm32f4xx_hal_sdram.h"
 1312              		.file 11 "HALLIB/Inc/stm32f4xx_hal.h"
ARM GAS  /tmp/ccy6hGOI.s 			page 44


DEFINED SYMBOLS
                            *ABS*:0000000000000000 stm32f4xx_hal_sdram.c
     /tmp/ccy6hGOI.s:18     .text.HAL_SDRAM_DMA_XferCpltCallback:0000000000000000 $t
     /tmp/ccy6hGOI.s:25     .text.HAL_SDRAM_DMA_XferCpltCallback:0000000000000000 HAL_SDRAM_DMA_XferCpltCallback
     /tmp/ccy6hGOI.s:39     .text.HAL_SDRAM_DMA_XferErrorCallback:0000000000000000 $t
     /tmp/ccy6hGOI.s:46     .text.HAL_SDRAM_DMA_XferErrorCallback:0000000000000000 HAL_SDRAM_DMA_XferErrorCallback
     /tmp/ccy6hGOI.s:59     .text.HAL_SDRAM_MspInit:0000000000000000 $t
     /tmp/ccy6hGOI.s:66     .text.HAL_SDRAM_MspInit:0000000000000000 HAL_SDRAM_MspInit
     /tmp/ccy6hGOI.s:79     .text.HAL_SDRAM_Init:0000000000000000 $t
     /tmp/ccy6hGOI.s:86     .text.HAL_SDRAM_Init:0000000000000000 HAL_SDRAM_Init
     /tmp/ccy6hGOI.s:154    .text.HAL_SDRAM_MspDeInit:0000000000000000 $t
     /tmp/ccy6hGOI.s:161    .text.HAL_SDRAM_MspDeInit:0000000000000000 HAL_SDRAM_MspDeInit
     /tmp/ccy6hGOI.s:174    .text.HAL_SDRAM_DeInit:0000000000000000 $t
     /tmp/ccy6hGOI.s:181    .text.HAL_SDRAM_DeInit:0000000000000000 HAL_SDRAM_DeInit
     /tmp/ccy6hGOI.s:214    .text.HAL_SDRAM_RefreshErrorCallback:0000000000000000 $t
     /tmp/ccy6hGOI.s:221    .text.HAL_SDRAM_RefreshErrorCallback:0000000000000000 HAL_SDRAM_RefreshErrorCallback
     /tmp/ccy6hGOI.s:234    .text.HAL_SDRAM_IRQHandler:0000000000000000 $t
     /tmp/ccy6hGOI.s:241    .text.HAL_SDRAM_IRQHandler:0000000000000000 HAL_SDRAM_IRQHandler
     /tmp/ccy6hGOI.s:275    .text.HAL_SDRAM_Read_8b:0000000000000000 $t
     /tmp/ccy6hGOI.s:282    .text.HAL_SDRAM_Read_8b:0000000000000000 HAL_SDRAM_Read_8b
     /tmp/ccy6hGOI.s:361    .text.HAL_SDRAM_Write_8b:0000000000000000 $t
     /tmp/ccy6hGOI.s:368    .text.HAL_SDRAM_Write_8b:0000000000000000 HAL_SDRAM_Write_8b
     /tmp/ccy6hGOI.s:449    .text.HAL_SDRAM_Read_16b:0000000000000000 $t
     /tmp/ccy6hGOI.s:456    .text.HAL_SDRAM_Read_16b:0000000000000000 HAL_SDRAM_Read_16b
     /tmp/ccy6hGOI.s:535    .text.HAL_SDRAM_Write_16b:0000000000000000 $t
     /tmp/ccy6hGOI.s:542    .text.HAL_SDRAM_Write_16b:0000000000000000 HAL_SDRAM_Write_16b
     /tmp/ccy6hGOI.s:623    .text.HAL_SDRAM_Read_32b:0000000000000000 $t
     /tmp/ccy6hGOI.s:630    .text.HAL_SDRAM_Read_32b:0000000000000000 HAL_SDRAM_Read_32b
     /tmp/ccy6hGOI.s:709    .text.HAL_SDRAM_Write_32b:0000000000000000 $t
     /tmp/ccy6hGOI.s:716    .text.HAL_SDRAM_Write_32b:0000000000000000 HAL_SDRAM_Write_32b
     /tmp/ccy6hGOI.s:797    .text.HAL_SDRAM_Read_DMA:0000000000000000 $t
     /tmp/ccy6hGOI.s:804    .text.HAL_SDRAM_Read_DMA:0000000000000000 HAL_SDRAM_Read_DMA
     /tmp/ccy6hGOI.s:879    .text.HAL_SDRAM_Read_DMA:0000000000000048 $d
     /tmp/ccy6hGOI.s:885    .text.HAL_SDRAM_Write_DMA:0000000000000000 $t
     /tmp/ccy6hGOI.s:892    .text.HAL_SDRAM_Write_DMA:0000000000000000 HAL_SDRAM_Write_DMA
     /tmp/ccy6hGOI.s:974    .text.HAL_SDRAM_Write_DMA:0000000000000050 $d
     /tmp/ccy6hGOI.s:980    .text.HAL_SDRAM_WriteProtection_Enable:0000000000000000 $t
     /tmp/ccy6hGOI.s:987    .text.HAL_SDRAM_WriteProtection_Enable:0000000000000000 HAL_SDRAM_WriteProtection_Enable
     /tmp/ccy6hGOI.s:1031   .text.HAL_SDRAM_WriteProtection_Disable:0000000000000000 $t
     /tmp/ccy6hGOI.s:1038   .text.HAL_SDRAM_WriteProtection_Disable:0000000000000000 HAL_SDRAM_WriteProtection_Disable
     /tmp/ccy6hGOI.s:1082   .text.HAL_SDRAM_SendCommand:0000000000000000 $t
     /tmp/ccy6hGOI.s:1089   .text.HAL_SDRAM_SendCommand:0000000000000000 HAL_SDRAM_SendCommand
     /tmp/ccy6hGOI.s:1147   .text.HAL_SDRAM_ProgramRefreshRate:0000000000000000 $t
     /tmp/ccy6hGOI.s:1154   .text.HAL_SDRAM_ProgramRefreshRate:0000000000000000 HAL_SDRAM_ProgramRefreshRate
     /tmp/ccy6hGOI.s:1197   .text.HAL_SDRAM_SetAutoRefreshNumber:0000000000000000 $t
     /tmp/ccy6hGOI.s:1204   .text.HAL_SDRAM_SetAutoRefreshNumber:0000000000000000 HAL_SDRAM_SetAutoRefreshNumber
     /tmp/ccy6hGOI.s:1247   .text.HAL_SDRAM_GetModeStatus:0000000000000000 $t
     /tmp/ccy6hGOI.s:1254   .text.HAL_SDRAM_GetModeStatus:0000000000000000 HAL_SDRAM_GetModeStatus
     /tmp/ccy6hGOI.s:1278   .text.HAL_SDRAM_GetState:0000000000000000 $t
     /tmp/ccy6hGOI.s:1285   .text.HAL_SDRAM_GetState:0000000000000000 HAL_SDRAM_GetState
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
FMC_SDRAM_Init
FMC_SDRAM_Timing_Init
FMC_SDRAM_DeInit
HAL_DMA_Start_IT
ARM GAS  /tmp/ccy6hGOI.s 			page 45


FMC_SDRAM_WriteProtection_Enable
FMC_SDRAM_WriteProtection_Disable
FMC_SDRAM_SendCommand
FMC_SDRAM_ProgramRefreshRate
FMC_SDRAM_SetAutoRefreshNumber
FMC_SDRAM_GetModeStatus
