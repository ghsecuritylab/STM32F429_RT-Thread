ARM GAS  /tmp/cc8v2nhT.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"scheduler.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._get_highest_priority_thread,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	_get_highest_priority_thread:
  25              	.LFB16:
  26              		.file 1 "rt-thread/src/scheduler.c"
   1:rt-thread/src/scheduler.c **** /*
   2:rt-thread/src/scheduler.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/scheduler.c ****  *
   4:rt-thread/src/scheduler.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/scheduler.c ****  *
   6:rt-thread/src/scheduler.c ****  * Change Logs:
   7:rt-thread/src/scheduler.c ****  * Date           Author       Notes
   8:rt-thread/src/scheduler.c ****  * 2006-03-17     Bernard      the first version
   9:rt-thread/src/scheduler.c ****  * 2006-04-28     Bernard      fix the scheduler algorthm
  10:rt-thread/src/scheduler.c ****  * 2006-04-30     Bernard      add SCHEDULER_DEBUG
  11:rt-thread/src/scheduler.c ****  * 2006-05-27     Bernard      fix the scheduler algorthm for same priority
  12:rt-thread/src/scheduler.c ****  *                             thread schedule
  13:rt-thread/src/scheduler.c ****  * 2006-06-04     Bernard      rewrite the scheduler algorithm
  14:rt-thread/src/scheduler.c ****  * 2006-08-03     Bernard      add hook support
  15:rt-thread/src/scheduler.c ****  * 2006-09-05     Bernard      add 32 priority level support
  16:rt-thread/src/scheduler.c ****  * 2006-09-24     Bernard      add rt_system_scheduler_start function
  17:rt-thread/src/scheduler.c ****  * 2009-09-16     Bernard      fix _rt_scheduler_stack_check
  18:rt-thread/src/scheduler.c ****  * 2010-04-11     yi.qiu       add module feature
  19:rt-thread/src/scheduler.c ****  * 2010-07-13     Bernard      fix the maximal number of rt_scheduler_lock_nest
  20:rt-thread/src/scheduler.c ****  *                             issue found by kuronca
  21:rt-thread/src/scheduler.c ****  * 2010-12-13     Bernard      add defunct list initialization even if not use heap.
  22:rt-thread/src/scheduler.c ****  * 2011-05-10     Bernard      clean scheduler debug log.
  23:rt-thread/src/scheduler.c ****  * 2013-12-21     Grissiom     add rt_critical_level
  24:rt-thread/src/scheduler.c ****  * 2018-11-22     Jesven       remove the current task from ready queue
  25:rt-thread/src/scheduler.c ****  *                             add per cpu ready queue
  26:rt-thread/src/scheduler.c ****  *                             add _get_highest_priority_thread to find highest priority task
  27:rt-thread/src/scheduler.c ****  *                             rt_schedule_insert_thread won't insert current task to ready queue
  28:rt-thread/src/scheduler.c ****  *                             in smp version, rt_hw_context_switch_interrupt maybe switch to
  29:rt-thread/src/scheduler.c ****  *                               new task directly
  30:rt-thread/src/scheduler.c ****  *
  31:rt-thread/src/scheduler.c ****  */
  32:rt-thread/src/scheduler.c **** 
ARM GAS  /tmp/cc8v2nhT.s 			page 2


  33:rt-thread/src/scheduler.c **** #include <rtthread.h>
  34:rt-thread/src/scheduler.c **** #include <rthw.h>
  35:rt-thread/src/scheduler.c **** 
  36:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
  37:rt-thread/src/scheduler.c **** rt_hw_spinlock_t _rt_critical_lock;
  38:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
  39:rt-thread/src/scheduler.c **** 
  40:rt-thread/src/scheduler.c **** rt_list_t rt_thread_priority_table[RT_THREAD_PRIORITY_MAX];
  41:rt-thread/src/scheduler.c **** rt_uint32_t rt_thread_ready_priority_group;
  42:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
  43:rt-thread/src/scheduler.c **** /* Maximum priority level, 256 */
  44:rt-thread/src/scheduler.c **** rt_uint8_t rt_thread_ready_table[32];
  45:rt-thread/src/scheduler.c **** #endif
  46:rt-thread/src/scheduler.c **** 
  47:rt-thread/src/scheduler.c **** #ifndef RT_USING_SMP
  48:rt-thread/src/scheduler.c **** extern volatile rt_uint8_t rt_interrupt_nest;
  49:rt-thread/src/scheduler.c **** static rt_int16_t rt_scheduler_lock_nest;
  50:rt-thread/src/scheduler.c **** struct rt_thread *rt_current_thread;
  51:rt-thread/src/scheduler.c **** rt_uint8_t rt_current_priority;
  52:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
  53:rt-thread/src/scheduler.c **** 
  54:rt-thread/src/scheduler.c **** rt_list_t rt_thread_defunct;
  55:rt-thread/src/scheduler.c **** 
  56:rt-thread/src/scheduler.c **** #ifdef RT_USING_HOOK
  57:rt-thread/src/scheduler.c **** static void (*rt_scheduler_hook)(struct rt_thread *from, struct rt_thread *to);
  58:rt-thread/src/scheduler.c **** 
  59:rt-thread/src/scheduler.c **** /**
  60:rt-thread/src/scheduler.c ****  * @addtogroup Hook
  61:rt-thread/src/scheduler.c ****  */
  62:rt-thread/src/scheduler.c **** 
  63:rt-thread/src/scheduler.c **** /**@{*/
  64:rt-thread/src/scheduler.c **** 
  65:rt-thread/src/scheduler.c **** /**
  66:rt-thread/src/scheduler.c ****  * This function will set a hook function, which will be invoked when thread
  67:rt-thread/src/scheduler.c ****  * switch happens.
  68:rt-thread/src/scheduler.c ****  *
  69:rt-thread/src/scheduler.c ****  * @param hook the hook function
  70:rt-thread/src/scheduler.c ****  */
  71:rt-thread/src/scheduler.c **** void
  72:rt-thread/src/scheduler.c **** rt_scheduler_sethook(void (*hook)(struct rt_thread *from, struct rt_thread *to))
  73:rt-thread/src/scheduler.c **** {
  74:rt-thread/src/scheduler.c ****     rt_scheduler_hook = hook;
  75:rt-thread/src/scheduler.c **** }
  76:rt-thread/src/scheduler.c **** 
  77:rt-thread/src/scheduler.c **** /**@}*/
  78:rt-thread/src/scheduler.c **** #endif
  79:rt-thread/src/scheduler.c **** 
  80:rt-thread/src/scheduler.c **** #ifdef RT_USING_OVERFLOW_CHECK
  81:rt-thread/src/scheduler.c **** static void _rt_scheduler_stack_check(struct rt_thread *thread)
  82:rt-thread/src/scheduler.c **** {
  83:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
  84:rt-thread/src/scheduler.c **** 
  85:rt-thread/src/scheduler.c **** #if defined(ARCH_CPU_STACK_GROWS_UPWARD)
  86:rt-thread/src/scheduler.c ****     if (*((rt_uint8_t *)((rt_ubase_t)thread->stack_addr + thread->stack_size - 1)) != '#' ||
  87:rt-thread/src/scheduler.c **** #else
  88:rt-thread/src/scheduler.c ****     if (*((rt_uint8_t *)thread->stack_addr) != '#' ||
  89:rt-thread/src/scheduler.c **** #endif
ARM GAS  /tmp/cc8v2nhT.s 			page 3


  90:rt-thread/src/scheduler.c ****         (rt_ubase_t)thread->sp <= (rt_ubase_t)thread->stack_addr ||
  91:rt-thread/src/scheduler.c ****         (rt_ubase_t)thread->sp >
  92:rt-thread/src/scheduler.c ****         (rt_ubase_t)thread->stack_addr + (rt_ubase_t)thread->stack_size)
  93:rt-thread/src/scheduler.c ****     {
  94:rt-thread/src/scheduler.c ****         rt_ubase_t level;
  95:rt-thread/src/scheduler.c **** 
  96:rt-thread/src/scheduler.c ****         rt_kprintf("thread:%s stack overflow\n", thread->name);
  97:rt-thread/src/scheduler.c **** #ifdef RT_USING_FINSH
  98:rt-thread/src/scheduler.c ****         {
  99:rt-thread/src/scheduler.c ****             extern long list_thread(void);
 100:rt-thread/src/scheduler.c ****             list_thread();
 101:rt-thread/src/scheduler.c ****         }
 102:rt-thread/src/scheduler.c **** #endif
 103:rt-thread/src/scheduler.c ****         level = rt_hw_interrupt_disable();
 104:rt-thread/src/scheduler.c ****         while (level);
 105:rt-thread/src/scheduler.c ****     }
 106:rt-thread/src/scheduler.c **** #if defined(ARCH_CPU_STACK_GROWS_UPWARD)
 107:rt-thread/src/scheduler.c ****     else if ((rt_ubase_t)thread->sp > ((rt_ubase_t)thread->stack_addr + thread->stack_size))
 108:rt-thread/src/scheduler.c ****     {
 109:rt-thread/src/scheduler.c ****         rt_kprintf("warning: %s stack is close to the top of stack address.\n",
 110:rt-thread/src/scheduler.c ****                    thread->name);
 111:rt-thread/src/scheduler.c ****     }
 112:rt-thread/src/scheduler.c **** #else
 113:rt-thread/src/scheduler.c ****     else if ((rt_ubase_t)thread->sp <= ((rt_ubase_t)thread->stack_addr + 32))
 114:rt-thread/src/scheduler.c ****     {
 115:rt-thread/src/scheduler.c ****         rt_kprintf("warning: %s stack is close to end of stack address.\n",
 116:rt-thread/src/scheduler.c ****                    thread->name);
 117:rt-thread/src/scheduler.c ****     }
 118:rt-thread/src/scheduler.c **** #endif
 119:rt-thread/src/scheduler.c **** }
 120:rt-thread/src/scheduler.c **** #endif
 121:rt-thread/src/scheduler.c **** 
 122:rt-thread/src/scheduler.c **** /*
 123:rt-thread/src/scheduler.c ****  * get the highest priority thread in ready queue
 124:rt-thread/src/scheduler.c ****  */
 125:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 126:rt-thread/src/scheduler.c **** static struct rt_thread* _get_highest_priority_thread(rt_ubase_t *highest_prio)
 127:rt-thread/src/scheduler.c **** {
 128:rt-thread/src/scheduler.c ****     register struct rt_thread *highest_priority_thread;
 129:rt-thread/src/scheduler.c ****     register rt_ubase_t highest_ready_priority, local_highest_ready_priority;
 130:rt-thread/src/scheduler.c ****     struct rt_cpu* pcpu = rt_cpu_self();
 131:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 132:rt-thread/src/scheduler.c ****     register rt_ubase_t number;
 133:rt-thread/src/scheduler.c **** 
 134:rt-thread/src/scheduler.c ****     number = __rt_ffs(rt_thread_ready_priority_group) - 1;
 135:rt-thread/src/scheduler.c ****     highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
 136:rt-thread/src/scheduler.c ****     number = __rt_ffs(pcpu->priority_group) - 1;
 137:rt-thread/src/scheduler.c ****     local_highest_ready_priority = (number << 3) + __rt_ffs(pcpu->ready_table[number]) - 1;
 138:rt-thread/src/scheduler.c **** #else
 139:rt-thread/src/scheduler.c ****     highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
 140:rt-thread/src/scheduler.c ****     local_highest_ready_priority = __rt_ffs(pcpu->priority_group) - 1;
 141:rt-thread/src/scheduler.c **** #endif
 142:rt-thread/src/scheduler.c **** 
 143:rt-thread/src/scheduler.c ****     /* get highest ready priority thread */
 144:rt-thread/src/scheduler.c ****     if (highest_ready_priority < local_highest_ready_priority)
 145:rt-thread/src/scheduler.c ****     {
 146:rt-thread/src/scheduler.c ****         *highest_prio = highest_ready_priority;
ARM GAS  /tmp/cc8v2nhT.s 			page 4


 147:rt-thread/src/scheduler.c ****         highest_priority_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].ne
 148:rt-thread/src/scheduler.c ****                                   struct rt_thread,
 149:rt-thread/src/scheduler.c ****                                   tlist);
 150:rt-thread/src/scheduler.c ****     }
 151:rt-thread/src/scheduler.c ****     else
 152:rt-thread/src/scheduler.c ****     {
 153:rt-thread/src/scheduler.c ****         *highest_prio = local_highest_ready_priority;
 154:rt-thread/src/scheduler.c ****         highest_priority_thread = rt_list_entry(pcpu->priority_table[local_highest_ready_priority].
 155:rt-thread/src/scheduler.c ****                                   struct rt_thread,
 156:rt-thread/src/scheduler.c ****                                   tlist);
 157:rt-thread/src/scheduler.c ****     }
 158:rt-thread/src/scheduler.c **** 
 159:rt-thread/src/scheduler.c ****     return highest_priority_thread;
 160:rt-thread/src/scheduler.c **** }
 161:rt-thread/src/scheduler.c **** #else
 162:rt-thread/src/scheduler.c **** static struct rt_thread* _get_highest_priority_thread(rt_ubase_t *highest_prio)
 163:rt-thread/src/scheduler.c **** {
  27              		.loc 1 163 0
  28              		.cfi_startproc
  29              		@ args = 0, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 10B5     		push	{r4, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 4, -8
  36              		.cfi_offset 14, -4
  37 0002 0446     		mov	r4, r0
 164:rt-thread/src/scheduler.c ****     register struct rt_thread *highest_priority_thread;
 165:rt-thread/src/scheduler.c ****     register rt_ubase_t highest_ready_priority;
 166:rt-thread/src/scheduler.c **** 
 167:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 168:rt-thread/src/scheduler.c ****     register rt_ubase_t number;
 169:rt-thread/src/scheduler.c **** 
 170:rt-thread/src/scheduler.c ****     number = __rt_ffs(rt_thread_ready_priority_group) - 1;
 171:rt-thread/src/scheduler.c ****     highest_ready_priority = (number << 3) + __rt_ffs(rt_thread_ready_table[number]) - 1;
 172:rt-thread/src/scheduler.c **** #else
 173:rt-thread/src/scheduler.c ****     highest_ready_priority = __rt_ffs(rt_thread_ready_priority_group) - 1;
  38              		.loc 1 173 0
  39 0004 054B     		ldr	r3, .L3
  40 0006 1868     		ldr	r0, [r3]
  41              	.LVL1:
  42 0008 FFF7FEFF 		bl	__rt_ffs
  43              	.LVL2:
  44 000c 431E     		subs	r3, r0, #1
  45              	.LVL3:
 174:rt-thread/src/scheduler.c **** #endif
 175:rt-thread/src/scheduler.c **** 
 176:rt-thread/src/scheduler.c ****     /* get highest ready priority thread */
 177:rt-thread/src/scheduler.c ****     highest_priority_thread = rt_list_entry(rt_thread_priority_table[highest_ready_priority].next,
  46              		.loc 1 177 0
  47 000e 044A     		ldr	r2, .L3+4
  48 0010 52F83300 		ldr	r0, [r2, r3, lsl #3]
  49              	.LVL4:
 178:rt-thread/src/scheduler.c ****                               struct rt_thread,
 179:rt-thread/src/scheduler.c ****                               tlist);
 180:rt-thread/src/scheduler.c **** 
ARM GAS  /tmp/cc8v2nhT.s 			page 5


 181:rt-thread/src/scheduler.c ****     *highest_prio = highest_ready_priority;
  50              		.loc 1 181 0
  51 0014 2360     		str	r3, [r4]
 182:rt-thread/src/scheduler.c **** 
 183:rt-thread/src/scheduler.c ****     return highest_priority_thread;
 184:rt-thread/src/scheduler.c **** }
  52              		.loc 1 184 0
  53 0016 1438     		subs	r0, r0, #20
  54              	.LVL5:
  55 0018 10BD     		pop	{r4, pc}
  56              	.LVL6:
  57              	.L4:
  58 001a 00BF     		.align	2
  59              	.L3:
  60 001c 00000000 		.word	rt_thread_ready_priority_group
  61 0020 00000000 		.word	rt_thread_priority_table
  62              		.cfi_endproc
  63              	.LFE16:
  65              		.section	.text._rt_scheduler_stack_check,"ax",%progbits
  66              		.align	1
  67              		.syntax unified
  68              		.thumb
  69              		.thumb_func
  70              		.fpu fpv4-sp-d16
  72              	_rt_scheduler_stack_check:
  73              	.LFB15:
  82:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
  74              		.loc 1 82 0
  75              		.cfi_startproc
  76              		@ args = 0, pretend = 0, frame = 0
  77              		@ frame_needed = 0, uses_anonymous_args = 0
  78              	.LVL7:
  79 0000 10B5     		push	{r4, lr}
  80              	.LCFI1:
  81              		.cfi_def_cfa_offset 8
  82              		.cfi_offset 4, -8
  83              		.cfi_offset 14, -4
  83:rt-thread/src/scheduler.c **** 
  84              		.loc 1 83 0
  85 0002 0446     		mov	r4, r0
  86 0004 60B1     		cbz	r0, .L12
  87              	.LVL8:
  88              	.L6:
  88:rt-thread/src/scheduler.c **** #endif
  89              		.loc 1 88 0
  90 0006 A36A     		ldr	r3, [r4, #40]
  91 0008 1A78     		ldrb	r2, [r3]	@ zero_extendqisi2
  92 000a 232A     		cmp	r2, #35
  93 000c 0ED0     		beq	.L13
  94              	.L7:
  95              	.LBB12:
  96:rt-thread/src/scheduler.c **** #ifdef RT_USING_FINSH
  96              		.loc 1 96 0
  97 000e 2146     		mov	r1, r4
  98 0010 0E48     		ldr	r0, .L15
  99 0012 FFF7FEFF 		bl	rt_kprintf
 100              	.LVL9:
ARM GAS  /tmp/cc8v2nhT.s 			page 6


 103:rt-thread/src/scheduler.c ****         while (level);
 101              		.loc 1 103 0
 102 0016 FFF7FEFF 		bl	rt_hw_interrupt_disable
 103              	.LVL10:
 104              	.L9:
 104:rt-thread/src/scheduler.c ****     }
 105              		.loc 1 104 0 discriminator 1
 106 001a 0028     		cmp	r0, #0
 107 001c FDD1     		bne	.L9
 108 001e 10BD     		pop	{r4, pc}
 109              	.LVL11:
 110              	.L12:
 111              	.LBE12:
  83:rt-thread/src/scheduler.c **** 
 112              		.loc 1 83 0 discriminator 1
 113 0020 5322     		movs	r2, #83
 114 0022 0B49     		ldr	r1, .L15+4
 115 0024 0B48     		ldr	r0, .L15+8
 116              	.LVL12:
 117 0026 FFF7FEFF 		bl	rt_assert_handler
 118              	.LVL13:
 119 002a ECE7     		b	.L6
 120              	.L13:
  90:rt-thread/src/scheduler.c ****         (rt_ubase_t)thread->sp >
 121              		.loc 1 90 0 discriminator 1
 122 002c E269     		ldr	r2, [r4, #28]
  88:rt-thread/src/scheduler.c **** #endif
 123              		.loc 1 88 0 discriminator 1
 124 002e 9A42     		cmp	r2, r3
 125 0030 EDD9     		bls	.L7
  92:rt-thread/src/scheduler.c ****     {
 126              		.loc 1 92 0
 127 0032 E16A     		ldr	r1, [r4, #44]
 128 0034 1944     		add	r1, r1, r3
  90:rt-thread/src/scheduler.c ****         (rt_ubase_t)thread->sp >
 129              		.loc 1 90 0
 130 0036 8A42     		cmp	r2, r1
 131 0038 E9D8     		bhi	.L7
 113:rt-thread/src/scheduler.c ****     {
 132              		.loc 1 113 0
 133 003a 2033     		adds	r3, r3, #32
 134 003c 9A42     		cmp	r2, r3
 135 003e 00D9     		bls	.L14
 136              	.L5:
 137 0040 10BD     		pop	{r4, pc}
 138              	.LVL14:
 139              	.L14:
 115:rt-thread/src/scheduler.c ****                    thread->name);
 140              		.loc 1 115 0
 141 0042 2146     		mov	r1, r4
 142 0044 0448     		ldr	r0, .L15+12
 143 0046 FFF7FEFF 		bl	rt_kprintf
 144              	.LVL15:
 119:rt-thread/src/scheduler.c **** #endif
 145              		.loc 1 119 0
 146 004a F9E7     		b	.L5
 147              	.L16:
ARM GAS  /tmp/cc8v2nhT.s 			page 7


 148              		.align	2
 149              	.L15:
 150 004c 14000000 		.word	.LC1
 151 0050 00000000 		.word	.LANCHOR0
 152 0054 00000000 		.word	.LC0
 153 0058 30000000 		.word	.LC2
 154              		.cfi_endproc
 155              	.LFE15:
 157              		.section	.text.rt_system_scheduler_init,"ax",%progbits
 158              		.align	1
 159              		.global	rt_system_scheduler_init
 160              		.syntax unified
 161              		.thumb
 162              		.thumb_func
 163              		.fpu fpv4-sp-d16
 165              	rt_system_scheduler_init:
 166              	.LFB17:
 185:rt-thread/src/scheduler.c **** #endif
 186:rt-thread/src/scheduler.c **** 
 187:rt-thread/src/scheduler.c **** /**
 188:rt-thread/src/scheduler.c ****  * @ingroup SystemInit
 189:rt-thread/src/scheduler.c ****  * This function will initialize the system scheduler
 190:rt-thread/src/scheduler.c ****  */
 191:rt-thread/src/scheduler.c **** void rt_system_scheduler_init(void)
 192:rt-thread/src/scheduler.c **** {
 167              		.loc 1 192 0
 168              		.cfi_startproc
 169              		@ args = 0, pretend = 0, frame = 0
 170              		@ frame_needed = 0, uses_anonymous_args = 0
 171              		@ link register save eliminated.
 193:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 194:rt-thread/src/scheduler.c ****     int cpu;
 195:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 196:rt-thread/src/scheduler.c ****     register rt_base_t offset;
 197:rt-thread/src/scheduler.c **** 
 198:rt-thread/src/scheduler.c **** #ifndef RT_USING_SMP
 199:rt-thread/src/scheduler.c ****     rt_scheduler_lock_nest = 0;
 172              		.loc 1 199 0
 173 0000 0023     		movs	r3, #0
 174 0002 094A     		ldr	r2, .L20
 175 0004 1380     		strh	r3, [r2]	@ movhi
 176              	.LVL16:
 200:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 201:rt-thread/src/scheduler.c **** 
 202:rt-thread/src/scheduler.c ****     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("start scheduler: max priority 0x%02x\n",
 203:rt-thread/src/scheduler.c ****                                       RT_THREAD_PRIORITY_MAX));
 204:rt-thread/src/scheduler.c **** 
 205:rt-thread/src/scheduler.c ****     for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 177              		.loc 1 205 0
 178 0006 06E0     		b	.L18
 179              	.LVL17:
 180              	.L19:
 206:rt-thread/src/scheduler.c ****     {
 207:rt-thread/src/scheduler.c ****         rt_list_init(&rt_thread_priority_table[offset]);
 181              		.loc 1 207 0 discriminator 3
 182 0008 0849     		ldr	r1, .L20+4
 183 000a 01EBC302 		add	r2, r1, r3, lsl #3
ARM GAS  /tmp/cc8v2nhT.s 			page 8


 184              	.LVL18:
 185              	.LBB13:
 186              	.LBB14:
 187              		.file 2 "rt-thread/include/rtservice.h"
   1:rt-thread/include/rtservice.h **** /*
   2:rt-thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/include/rtservice.h ****  *
   4:rt-thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/include/rtservice.h ****  *
   6:rt-thread/include/rtservice.h ****  * Change Logs:
   7:rt-thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt-thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt-thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt-thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt-thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt-thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt-thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt-thread/include/rtservice.h ****  */
  15:rt-thread/include/rtservice.h **** 
  16:rt-thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt-thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt-thread/include/rtservice.h **** 
  19:rt-thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt-thread/include/rtservice.h **** extern "C" {
  21:rt-thread/include/rtservice.h **** #endif
  22:rt-thread/include/rtservice.h **** 
  23:rt-thread/include/rtservice.h **** /**
  24:rt-thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt-thread/include/rtservice.h ****  */
  26:rt-thread/include/rtservice.h **** 
  27:rt-thread/include/rtservice.h **** /**@{*/
  28:rt-thread/include/rtservice.h **** 
  29:rt-thread/include/rtservice.h **** /**
  30:rt-thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt-thread/include/rtservice.h ****  * struct type.
  32:rt-thread/include/rtservice.h ****  */
  33:rt-thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt-thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt-thread/include/rtservice.h **** 
  36:rt-thread/include/rtservice.h **** 
  37:rt-thread/include/rtservice.h **** /**
  38:rt-thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt-thread/include/rtservice.h ****  */
  40:rt-thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt-thread/include/rtservice.h **** 
  42:rt-thread/include/rtservice.h **** /**
  43:rt-thread/include/rtservice.h ****  * @brief initialize a list
  44:rt-thread/include/rtservice.h ****  *
  45:rt-thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt-thread/include/rtservice.h ****  */
  47:rt-thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt-thread/include/rtservice.h **** {
  49:rt-thread/include/rtservice.h ****     l->next = l->prev = l;
 188              		.loc 2 49 0 discriminator 3
 189 000e 5260     		str	r2, [r2, #4]
 190 0010 41F83320 		str	r2, [r1, r3, lsl #3]
 191              	.LVL19:
ARM GAS  /tmp/cc8v2nhT.s 			page 9


 192              	.LBE14:
 193              	.LBE13:
 205:rt-thread/src/scheduler.c ****     {
 194              		.loc 1 205 0 discriminator 3
 195 0014 0133     		adds	r3, r3, #1
 196              	.LVL20:
 197              	.L18:
 205:rt-thread/src/scheduler.c ****     {
 198              		.loc 1 205 0 is_stmt 0 discriminator 1
 199 0016 1F2B     		cmp	r3, #31
 200 0018 F6DD     		ble	.L19
 208:rt-thread/src/scheduler.c ****     }
 209:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 210:rt-thread/src/scheduler.c ****     for (cpu = 0; cpu < RT_CPUS_NR; cpu++)
 211:rt-thread/src/scheduler.c ****     {
 212:rt-thread/src/scheduler.c ****         struct rt_cpu *pcpu =  rt_cpu_index(cpu);
 213:rt-thread/src/scheduler.c ****         for (offset = 0; offset < RT_THREAD_PRIORITY_MAX; offset ++)
 214:rt-thread/src/scheduler.c ****         {
 215:rt-thread/src/scheduler.c ****             rt_list_init(&pcpu->priority_table[offset]);
 216:rt-thread/src/scheduler.c ****         }
 217:rt-thread/src/scheduler.c **** 
 218:rt-thread/src/scheduler.c ****         pcpu->irq_switch_flag = 0;
 219:rt-thread/src/scheduler.c ****         pcpu->current_priority = RT_THREAD_PRIORITY_MAX - 1;
 220:rt-thread/src/scheduler.c ****         pcpu->current_thread = RT_NULL;
 221:rt-thread/src/scheduler.c ****         pcpu->priority_group = 0;
 222:rt-thread/src/scheduler.c **** 
 223:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 224:rt-thread/src/scheduler.c ****         rt_memset(pcpu->ready_table, 0, sizeof(pcpu->ready_table));
 225:rt-thread/src/scheduler.c **** #endif
 226:rt-thread/src/scheduler.c ****     }
 227:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 228:rt-thread/src/scheduler.c **** 
 229:rt-thread/src/scheduler.c ****     /* initialize ready priority group */
 230:rt-thread/src/scheduler.c ****     rt_thread_ready_priority_group = 0;
 201              		.loc 1 230 0 is_stmt 1
 202 001a 0022     		movs	r2, #0
 203 001c 044B     		ldr	r3, .L20+8
 204              	.LVL21:
 205 001e 1A60     		str	r2, [r3]
 206              	.LVL22:
 207              	.LBB15:
 208              	.LBB16:
 209              		.loc 2 49 0
 210 0020 044B     		ldr	r3, .L20+12
 211 0022 5B60     		str	r3, [r3, #4]
 212 0024 1B60     		str	r3, [r3]
 213              	.LVL23:
 214 0026 7047     		bx	lr
 215              	.L21:
 216              		.align	2
 217              	.L20:
 218 0028 00000000 		.word	.LANCHOR1
 219 002c 00000000 		.word	rt_thread_priority_table
 220 0030 00000000 		.word	rt_thread_ready_priority_group
 221 0034 00000000 		.word	rt_thread_defunct
 222              	.LBE16:
 223              	.LBE15:
ARM GAS  /tmp/cc8v2nhT.s 			page 10


 224              		.cfi_endproc
 225              	.LFE17:
 227              		.section	.text.rt_schedule_insert_thread,"ax",%progbits
 228              		.align	1
 229              		.global	rt_schedule_insert_thread
 230              		.syntax unified
 231              		.thumb
 232              		.thumb_func
 233              		.fpu fpv4-sp-d16
 235              	rt_schedule_insert_thread:
 236              	.LFB20:
 231:rt-thread/src/scheduler.c **** 
 232:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 233:rt-thread/src/scheduler.c ****     /* initialize ready table */
 234:rt-thread/src/scheduler.c ****     rt_memset(rt_thread_ready_table, 0, sizeof(rt_thread_ready_table));
 235:rt-thread/src/scheduler.c **** #endif
 236:rt-thread/src/scheduler.c **** 
 237:rt-thread/src/scheduler.c ****     /* initialize thread defunct */
 238:rt-thread/src/scheduler.c ****     rt_list_init(&rt_thread_defunct);
 239:rt-thread/src/scheduler.c **** }
 240:rt-thread/src/scheduler.c **** 
 241:rt-thread/src/scheduler.c **** /**
 242:rt-thread/src/scheduler.c ****  * @ingroup SystemInit
 243:rt-thread/src/scheduler.c ****  * This function will startup scheduler. It will select one thread
 244:rt-thread/src/scheduler.c ****  * with the highest priority level, then switch to it.
 245:rt-thread/src/scheduler.c ****  */
 246:rt-thread/src/scheduler.c **** void rt_system_scheduler_start(void)
 247:rt-thread/src/scheduler.c **** {
 248:rt-thread/src/scheduler.c ****     register struct rt_thread *to_thread;
 249:rt-thread/src/scheduler.c ****     rt_ubase_t highest_ready_priority;
 250:rt-thread/src/scheduler.c **** 
 251:rt-thread/src/scheduler.c ****     to_thread = _get_highest_priority_thread(&highest_ready_priority);
 252:rt-thread/src/scheduler.c **** 
 253:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 254:rt-thread/src/scheduler.c ****     to_thread->oncpu = rt_hw_cpu_id();
 255:rt-thread/src/scheduler.c **** #else
 256:rt-thread/src/scheduler.c ****     rt_current_thread = to_thread;
 257:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 258:rt-thread/src/scheduler.c **** 
 259:rt-thread/src/scheduler.c ****     rt_schedule_remove_thread(to_thread);
 260:rt-thread/src/scheduler.c ****     to_thread->stat = RT_THREAD_RUNNING;
 261:rt-thread/src/scheduler.c **** 
 262:rt-thread/src/scheduler.c ****     /* switch to new thread */
 263:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 264:rt-thread/src/scheduler.c ****     rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp, to_thread);
 265:rt-thread/src/scheduler.c **** #else
 266:rt-thread/src/scheduler.c ****     rt_hw_context_switch_to((rt_ubase_t)&to_thread->sp);
 267:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 268:rt-thread/src/scheduler.c **** 
 269:rt-thread/src/scheduler.c ****     /* never come back */
 270:rt-thread/src/scheduler.c **** }
 271:rt-thread/src/scheduler.c **** 
 272:rt-thread/src/scheduler.c **** /**
 273:rt-thread/src/scheduler.c ****  * @addtogroup Thread
 274:rt-thread/src/scheduler.c ****  */
 275:rt-thread/src/scheduler.c **** 
 276:rt-thread/src/scheduler.c **** /**@{*/
ARM GAS  /tmp/cc8v2nhT.s 			page 11


 277:rt-thread/src/scheduler.c **** 
 278:rt-thread/src/scheduler.c **** 
 279:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 280:rt-thread/src/scheduler.c **** /**
 281:rt-thread/src/scheduler.c ****  * This function will handle IPI interrupt and do a scheduling in system;
 282:rt-thread/src/scheduler.c ****  * 
 283:rt-thread/src/scheduler.c ****  * @param vector, the number of IPI interrupt for system scheduling
 284:rt-thread/src/scheduler.c ****  * @param param, use RT_NULL
 285:rt-thread/src/scheduler.c ****  * 
 286:rt-thread/src/scheduler.c ****  * NOTE: this function should be invoke or register as ISR in BSP.
 287:rt-thread/src/scheduler.c ****  */
 288:rt-thread/src/scheduler.c **** void rt_scheduler_ipi_handler(int vector, void *param)
 289:rt-thread/src/scheduler.c **** {
 290:rt-thread/src/scheduler.c ****     rt_schedule();
 291:rt-thread/src/scheduler.c **** }
 292:rt-thread/src/scheduler.c **** 
 293:rt-thread/src/scheduler.c **** /**
 294:rt-thread/src/scheduler.c ****  * This function will perform one scheduling. It will select one thread
 295:rt-thread/src/scheduler.c ****  * with the highest priority level in global ready queue or local ready queue, 
 296:rt-thread/src/scheduler.c ****  * then switch to it.
 297:rt-thread/src/scheduler.c ****  */
 298:rt-thread/src/scheduler.c **** void rt_schedule(void)
 299:rt-thread/src/scheduler.c **** {
 300:rt-thread/src/scheduler.c ****     rt_base_t level;
 301:rt-thread/src/scheduler.c ****     struct rt_thread *to_thread;
 302:rt-thread/src/scheduler.c ****     struct rt_thread *current_thread;
 303:rt-thread/src/scheduler.c ****     struct rt_cpu    *pcpu;
 304:rt-thread/src/scheduler.c ****     int cpu_id;
 305:rt-thread/src/scheduler.c **** 
 306:rt-thread/src/scheduler.c ****     /* disable interrupt */
 307:rt-thread/src/scheduler.c ****     level  = rt_hw_interrupt_disable();
 308:rt-thread/src/scheduler.c **** 
 309:rt-thread/src/scheduler.c ****     cpu_id = rt_hw_cpu_id();
 310:rt-thread/src/scheduler.c ****     pcpu   = rt_cpu_index(cpu_id);
 311:rt-thread/src/scheduler.c ****     current_thread = pcpu->current_thread;
 312:rt-thread/src/scheduler.c **** 
 313:rt-thread/src/scheduler.c ****     /* whether do switch in interrupt */
 314:rt-thread/src/scheduler.c ****     if (pcpu->irq_nest)
 315:rt-thread/src/scheduler.c ****     {
 316:rt-thread/src/scheduler.c ****         pcpu->irq_switch_flag = 1;
 317:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 318:rt-thread/src/scheduler.c ****         goto __exit;
 319:rt-thread/src/scheduler.c ****     }
 320:rt-thread/src/scheduler.c **** 
 321:rt-thread/src/scheduler.c **** #ifdef RT_USING_SIGNALS
 322:rt-thread/src/scheduler.c ****     if ((current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND)
 323:rt-thread/src/scheduler.c ****     {
 324:rt-thread/src/scheduler.c ****         /* if current_thread signal is in pending */
 325:rt-thread/src/scheduler.c **** 
 326:rt-thread/src/scheduler.c ****         if ((current_thread->stat & RT_THREAD_STAT_SIGNAL_MASK) & RT_THREAD_STAT_SIGNAL_PENDING)
 327:rt-thread/src/scheduler.c ****         {
 328:rt-thread/src/scheduler.c ****             rt_thread_resume(current_thread);
 329:rt-thread/src/scheduler.c ****         }
 330:rt-thread/src/scheduler.c ****     }
 331:rt-thread/src/scheduler.c **** #endif
 332:rt-thread/src/scheduler.c **** 
 333:rt-thread/src/scheduler.c ****     if (current_thread->scheduler_lock_nest == 1) /* whether lock scheduler */
ARM GAS  /tmp/cc8v2nhT.s 			page 12


 334:rt-thread/src/scheduler.c ****     {
 335:rt-thread/src/scheduler.c ****         rt_ubase_t highest_ready_priority;
 336:rt-thread/src/scheduler.c **** 
 337:rt-thread/src/scheduler.c ****         if (rt_thread_ready_priority_group != 0 || pcpu->priority_group != 0)
 338:rt-thread/src/scheduler.c ****         {
 339:rt-thread/src/scheduler.c ****             to_thread = _get_highest_priority_thread(&highest_ready_priority);
 340:rt-thread/src/scheduler.c ****             current_thread->oncpu = RT_CPU_DETACHED;
 341:rt-thread/src/scheduler.c ****             if ((current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
 342:rt-thread/src/scheduler.c ****             {
 343:rt-thread/src/scheduler.c ****                 if (current_thread->current_priority < highest_ready_priority)
 344:rt-thread/src/scheduler.c ****                 {
 345:rt-thread/src/scheduler.c ****                     to_thread = current_thread;
 346:rt-thread/src/scheduler.c ****                 }
 347:rt-thread/src/scheduler.c ****                 else if (current_thread->current_priority == highest_ready_priority && (current_thr
 348:rt-thread/src/scheduler.c ****                 {
 349:rt-thread/src/scheduler.c ****                     to_thread = current_thread;
 350:rt-thread/src/scheduler.c ****                 }
 351:rt-thread/src/scheduler.c ****                 else
 352:rt-thread/src/scheduler.c ****                 {
 353:rt-thread/src/scheduler.c ****                     current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
 354:rt-thread/src/scheduler.c ****                     rt_schedule_insert_thread(current_thread);
 355:rt-thread/src/scheduler.c ****                 }
 356:rt-thread/src/scheduler.c ****             }
 357:rt-thread/src/scheduler.c ****             to_thread->oncpu = cpu_id;
 358:rt-thread/src/scheduler.c ****             if (to_thread != current_thread)
 359:rt-thread/src/scheduler.c ****             {
 360:rt-thread/src/scheduler.c ****                 /* if the destination thread is not the same as current thread */
 361:rt-thread/src/scheduler.c ****                 pcpu->current_priority = (rt_uint8_t)highest_ready_priority;
 362:rt-thread/src/scheduler.c **** 
 363:rt-thread/src/scheduler.c ****                 RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (current_thread, to_thread));
 364:rt-thread/src/scheduler.c **** 
 365:rt-thread/src/scheduler.c ****                 rt_schedule_remove_thread(to_thread);
 366:rt-thread/src/scheduler.c ****                 to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
 367:rt-thread/src/scheduler.c **** 
 368:rt-thread/src/scheduler.c ****                 /* switch to new thread */
 369:rt-thread/src/scheduler.c ****                 RT_DEBUG_LOG(RT_DEBUG_SCHEDULER,
 370:rt-thread/src/scheduler.c ****                         ("[%d]switch to priority#%d "
 371:rt-thread/src/scheduler.c ****                          "thread:%.*s(sp:0x%08x), "
 372:rt-thread/src/scheduler.c ****                          "from thread:%.*s(sp: 0x%08x)\n",
 373:rt-thread/src/scheduler.c ****                          pcpu->irq_nest, highest_ready_priority,
 374:rt-thread/src/scheduler.c ****                          RT_NAME_MAX, to_thread->name, to_thread->sp,
 375:rt-thread/src/scheduler.c ****                          RT_NAME_MAX, current_thread->name, current_thread->sp));
 376:rt-thread/src/scheduler.c **** 
 377:rt-thread/src/scheduler.c **** #ifdef RT_USING_OVERFLOW_CHECK
 378:rt-thread/src/scheduler.c ****                 _rt_scheduler_stack_check(to_thread);
 379:rt-thread/src/scheduler.c **** #endif
 380:rt-thread/src/scheduler.c **** 
 381:rt-thread/src/scheduler.c ****                 rt_hw_context_switch((rt_ubase_t)&current_thread->sp,
 382:rt-thread/src/scheduler.c ****                         (rt_ubase_t)&to_thread->sp, to_thread);
 383:rt-thread/src/scheduler.c ****             }
 384:rt-thread/src/scheduler.c ****         }
 385:rt-thread/src/scheduler.c ****     }
 386:rt-thread/src/scheduler.c **** 
 387:rt-thread/src/scheduler.c ****     /* enable interrupt */
 388:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 389:rt-thread/src/scheduler.c **** 
 390:rt-thread/src/scheduler.c **** #ifdef RT_USING_SIGNALS
ARM GAS  /tmp/cc8v2nhT.s 			page 13


 391:rt-thread/src/scheduler.c ****     /* check stat of thread for signal */
 392:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 393:rt-thread/src/scheduler.c ****     if (current_thread->stat & RT_THREAD_STAT_SIGNAL_PENDING)
 394:rt-thread/src/scheduler.c ****     {
 395:rt-thread/src/scheduler.c ****         extern void rt_thread_handle_sig(rt_bool_t clean_state);
 396:rt-thread/src/scheduler.c **** 
 397:rt-thread/src/scheduler.c ****         current_thread->stat &= ~RT_THREAD_STAT_SIGNAL_PENDING;
 398:rt-thread/src/scheduler.c **** 
 399:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 400:rt-thread/src/scheduler.c **** 
 401:rt-thread/src/scheduler.c ****         /* check signal status */
 402:rt-thread/src/scheduler.c ****         rt_thread_handle_sig(RT_TRUE);
 403:rt-thread/src/scheduler.c ****     }
 404:rt-thread/src/scheduler.c ****     else
 405:rt-thread/src/scheduler.c ****     {
 406:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 407:rt-thread/src/scheduler.c ****     }
 408:rt-thread/src/scheduler.c **** #endif
 409:rt-thread/src/scheduler.c **** 
 410:rt-thread/src/scheduler.c **** __exit:
 411:rt-thread/src/scheduler.c ****     return ;
 412:rt-thread/src/scheduler.c **** }
 413:rt-thread/src/scheduler.c **** #else
 414:rt-thread/src/scheduler.c **** /**
 415:rt-thread/src/scheduler.c ****  * This function will perform one schedule. It will select one thread
 416:rt-thread/src/scheduler.c ****  * with the highest priority level, then switch to it.
 417:rt-thread/src/scheduler.c ****  */
 418:rt-thread/src/scheduler.c **** void rt_schedule(void)
 419:rt-thread/src/scheduler.c **** {
 420:rt-thread/src/scheduler.c ****     rt_base_t level;
 421:rt-thread/src/scheduler.c ****     struct rt_thread *to_thread;
 422:rt-thread/src/scheduler.c ****     struct rt_thread *from_thread;
 423:rt-thread/src/scheduler.c **** 
 424:rt-thread/src/scheduler.c ****     /* disable interrupt */
 425:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 426:rt-thread/src/scheduler.c **** 
 427:rt-thread/src/scheduler.c ****     /* check the scheduler is enabled or not */
 428:rt-thread/src/scheduler.c ****     if (rt_scheduler_lock_nest == 0)
 429:rt-thread/src/scheduler.c ****     {
 430:rt-thread/src/scheduler.c ****         rt_ubase_t highest_ready_priority;
 431:rt-thread/src/scheduler.c **** 
 432:rt-thread/src/scheduler.c ****         if (rt_thread_ready_priority_group != 0)
 433:rt-thread/src/scheduler.c ****         {
 434:rt-thread/src/scheduler.c ****             /* need_insert_from_thread: need to insert from_thread to ready queue */
 435:rt-thread/src/scheduler.c ****             int need_insert_from_thread = 0;
 436:rt-thread/src/scheduler.c **** 
 437:rt-thread/src/scheduler.c ****             to_thread = _get_highest_priority_thread(&highest_ready_priority);
 438:rt-thread/src/scheduler.c **** 
 439:rt-thread/src/scheduler.c ****             if ((rt_current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
 440:rt-thread/src/scheduler.c ****             {
 441:rt-thread/src/scheduler.c ****                 if (rt_current_thread->current_priority < highest_ready_priority)
 442:rt-thread/src/scheduler.c ****                 {
 443:rt-thread/src/scheduler.c ****                     to_thread = rt_current_thread;
 444:rt-thread/src/scheduler.c ****                 }
 445:rt-thread/src/scheduler.c ****                 else if (rt_current_thread->current_priority == highest_ready_priority && (rt_curre
 446:rt-thread/src/scheduler.c ****                 {
 447:rt-thread/src/scheduler.c ****                     to_thread = rt_current_thread;
ARM GAS  /tmp/cc8v2nhT.s 			page 14


 448:rt-thread/src/scheduler.c ****                 }
 449:rt-thread/src/scheduler.c ****                 else
 450:rt-thread/src/scheduler.c ****                 {
 451:rt-thread/src/scheduler.c ****                     rt_current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
 452:rt-thread/src/scheduler.c ****                     need_insert_from_thread = 1;
 453:rt-thread/src/scheduler.c ****                 }
 454:rt-thread/src/scheduler.c ****             }
 455:rt-thread/src/scheduler.c **** 
 456:rt-thread/src/scheduler.c ****             if (to_thread != rt_current_thread)
 457:rt-thread/src/scheduler.c ****             {
 458:rt-thread/src/scheduler.c ****                 /* if the destination thread is not the same as current thread */
 459:rt-thread/src/scheduler.c ****                 rt_current_priority = (rt_uint8_t)highest_ready_priority;
 460:rt-thread/src/scheduler.c ****                 from_thread         = rt_current_thread;
 461:rt-thread/src/scheduler.c ****                 rt_current_thread   = to_thread;
 462:rt-thread/src/scheduler.c **** 
 463:rt-thread/src/scheduler.c ****                 RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (from_thread, to_thread));
 464:rt-thread/src/scheduler.c **** 
 465:rt-thread/src/scheduler.c ****                 if (need_insert_from_thread)
 466:rt-thread/src/scheduler.c ****                 {
 467:rt-thread/src/scheduler.c ****                     rt_schedule_insert_thread(from_thread);
 468:rt-thread/src/scheduler.c ****                 }
 469:rt-thread/src/scheduler.c **** 
 470:rt-thread/src/scheduler.c ****                 rt_schedule_remove_thread(to_thread);
 471:rt-thread/src/scheduler.c ****                 to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
 472:rt-thread/src/scheduler.c **** 
 473:rt-thread/src/scheduler.c ****                 /* switch to new thread */
 474:rt-thread/src/scheduler.c ****                 RT_DEBUG_LOG(RT_DEBUG_SCHEDULER,
 475:rt-thread/src/scheduler.c ****                         ("[%d]switch to priority#%d "
 476:rt-thread/src/scheduler.c ****                          "thread:%.*s(sp:0x%08x), "
 477:rt-thread/src/scheduler.c ****                          "from thread:%.*s(sp: 0x%08x)\n",
 478:rt-thread/src/scheduler.c ****                          rt_interrupt_nest, highest_ready_priority,
 479:rt-thread/src/scheduler.c ****                          RT_NAME_MAX, to_thread->name, to_thread->sp,
 480:rt-thread/src/scheduler.c ****                          RT_NAME_MAX, from_thread->name, from_thread->sp));
 481:rt-thread/src/scheduler.c **** 
 482:rt-thread/src/scheduler.c **** #ifdef RT_USING_OVERFLOW_CHECK
 483:rt-thread/src/scheduler.c ****                 _rt_scheduler_stack_check(to_thread);
 484:rt-thread/src/scheduler.c **** #endif
 485:rt-thread/src/scheduler.c **** 
 486:rt-thread/src/scheduler.c ****                 if (rt_interrupt_nest == 0)
 487:rt-thread/src/scheduler.c ****                 {
 488:rt-thread/src/scheduler.c ****                     extern void rt_thread_handle_sig(rt_bool_t clean_state);
 489:rt-thread/src/scheduler.c **** 
 490:rt-thread/src/scheduler.c ****                     rt_hw_context_switch((rt_ubase_t)&from_thread->sp,
 491:rt-thread/src/scheduler.c ****                             (rt_ubase_t)&to_thread->sp);
 492:rt-thread/src/scheduler.c **** 
 493:rt-thread/src/scheduler.c ****                     /* enable interrupt */
 494:rt-thread/src/scheduler.c ****                     rt_hw_interrupt_enable(level);
 495:rt-thread/src/scheduler.c **** 
 496:rt-thread/src/scheduler.c **** #ifdef RT_USING_SIGNALS
 497:rt-thread/src/scheduler.c ****                     /* check stat of thread for signal */
 498:rt-thread/src/scheduler.c ****                     level = rt_hw_interrupt_disable();
 499:rt-thread/src/scheduler.c ****                     if (rt_current_thread->stat & RT_THREAD_STAT_SIGNAL_PENDING)
 500:rt-thread/src/scheduler.c ****                     {
 501:rt-thread/src/scheduler.c ****                         extern void rt_thread_handle_sig(rt_bool_t clean_state);
 502:rt-thread/src/scheduler.c **** 
 503:rt-thread/src/scheduler.c ****                         rt_current_thread->stat &= ~RT_THREAD_STAT_SIGNAL_PENDING;
 504:rt-thread/src/scheduler.c **** 
ARM GAS  /tmp/cc8v2nhT.s 			page 15


 505:rt-thread/src/scheduler.c ****                         rt_hw_interrupt_enable(level);
 506:rt-thread/src/scheduler.c **** 
 507:rt-thread/src/scheduler.c ****                         /* check signal status */
 508:rt-thread/src/scheduler.c ****                         rt_thread_handle_sig(RT_TRUE);
 509:rt-thread/src/scheduler.c ****                     }
 510:rt-thread/src/scheduler.c ****                     else
 511:rt-thread/src/scheduler.c ****                     {
 512:rt-thread/src/scheduler.c ****                         rt_hw_interrupt_enable(level);
 513:rt-thread/src/scheduler.c ****                     }
 514:rt-thread/src/scheduler.c **** #endif
 515:rt-thread/src/scheduler.c ****                     goto __exit;
 516:rt-thread/src/scheduler.c ****                 }
 517:rt-thread/src/scheduler.c ****                 else
 518:rt-thread/src/scheduler.c ****                 {
 519:rt-thread/src/scheduler.c ****                     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));
 520:rt-thread/src/scheduler.c **** 
 521:rt-thread/src/scheduler.c ****                     rt_hw_context_switch_interrupt((rt_ubase_t)&from_thread->sp,
 522:rt-thread/src/scheduler.c ****                             (rt_ubase_t)&to_thread->sp);
 523:rt-thread/src/scheduler.c ****                 }
 524:rt-thread/src/scheduler.c ****             }
 525:rt-thread/src/scheduler.c ****             else
 526:rt-thread/src/scheduler.c ****             {
 527:rt-thread/src/scheduler.c ****                 rt_schedule_remove_thread(rt_current_thread);
 528:rt-thread/src/scheduler.c ****                 rt_current_thread->stat = RT_THREAD_RUNNING | (rt_current_thread->stat & ~RT_THREAD
 529:rt-thread/src/scheduler.c ****             }
 530:rt-thread/src/scheduler.c ****         }
 531:rt-thread/src/scheduler.c ****     }
 532:rt-thread/src/scheduler.c **** 
 533:rt-thread/src/scheduler.c ****     /* enable interrupt */
 534:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 535:rt-thread/src/scheduler.c **** 
 536:rt-thread/src/scheduler.c **** __exit:
 537:rt-thread/src/scheduler.c ****     return;
 538:rt-thread/src/scheduler.c **** }
 539:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 540:rt-thread/src/scheduler.c **** 
 541:rt-thread/src/scheduler.c **** /**
 542:rt-thread/src/scheduler.c ****  * This function checks if a scheduling is needed after IRQ context. If yes,
 543:rt-thread/src/scheduler.c ****  * it will select one thread with the highest priority level, and then switch
 544:rt-thread/src/scheduler.c ****  * to it.
 545:rt-thread/src/scheduler.c ****  */
 546:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 547:rt-thread/src/scheduler.c **** void rt_scheduler_do_irq_switch(void *context)
 548:rt-thread/src/scheduler.c **** {
 549:rt-thread/src/scheduler.c ****     int cpu_id;
 550:rt-thread/src/scheduler.c ****     rt_base_t level;
 551:rt-thread/src/scheduler.c ****     struct rt_cpu* pcpu;
 552:rt-thread/src/scheduler.c ****     struct rt_thread *to_thread;
 553:rt-thread/src/scheduler.c ****     struct rt_thread *current_thread;
 554:rt-thread/src/scheduler.c **** 
 555:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 556:rt-thread/src/scheduler.c **** 
 557:rt-thread/src/scheduler.c ****     cpu_id = rt_hw_cpu_id();
 558:rt-thread/src/scheduler.c ****     pcpu   = rt_cpu_index(cpu_id);
 559:rt-thread/src/scheduler.c ****     current_thread = pcpu->current_thread;
 560:rt-thread/src/scheduler.c **** 
 561:rt-thread/src/scheduler.c **** #ifdef RT_USING_SIGNALS
ARM GAS  /tmp/cc8v2nhT.s 			page 16


 562:rt-thread/src/scheduler.c ****     if ((current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND)
 563:rt-thread/src/scheduler.c ****     {
 564:rt-thread/src/scheduler.c ****         /* if current_thread signal is in pending */
 565:rt-thread/src/scheduler.c **** 
 566:rt-thread/src/scheduler.c ****         if ((current_thread->stat & RT_THREAD_STAT_SIGNAL_MASK) & RT_THREAD_STAT_SIGNAL_PENDING)
 567:rt-thread/src/scheduler.c ****         {
 568:rt-thread/src/scheduler.c ****             rt_thread_resume(current_thread);
 569:rt-thread/src/scheduler.c ****         }
 570:rt-thread/src/scheduler.c ****     }
 571:rt-thread/src/scheduler.c **** #endif
 572:rt-thread/src/scheduler.c **** 
 573:rt-thread/src/scheduler.c ****     if (pcpu->irq_switch_flag == 0)
 574:rt-thread/src/scheduler.c ****     {
 575:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 576:rt-thread/src/scheduler.c ****         return;
 577:rt-thread/src/scheduler.c ****     }
 578:rt-thread/src/scheduler.c **** 
 579:rt-thread/src/scheduler.c ****     if (current_thread->scheduler_lock_nest == 1 && pcpu->irq_nest == 0)
 580:rt-thread/src/scheduler.c ****     {
 581:rt-thread/src/scheduler.c ****         rt_ubase_t highest_ready_priority;
 582:rt-thread/src/scheduler.c **** 
 583:rt-thread/src/scheduler.c ****         /* clear irq switch flag */
 584:rt-thread/src/scheduler.c ****         pcpu->irq_switch_flag = 0;
 585:rt-thread/src/scheduler.c **** 
 586:rt-thread/src/scheduler.c ****         if (rt_thread_ready_priority_group != 0 || pcpu->priority_group != 0)
 587:rt-thread/src/scheduler.c ****         {
 588:rt-thread/src/scheduler.c ****             to_thread = _get_highest_priority_thread(&highest_ready_priority);
 589:rt-thread/src/scheduler.c ****             current_thread->oncpu = RT_CPU_DETACHED;
 590:rt-thread/src/scheduler.c ****             if ((current_thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_RUNNING)
 591:rt-thread/src/scheduler.c ****             {
 592:rt-thread/src/scheduler.c ****                 if (current_thread->current_priority < highest_ready_priority)
 593:rt-thread/src/scheduler.c ****                 {
 594:rt-thread/src/scheduler.c ****                     to_thread = current_thread;
 595:rt-thread/src/scheduler.c ****                 }
 596:rt-thread/src/scheduler.c ****                 else if (current_thread->current_priority == highest_ready_priority && (current_thr
 597:rt-thread/src/scheduler.c ****                 {
 598:rt-thread/src/scheduler.c ****                     to_thread = current_thread;
 599:rt-thread/src/scheduler.c ****                 }
 600:rt-thread/src/scheduler.c ****                 else
 601:rt-thread/src/scheduler.c ****                 {
 602:rt-thread/src/scheduler.c ****                     current_thread->stat &= ~RT_THREAD_STAT_YIELD_MASK;
 603:rt-thread/src/scheduler.c ****                     rt_schedule_insert_thread(current_thread);
 604:rt-thread/src/scheduler.c ****                 }
 605:rt-thread/src/scheduler.c ****             }
 606:rt-thread/src/scheduler.c ****             to_thread->oncpu = cpu_id;
 607:rt-thread/src/scheduler.c ****             if (to_thread != current_thread)
 608:rt-thread/src/scheduler.c ****             {
 609:rt-thread/src/scheduler.c ****                 /* if the destination thread is not the same as current thread */
 610:rt-thread/src/scheduler.c **** 
 611:rt-thread/src/scheduler.c ****                 pcpu->current_priority = (rt_uint8_t)highest_ready_priority;
 612:rt-thread/src/scheduler.c **** 
 613:rt-thread/src/scheduler.c ****                 RT_OBJECT_HOOK_CALL(rt_scheduler_hook, (current_thread, to_thread));
 614:rt-thread/src/scheduler.c **** 
 615:rt-thread/src/scheduler.c ****                 rt_schedule_remove_thread(to_thread);
 616:rt-thread/src/scheduler.c ****                 to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
 617:rt-thread/src/scheduler.c **** 
 618:rt-thread/src/scheduler.c **** #ifdef RT_USING_OVERFLOW_CHECK
ARM GAS  /tmp/cc8v2nhT.s 			page 17


 619:rt-thread/src/scheduler.c ****                 _rt_scheduler_stack_check(to_thread);
 620:rt-thread/src/scheduler.c **** #endif
 621:rt-thread/src/scheduler.c ****                 RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("switch in interrupt\n"));
 622:rt-thread/src/scheduler.c **** 
 623:rt-thread/src/scheduler.c ****                 current_thread->cpus_lock_nest--;
 624:rt-thread/src/scheduler.c ****                 current_thread->scheduler_lock_nest--;
 625:rt-thread/src/scheduler.c **** 
 626:rt-thread/src/scheduler.c ****                 rt_hw_context_switch_interrupt(context, (rt_ubase_t)&current_thread->sp,
 627:rt-thread/src/scheduler.c ****                         (rt_ubase_t)&to_thread->sp, to_thread);
 628:rt-thread/src/scheduler.c ****             }
 629:rt-thread/src/scheduler.c ****         }
 630:rt-thread/src/scheduler.c ****     }
 631:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 632:rt-thread/src/scheduler.c **** }
 633:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 634:rt-thread/src/scheduler.c **** 
 635:rt-thread/src/scheduler.c **** /*
 636:rt-thread/src/scheduler.c ****  * This function will insert a thread to system ready queue. The state of
 637:rt-thread/src/scheduler.c ****  * thread will be set as READY and remove from suspend queue.
 638:rt-thread/src/scheduler.c ****  *
 639:rt-thread/src/scheduler.c ****  * @param thread the thread to be inserted
 640:rt-thread/src/scheduler.c ****  * @note Please do not invoke this function in user application.
 641:rt-thread/src/scheduler.c ****  */
 642:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 643:rt-thread/src/scheduler.c **** void rt_schedule_insert_thread(struct rt_thread *thread)
 644:rt-thread/src/scheduler.c **** {
 645:rt-thread/src/scheduler.c ****     int cpu_id;
 646:rt-thread/src/scheduler.c ****     int bind_cpu;
 647:rt-thread/src/scheduler.c ****     rt_uint32_t cpu_mask;
 648:rt-thread/src/scheduler.c ****     register rt_base_t level;
 649:rt-thread/src/scheduler.c **** 
 650:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
 651:rt-thread/src/scheduler.c **** 
 652:rt-thread/src/scheduler.c ****     /* disable interrupt */
 653:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 654:rt-thread/src/scheduler.c **** 
 655:rt-thread/src/scheduler.c ****     /* it should be RUNNING thread */
 656:rt-thread/src/scheduler.c ****     if (thread->oncpu != RT_CPU_DETACHED)
 657:rt-thread/src/scheduler.c ****     {
 658:rt-thread/src/scheduler.c ****         thread->stat = RT_THREAD_RUNNING | (thread->stat & ~RT_THREAD_STAT_MASK);
 659:rt-thread/src/scheduler.c ****         goto __exit;
 660:rt-thread/src/scheduler.c ****     }
 661:rt-thread/src/scheduler.c **** 
 662:rt-thread/src/scheduler.c ****     /* READY thread, insert to ready queue */
 663:rt-thread/src/scheduler.c ****     thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
 664:rt-thread/src/scheduler.c **** 
 665:rt-thread/src/scheduler.c ****     cpu_id   = rt_hw_cpu_id();
 666:rt-thread/src/scheduler.c ****     bind_cpu = thread->bind_cpu ;
 667:rt-thread/src/scheduler.c **** 
 668:rt-thread/src/scheduler.c ****     /* insert thread to ready list */
 669:rt-thread/src/scheduler.c ****     if (bind_cpu == RT_CPUS_NR)
 670:rt-thread/src/scheduler.c ****     {
 671:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 672:rt-thread/src/scheduler.c ****         rt_thread_ready_table[thread->number] |= thread->high_mask;
 673:rt-thread/src/scheduler.c **** #endif
 674:rt-thread/src/scheduler.c ****         rt_thread_ready_priority_group |= thread->number_mask;
 675:rt-thread/src/scheduler.c **** 
ARM GAS  /tmp/cc8v2nhT.s 			page 18


 676:rt-thread/src/scheduler.c ****         rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 677:rt-thread/src/scheduler.c ****                               &(thread->tlist));
 678:rt-thread/src/scheduler.c ****         cpu_mask = RT_CPU_MASK ^ (1 << cpu_id);
 679:rt-thread/src/scheduler.c ****         rt_hw_ipi_send(RT_SCHEDULE_IPI, cpu_mask);
 680:rt-thread/src/scheduler.c ****     }
 681:rt-thread/src/scheduler.c ****     else
 682:rt-thread/src/scheduler.c ****     {
 683:rt-thread/src/scheduler.c ****         struct rt_cpu *pcpu = rt_cpu_index(bind_cpu);
 684:rt-thread/src/scheduler.c **** 
 685:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 686:rt-thread/src/scheduler.c ****         pcpu->ready_table[thread->number] |= thread->high_mask;
 687:rt-thread/src/scheduler.c **** #endif
 688:rt-thread/src/scheduler.c ****         pcpu->priority_group |= thread->number_mask;
 689:rt-thread/src/scheduler.c **** 
 690:rt-thread/src/scheduler.c ****         rt_list_insert_before(&(rt_cpu_index(bind_cpu)->priority_table[thread->current_priority]),
 691:rt-thread/src/scheduler.c ****                               &(thread->tlist));
 692:rt-thread/src/scheduler.c **** 
 693:rt-thread/src/scheduler.c ****         if (cpu_id != bind_cpu)
 694:rt-thread/src/scheduler.c ****         {
 695:rt-thread/src/scheduler.c ****             cpu_mask = 1 << bind_cpu;
 696:rt-thread/src/scheduler.c ****             rt_hw_ipi_send(RT_SCHEDULE_IPI, cpu_mask);
 697:rt-thread/src/scheduler.c ****         }
 698:rt-thread/src/scheduler.c ****     }
 699:rt-thread/src/scheduler.c **** 
 700:rt-thread/src/scheduler.c ****     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("insert thread[%.*s], the priority: %d\n",
 701:rt-thread/src/scheduler.c ****                                       RT_NAME_MAX, thread->name, thread->current_priority));
 702:rt-thread/src/scheduler.c **** 
 703:rt-thread/src/scheduler.c **** __exit:
 704:rt-thread/src/scheduler.c ****     /* enable interrupt */
 705:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 706:rt-thread/src/scheduler.c **** }
 707:rt-thread/src/scheduler.c **** #else
 708:rt-thread/src/scheduler.c **** void rt_schedule_insert_thread(struct rt_thread *thread)
 709:rt-thread/src/scheduler.c **** {
 237              		.loc 1 709 0
 238              		.cfi_startproc
 239              		@ args = 0, pretend = 0, frame = 0
 240              		@ frame_needed = 0, uses_anonymous_args = 0
 241              	.LVL24:
 242 0000 10B5     		push	{r4, lr}
 243              	.LCFI2:
 244              		.cfi_def_cfa_offset 8
 245              		.cfi_offset 4, -8
 246              		.cfi_offset 14, -4
 710:rt-thread/src/scheduler.c ****     register rt_base_t temp;
 711:rt-thread/src/scheduler.c **** 
 712:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
 247              		.loc 1 712 0
 248 0002 0446     		mov	r4, r0
 249 0004 10B3     		cbz	r0, .L27
 250              	.LVL25:
 251              	.L23:
 713:rt-thread/src/scheduler.c **** 
 714:rt-thread/src/scheduler.c ****     /* disable interrupt */
 715:rt-thread/src/scheduler.c ****     temp = rt_hw_interrupt_disable();
 252              		.loc 1 715 0
 253 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
ARM GAS  /tmp/cc8v2nhT.s 			page 19


 254              	.LVL26:
 716:rt-thread/src/scheduler.c **** 
 717:rt-thread/src/scheduler.c ****     /* it's current thread, it should be RUNNING thread */
 718:rt-thread/src/scheduler.c ****     if (thread == rt_current_thread)
 255              		.loc 1 718 0
 256 000a 184B     		ldr	r3, .L29
 257 000c 1B68     		ldr	r3, [r3]
 258 000e 9C42     		cmp	r4, r3
 259 0010 23D0     		beq	.L28
 719:rt-thread/src/scheduler.c ****     {
 720:rt-thread/src/scheduler.c ****         thread->stat = RT_THREAD_RUNNING | (thread->stat & ~RT_THREAD_STAT_MASK);
 721:rt-thread/src/scheduler.c ****         goto __exit;
 722:rt-thread/src/scheduler.c ****     }
 723:rt-thread/src/scheduler.c **** 
 724:rt-thread/src/scheduler.c ****     /* READY thread, insert to ready queue */
 725:rt-thread/src/scheduler.c ****     thread->stat = RT_THREAD_READY | (thread->stat & ~RT_THREAD_STAT_MASK);
 260              		.loc 1 725 0
 261 0012 94F93430 		ldrsb	r3, [r4, #52]
 262 0016 23F00703 		bic	r3, r3, #7
 263 001a 43F00103 		orr	r3, r3, #1
 264 001e 84F83430 		strb	r3, [r4, #52]
 726:rt-thread/src/scheduler.c ****     /* insert thread to ready list */
 727:rt-thread/src/scheduler.c ****     rt_list_insert_before(&(rt_thread_priority_table[thread->current_priority]),
 265              		.loc 1 727 0
 266 0022 94F83520 		ldrb	r2, [r4, #53]	@ zero_extendqisi2
 267 0026 124B     		ldr	r3, .L29+4
 268 0028 03EBC203 		add	r3, r3, r2, lsl #3
 269 002c 04F11402 		add	r2, r4, #20
 270              	.LVL27:
 271              	.LBB17:
 272              	.LBB18:
  50:rt-thread/include/rtservice.h **** }
  51:rt-thread/include/rtservice.h **** 
  52:rt-thread/include/rtservice.h **** /**
  53:rt-thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt-thread/include/rtservice.h ****  *
  55:rt-thread/include/rtservice.h ****  * @param l list to insert it
  56:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt-thread/include/rtservice.h ****  */
  58:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rt-thread/include/rtservice.h **** {
  60:rt-thread/include/rtservice.h ****     l->next->prev = n;
  61:rt-thread/include/rtservice.h ****     n->next = l->next;
  62:rt-thread/include/rtservice.h **** 
  63:rt-thread/include/rtservice.h ****     l->next = n;
  64:rt-thread/include/rtservice.h ****     n->prev = l;
  65:rt-thread/include/rtservice.h **** }
  66:rt-thread/include/rtservice.h **** 
  67:rt-thread/include/rtservice.h **** /**
  68:rt-thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt-thread/include/rtservice.h ****  *
  70:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt-thread/include/rtservice.h ****  * @param l list to insert it
  72:rt-thread/include/rtservice.h ****  */
  73:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt-thread/include/rtservice.h **** {
  75:rt-thread/include/rtservice.h ****     l->prev->next = n;
ARM GAS  /tmp/cc8v2nhT.s 			page 20


 273              		.loc 2 75 0
 274 0030 5968     		ldr	r1, [r3, #4]
 275 0032 0A60     		str	r2, [r1]
  76:rt-thread/include/rtservice.h ****     n->prev = l->prev;
 276              		.loc 2 76 0
 277 0034 5968     		ldr	r1, [r3, #4]
 278 0036 A161     		str	r1, [r4, #24]
  77:rt-thread/include/rtservice.h **** 
  78:rt-thread/include/rtservice.h ****     l->prev = n;
 279              		.loc 2 78 0
 280 0038 5A60     		str	r2, [r3, #4]
  79:rt-thread/include/rtservice.h ****     n->next = l;
 281              		.loc 2 79 0
 282 003a 6361     		str	r3, [r4, #20]
 283              	.LVL28:
 284              	.LBE18:
 285              	.LBE17:
 728:rt-thread/src/scheduler.c ****                           &(thread->tlist));
 729:rt-thread/src/scheduler.c **** 
 730:rt-thread/src/scheduler.c ****     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("insert thread[%.*s], the priority: %d\n",
 731:rt-thread/src/scheduler.c ****                                       RT_NAME_MAX, thread->name, thread->current_priority));
 732:rt-thread/src/scheduler.c **** 
 733:rt-thread/src/scheduler.c ****     /* set priority mask */
 734:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 735:rt-thread/src/scheduler.c ****     rt_thread_ready_table[thread->number] |= thread->high_mask;
 736:rt-thread/src/scheduler.c **** #endif
 737:rt-thread/src/scheduler.c ****     rt_thread_ready_priority_group |= thread->number_mask;
 286              		.loc 1 737 0
 287 003c A16B     		ldr	r1, [r4, #56]
 288 003e 0D4A     		ldr	r2, .L29+8
 289 0040 1368     		ldr	r3, [r2]
 290 0042 0B43     		orrs	r3, r3, r1
 291 0044 1360     		str	r3, [r2]
 292              	.L25:
 738:rt-thread/src/scheduler.c **** 
 739:rt-thread/src/scheduler.c **** __exit:
 740:rt-thread/src/scheduler.c ****     /* enable interrupt */
 741:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(temp);
 293              		.loc 1 741 0
 294 0046 FFF7FEFF 		bl	rt_hw_interrupt_enable
 295              	.LVL29:
 296 004a 10BD     		pop	{r4, pc}
 297              	.LVL30:
 298              	.L27:
 712:rt-thread/src/scheduler.c **** 
 299              		.loc 1 712 0 discriminator 1
 300 004c 4FF43272 		mov	r2, #712
 301 0050 0949     		ldr	r1, .L29+12
 302 0052 0A48     		ldr	r0, .L29+16
 303              	.LVL31:
 304 0054 FFF7FEFF 		bl	rt_assert_handler
 305              	.LVL32:
 306 0058 D5E7     		b	.L23
 307              	.LVL33:
 308              	.L28:
 720:rt-thread/src/scheduler.c ****         goto __exit;
 309              		.loc 1 720 0
ARM GAS  /tmp/cc8v2nhT.s 			page 21


 310 005a 94F93430 		ldrsb	r3, [r4, #52]
 311 005e 23F00703 		bic	r3, r3, #7
 312 0062 43F00303 		orr	r3, r3, #3
 313 0066 84F83430 		strb	r3, [r4, #52]
 721:rt-thread/src/scheduler.c ****     }
 314              		.loc 1 721 0
 315 006a ECE7     		b	.L25
 316              	.L30:
 317              		.align	2
 318              	.L29:
 319 006c 00000000 		.word	rt_current_thread
 320 0070 00000000 		.word	rt_thread_priority_table
 321 0074 00000000 		.word	rt_thread_ready_priority_group
 322 0078 00000000 		.word	.LANCHOR2
 323 007c 00000000 		.word	.LC0
 324              		.cfi_endproc
 325              	.LFE20:
 327              		.section	.text.rt_schedule_remove_thread,"ax",%progbits
 328              		.align	1
 329              		.global	rt_schedule_remove_thread
 330              		.syntax unified
 331              		.thumb
 332              		.thumb_func
 333              		.fpu fpv4-sp-d16
 335              	rt_schedule_remove_thread:
 336              	.LFB21:
 742:rt-thread/src/scheduler.c **** }
 743:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 744:rt-thread/src/scheduler.c **** 
 745:rt-thread/src/scheduler.c **** /*
 746:rt-thread/src/scheduler.c ****  * This function will remove a thread from system ready queue.
 747:rt-thread/src/scheduler.c ****  *
 748:rt-thread/src/scheduler.c ****  * @param thread the thread to be removed
 749:rt-thread/src/scheduler.c ****  *
 750:rt-thread/src/scheduler.c ****  * @note Please do not invoke this function in user application.
 751:rt-thread/src/scheduler.c ****  */
 752:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 753:rt-thread/src/scheduler.c **** void rt_schedule_remove_thread(struct rt_thread *thread)
 754:rt-thread/src/scheduler.c **** {
 755:rt-thread/src/scheduler.c ****     register rt_base_t level;
 756:rt-thread/src/scheduler.c **** 
 757:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
 758:rt-thread/src/scheduler.c **** 
 759:rt-thread/src/scheduler.c ****     /* disable interrupt */
 760:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 761:rt-thread/src/scheduler.c **** 
 762:rt-thread/src/scheduler.c ****     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
 763:rt-thread/src/scheduler.c ****                                       RT_NAME_MAX, thread->name,
 764:rt-thread/src/scheduler.c ****                                       thread->current_priority));
 765:rt-thread/src/scheduler.c **** 
 766:rt-thread/src/scheduler.c ****     /* remove thread from ready list */
 767:rt-thread/src/scheduler.c ****     rt_list_remove(&(thread->tlist));
 768:rt-thread/src/scheduler.c ****     if (thread->bind_cpu == RT_CPUS_NR)
 769:rt-thread/src/scheduler.c ****     {
 770:rt-thread/src/scheduler.c ****         if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
 771:rt-thread/src/scheduler.c ****         {
 772:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
ARM GAS  /tmp/cc8v2nhT.s 			page 22


 773:rt-thread/src/scheduler.c ****             rt_thread_ready_table[thread->number] &= ~thread->high_mask;
 774:rt-thread/src/scheduler.c ****             if (rt_thread_ready_table[thread->number] == 0)
 775:rt-thread/src/scheduler.c ****             {
 776:rt-thread/src/scheduler.c ****                 rt_thread_ready_priority_group &= ~thread->number_mask;
 777:rt-thread/src/scheduler.c ****             }
 778:rt-thread/src/scheduler.c **** #else
 779:rt-thread/src/scheduler.c ****             rt_thread_ready_priority_group &= ~thread->number_mask;
 780:rt-thread/src/scheduler.c **** #endif
 781:rt-thread/src/scheduler.c ****         }
 782:rt-thread/src/scheduler.c ****     }
 783:rt-thread/src/scheduler.c ****     else
 784:rt-thread/src/scheduler.c ****     {
 785:rt-thread/src/scheduler.c ****         struct rt_cpu *pcpu = rt_cpu_index(thread->bind_cpu);
 786:rt-thread/src/scheduler.c **** 
 787:rt-thread/src/scheduler.c ****         if (rt_list_isempty(&(pcpu->priority_table[thread->current_priority])))
 788:rt-thread/src/scheduler.c ****         {
 789:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 790:rt-thread/src/scheduler.c ****             pcpu->ready_table[thread->number] &= ~thread->high_mask;
 791:rt-thread/src/scheduler.c ****             if (rt_thread_ready_table[thread->number] == 0)
 792:rt-thread/src/scheduler.c ****             {
 793:rt-thread/src/scheduler.c ****                 pcpu->priority_group &= ~thread->number_mask;
 794:rt-thread/src/scheduler.c ****             }
 795:rt-thread/src/scheduler.c **** #else
 796:rt-thread/src/scheduler.c ****             pcpu->priority_group &= ~thread->number_mask;
 797:rt-thread/src/scheduler.c **** #endif
 798:rt-thread/src/scheduler.c ****         }
 799:rt-thread/src/scheduler.c ****     }
 800:rt-thread/src/scheduler.c **** 
 801:rt-thread/src/scheduler.c ****     /* enable interrupt */
 802:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 803:rt-thread/src/scheduler.c **** }
 804:rt-thread/src/scheduler.c **** #else
 805:rt-thread/src/scheduler.c **** void rt_schedule_remove_thread(struct rt_thread *thread)
 806:rt-thread/src/scheduler.c **** {
 337              		.loc 1 806 0
 338              		.cfi_startproc
 339              		@ args = 0, pretend = 0, frame = 0
 340              		@ frame_needed = 0, uses_anonymous_args = 0
 341              	.LVL34:
 342 0000 10B5     		push	{r4, lr}
 343              	.LCFI3:
 344              		.cfi_def_cfa_offset 8
 345              		.cfi_offset 4, -8
 346              		.cfi_offset 14, -4
 807:rt-thread/src/scheduler.c ****     register rt_base_t level;
 808:rt-thread/src/scheduler.c **** 
 809:rt-thread/src/scheduler.c ****     RT_ASSERT(thread != RT_NULL);
 347              		.loc 1 809 0
 348 0002 0446     		mov	r4, r0
 349 0004 B8B1     		cbz	r0, .L35
 350              	.LVL35:
 351              	.L32:
 810:rt-thread/src/scheduler.c **** 
 811:rt-thread/src/scheduler.c ****     /* disable interrupt */
 812:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 352              		.loc 1 812 0
 353 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
ARM GAS  /tmp/cc8v2nhT.s 			page 23


 354              	.LVL36:
 813:rt-thread/src/scheduler.c **** 
 814:rt-thread/src/scheduler.c ****     RT_DEBUG_LOG(RT_DEBUG_SCHEDULER, ("remove thread[%.*s], the priority: %d\n",
 815:rt-thread/src/scheduler.c ****                                       RT_NAME_MAX, thread->name,
 816:rt-thread/src/scheduler.c ****                                       thread->current_priority));
 817:rt-thread/src/scheduler.c **** 
 818:rt-thread/src/scheduler.c ****     /* remove thread from ready list */
 819:rt-thread/src/scheduler.c ****     rt_list_remove(&(thread->tlist));
 355              		.loc 1 819 0
 356 000a 04F11403 		add	r3, r4, #20
 357              	.LBB19:
 358              	.LBB20:
  80:rt-thread/include/rtservice.h **** }
  81:rt-thread/include/rtservice.h **** 
  82:rt-thread/include/rtservice.h **** /**
  83:rt-thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt-thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt-thread/include/rtservice.h ****  */
  86:rt-thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rt-thread/include/rtservice.h **** {
  88:rt-thread/include/rtservice.h ****     n->next->prev = n->prev;
 359              		.loc 2 88 0
 360 000e 6269     		ldr	r2, [r4, #20]
 361 0010 A169     		ldr	r1, [r4, #24]
 362 0012 5160     		str	r1, [r2, #4]
  89:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 363              		.loc 2 89 0
 364 0014 A269     		ldr	r2, [r4, #24]
 365 0016 6169     		ldr	r1, [r4, #20]
 366 0018 1160     		str	r1, [r2]
  90:rt-thread/include/rtservice.h **** 
  91:rt-thread/include/rtservice.h ****     n->next = n->prev = n;
 367              		.loc 2 91 0
 368 001a A361     		str	r3, [r4, #24]
 369 001c 6361     		str	r3, [r4, #20]
 370              	.LBE20:
 371              	.LBE19:
 820:rt-thread/src/scheduler.c ****     if (rt_list_isempty(&(rt_thread_priority_table[thread->current_priority])))
 372              		.loc 1 820 0
 373 001e 94F83520 		ldrb	r2, [r4, #53]	@ zero_extendqisi2
 374 0022 0C4B     		ldr	r3, .L37
 375 0024 03EBC201 		add	r1, r3, r2, lsl #3
 376              	.LVL37:
 377              	.LBB21:
 378              	.LBB22:
  92:rt-thread/include/rtservice.h **** }
  93:rt-thread/include/rtservice.h **** 
  94:rt-thread/include/rtservice.h **** /**
  95:rt-thread/include/rtservice.h ****  * @brief tests whether a list is empty
  96:rt-thread/include/rtservice.h ****  * @param l the list to test.
  97:rt-thread/include/rtservice.h ****  */
  98:rt-thread/include/rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  99:rt-thread/include/rtservice.h **** {
 100:rt-thread/include/rtservice.h ****     return l->next == l;
 379              		.loc 2 100 0
 380 0028 53F83230 		ldr	r3, [r3, r2, lsl #3]
 381              	.LVL38:
ARM GAS  /tmp/cc8v2nhT.s 			page 24


 382              	.LBE22:
 383              	.LBE21:
 384              		.loc 1 820 0
 385 002c 9942     		cmp	r1, r3
 386 002e 09D0     		beq	.L36
 387              	.L33:
 821:rt-thread/src/scheduler.c ****     {
 822:rt-thread/src/scheduler.c **** #if RT_THREAD_PRIORITY_MAX > 32
 823:rt-thread/src/scheduler.c ****         rt_thread_ready_table[thread->number] &= ~thread->high_mask;
 824:rt-thread/src/scheduler.c ****         if (rt_thread_ready_table[thread->number] == 0)
 825:rt-thread/src/scheduler.c ****         {
 826:rt-thread/src/scheduler.c ****             rt_thread_ready_priority_group &= ~thread->number_mask;
 827:rt-thread/src/scheduler.c ****         }
 828:rt-thread/src/scheduler.c **** #else
 829:rt-thread/src/scheduler.c ****         rt_thread_ready_priority_group &= ~thread->number_mask;
 830:rt-thread/src/scheduler.c **** #endif
 831:rt-thread/src/scheduler.c ****     }
 832:rt-thread/src/scheduler.c **** 
 833:rt-thread/src/scheduler.c ****     /* enable interrupt */
 834:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 388              		.loc 1 834 0
 389 0030 FFF7FEFF 		bl	rt_hw_interrupt_enable
 390              	.LVL39:
 391 0034 10BD     		pop	{r4, pc}
 392              	.LVL40:
 393              	.L35:
 809:rt-thread/src/scheduler.c **** 
 394              		.loc 1 809 0 discriminator 1
 395 0036 40F22932 		movw	r2, #809
 396 003a 0749     		ldr	r1, .L37+4
 397 003c 0748     		ldr	r0, .L37+8
 398              	.LVL41:
 399 003e FFF7FEFF 		bl	rt_assert_handler
 400              	.LVL42:
 401 0042 E0E7     		b	.L32
 402              	.LVL43:
 403              	.L36:
 829:rt-thread/src/scheduler.c **** #endif
 404              		.loc 1 829 0
 405 0044 A16B     		ldr	r1, [r4, #56]
 406 0046 064A     		ldr	r2, .L37+12
 407 0048 1368     		ldr	r3, [r2]
 408 004a 23EA0103 		bic	r3, r3, r1
 409 004e 1360     		str	r3, [r2]
 410 0050 EEE7     		b	.L33
 411              	.L38:
 412 0052 00BF     		.align	2
 413              	.L37:
 414 0054 00000000 		.word	rt_thread_priority_table
 415 0058 00000000 		.word	.LANCHOR3
 416 005c 00000000 		.word	.LC0
 417 0060 00000000 		.word	rt_thread_ready_priority_group
 418              		.cfi_endproc
 419              	.LFE21:
 421              		.section	.text.rt_system_scheduler_start,"ax",%progbits
 422              		.align	1
 423              		.global	rt_system_scheduler_start
ARM GAS  /tmp/cc8v2nhT.s 			page 25


 424              		.syntax unified
 425              		.thumb
 426              		.thumb_func
 427              		.fpu fpv4-sp-d16
 429              	rt_system_scheduler_start:
 430              	.LFB18:
 247:rt-thread/src/scheduler.c ****     register struct rt_thread *to_thread;
 431              		.loc 1 247 0
 432              		.cfi_startproc
 433              		@ args = 0, pretend = 0, frame = 8
 434              		@ frame_needed = 0, uses_anonymous_args = 0
 435 0000 10B5     		push	{r4, lr}
 436              	.LCFI4:
 437              		.cfi_def_cfa_offset 8
 438              		.cfi_offset 4, -8
 439              		.cfi_offset 14, -4
 440 0002 82B0     		sub	sp, sp, #8
 441              	.LCFI5:
 442              		.cfi_def_cfa_offset 16
 251:rt-thread/src/scheduler.c **** 
 443              		.loc 1 251 0
 444 0004 01A8     		add	r0, sp, #4
 445 0006 FFF7FEFF 		bl	_get_highest_priority_thread
 446              	.LVL44:
 447 000a 0446     		mov	r4, r0
 448              	.LVL45:
 256:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 449              		.loc 1 256 0
 450 000c 064B     		ldr	r3, .L41
 451 000e 1860     		str	r0, [r3]
 259:rt-thread/src/scheduler.c ****     to_thread->stat = RT_THREAD_RUNNING;
 452              		.loc 1 259 0
 453 0010 FFF7FEFF 		bl	rt_schedule_remove_thread
 454              	.LVL46:
 260:rt-thread/src/scheduler.c **** 
 455              		.loc 1 260 0
 456 0014 0323     		movs	r3, #3
 457 0016 84F83430 		strb	r3, [r4, #52]
 266:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 458              		.loc 1 266 0
 459 001a 04F11C00 		add	r0, r4, #28
 460 001e FFF7FEFF 		bl	rt_hw_context_switch_to
 461              	.LVL47:
 270:rt-thread/src/scheduler.c **** 
 462              		.loc 1 270 0
 463 0022 02B0     		add	sp, sp, #8
 464              	.LCFI6:
 465              		.cfi_def_cfa_offset 8
 466              		@ sp needed
 467 0024 10BD     		pop	{r4, pc}
 468              	.LVL48:
 469              	.L42:
 470 0026 00BF     		.align	2
 471              	.L41:
 472 0028 00000000 		.word	rt_current_thread
 473              		.cfi_endproc
 474              	.LFE18:
ARM GAS  /tmp/cc8v2nhT.s 			page 26


 476              		.section	.text.rt_schedule,"ax",%progbits
 477              		.align	1
 478              		.global	rt_schedule
 479              		.syntax unified
 480              		.thumb
 481              		.thumb_func
 482              		.fpu fpv4-sp-d16
 484              	rt_schedule:
 485              	.LFB19:
 419:rt-thread/src/scheduler.c ****     rt_base_t level;
 486              		.loc 1 419 0
 487              		.cfi_startproc
 488              		@ args = 0, pretend = 0, frame = 8
 489              		@ frame_needed = 0, uses_anonymous_args = 0
 490 0000 70B5     		push	{r4, r5, r6, lr}
 491              	.LCFI7:
 492              		.cfi_def_cfa_offset 16
 493              		.cfi_offset 4, -16
 494              		.cfi_offset 5, -12
 495              		.cfi_offset 6, -8
 496              		.cfi_offset 14, -4
 497 0002 82B0     		sub	sp, sp, #8
 498              	.LCFI8:
 499              		.cfi_def_cfa_offset 24
 425:rt-thread/src/scheduler.c **** 
 500              		.loc 1 425 0
 501 0004 FFF7FEFF 		bl	rt_hw_interrupt_disable
 502              	.LVL49:
 503 0008 0446     		mov	r4, r0
 504              	.LVL50:
 428:rt-thread/src/scheduler.c ****     {
 505              		.loc 1 428 0
 506 000a 354B     		ldr	r3, .L61
 507 000c B3F90030 		ldrsh	r3, [r3]
 508 0010 13B9     		cbnz	r3, .L44
 509              	.LBB23:
 432:rt-thread/src/scheduler.c ****         {
 510              		.loc 1 432 0
 511 0012 344B     		ldr	r3, .L61+4
 512 0014 1B68     		ldr	r3, [r3]
 513 0016 23B9     		cbnz	r3, .L56
 514              	.LVL51:
 515              	.L44:
 516              	.LBE23:
 534:rt-thread/src/scheduler.c **** 
 517              		.loc 1 534 0
 518 0018 2046     		mov	r0, r4
 519 001a FFF7FEFF 		bl	rt_hw_interrupt_enable
 520              	.LVL52:
 521              	.L51:
 522              	.L43:
 538:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 523              		.loc 1 538 0
 524 001e 02B0     		add	sp, sp, #8
 525              	.LCFI9:
 526              		.cfi_remember_state
 527              		.cfi_def_cfa_offset 16
ARM GAS  /tmp/cc8v2nhT.s 			page 27


 528              		@ sp needed
 529 0020 70BD     		pop	{r4, r5, r6, pc}
 530              	.LVL53:
 531              	.L56:
 532              	.LCFI10:
 533              		.cfi_restore_state
 534              	.LBB26:
 535              	.LBB24:
 437:rt-thread/src/scheduler.c **** 
 536              		.loc 1 437 0
 537 0022 01A8     		add	r0, sp, #4
 538              	.LVL54:
 539 0024 FFF7FEFF 		bl	_get_highest_priority_thread
 540              	.LVL55:
 541 0028 0546     		mov	r5, r0
 542              	.LVL56:
 439:rt-thread/src/scheduler.c ****             {
 543              		.loc 1 439 0
 544 002a 2F4B     		ldr	r3, .L61+8
 545 002c 1E68     		ldr	r6, [r3]
 546 002e 96F83430 		ldrb	r3, [r6, #52]	@ zero_extendqisi2
 547 0032 03F00702 		and	r2, r3, #7
 548 0036 032A     		cmp	r2, #3
 549 0038 21D0     		beq	.L57
 435:rt-thread/src/scheduler.c **** 
 550              		.loc 1 435 0
 551 003a 0023     		movs	r3, #0
 552              	.LVL57:
 553              	.L46:
 456:rt-thread/src/scheduler.c ****             {
 554              		.loc 1 456 0
 555 003c B542     		cmp	r5, r6
 556 003e 41D0     		beq	.L48
 459:rt-thread/src/scheduler.c ****                 from_thread         = rt_current_thread;
 557              		.loc 1 459 0
 558 0040 9DF80410 		ldrb	r1, [sp, #4]	@ zero_extendqisi2
 559 0044 294A     		ldr	r2, .L61+12
 560 0046 1170     		strb	r1, [r2]
 561              	.LVL58:
 461:rt-thread/src/scheduler.c **** 
 562              		.loc 1 461 0
 563 0048 274A     		ldr	r2, .L61+8
 564 004a 1560     		str	r5, [r2]
 465:rt-thread/src/scheduler.c ****                 {
 565              		.loc 1 465 0
 566 004c 63BB     		cbnz	r3, .L58
 567              	.LVL59:
 568              	.L49:
 470:rt-thread/src/scheduler.c ****                 to_thread->stat = RT_THREAD_RUNNING | (to_thread->stat & ~RT_THREAD_STAT_MASK);
 569              		.loc 1 470 0
 570 004e 2846     		mov	r0, r5
 571 0050 FFF7FEFF 		bl	rt_schedule_remove_thread
 572              	.LVL60:
 471:rt-thread/src/scheduler.c **** 
 573              		.loc 1 471 0
 574 0054 95F93430 		ldrsb	r3, [r5, #52]
 575 0058 23F00703 		bic	r3, r3, #7
ARM GAS  /tmp/cc8v2nhT.s 			page 28


 576 005c 43F00303 		orr	r3, r3, #3
 577 0060 85F83430 		strb	r3, [r5, #52]
 483:rt-thread/src/scheduler.c **** #endif
 578              		.loc 1 483 0
 579 0064 2846     		mov	r0, r5
 580 0066 FFF7FEFF 		bl	_rt_scheduler_stack_check
 581              	.LVL61:
 486:rt-thread/src/scheduler.c ****                 {
 582              		.loc 1 486 0
 583 006a 214B     		ldr	r3, .L61+16
 584 006c 1B78     		ldrb	r3, [r3]	@ zero_extendqisi2
 585 006e FBB1     		cbz	r3, .L59
 521:rt-thread/src/scheduler.c ****                             (rt_ubase_t)&to_thread->sp);
 586              		.loc 1 521 0
 587 0070 05F11C01 		add	r1, r5, #28
 588 0074 06F11C00 		add	r0, r6, #28
 589 0078 FFF7FEFF 		bl	rt_hw_context_switch_interrupt
 590              	.LVL62:
 591 007c CCE7     		b	.L44
 592              	.LVL63:
 593              	.L57:
 441:rt-thread/src/scheduler.c ****                 {
 594              		.loc 1 441 0
 595 007e 96F83510 		ldrb	r1, [r6, #53]	@ zero_extendqisi2
 596 0082 019A     		ldr	r2, [sp, #4]
 597 0084 9142     		cmp	r1, r2
 598 0086 0CD3     		bcc	.L53
 445:rt-thread/src/scheduler.c ****                 {
 599              		.loc 1 445 0
 600 0088 05D0     		beq	.L60
 601              	.L47:
 451:rt-thread/src/scheduler.c ****                     need_insert_from_thread = 1;
 602              		.loc 1 451 0
 603 008a 23F00803 		bic	r3, r3, #8
 604 008e 86F83430 		strb	r3, [r6, #52]
 605              	.LVL64:
 452:rt-thread/src/scheduler.c ****                 }
 606              		.loc 1 452 0
 607 0092 0123     		movs	r3, #1
 608 0094 D2E7     		b	.L46
 609              	.LVL65:
 610              	.L60:
 445:rt-thread/src/scheduler.c ****                 {
 611              		.loc 1 445 0 discriminator 1
 612 0096 13F0080F 		tst	r3, #8
 613 009a F6D1     		bne	.L47
 447:rt-thread/src/scheduler.c ****                 }
 614              		.loc 1 447 0
 615 009c 3546     		mov	r5, r6
 435:rt-thread/src/scheduler.c **** 
 616              		.loc 1 435 0
 617 009e 0023     		movs	r3, #0
 618 00a0 CCE7     		b	.L46
 619              	.L53:
 443:rt-thread/src/scheduler.c ****                 }
 620              		.loc 1 443 0
 621 00a2 3546     		mov	r5, r6
ARM GAS  /tmp/cc8v2nhT.s 			page 29


 435:rt-thread/src/scheduler.c **** 
 622              		.loc 1 435 0
 623 00a4 0023     		movs	r3, #0
 624 00a6 C9E7     		b	.L46
 625              	.LVL66:
 626              	.L58:
 467:rt-thread/src/scheduler.c ****                 }
 627              		.loc 1 467 0
 628 00a8 3046     		mov	r0, r6
 629 00aa FFF7FEFF 		bl	rt_schedule_insert_thread
 630              	.LVL67:
 631 00ae CEE7     		b	.L49
 632              	.L59:
 633              	.LBB25:
 490:rt-thread/src/scheduler.c ****                             (rt_ubase_t)&to_thread->sp);
 634              		.loc 1 490 0
 635 00b0 05F11C01 		add	r1, r5, #28
 636 00b4 06F11C00 		add	r0, r6, #28
 637 00b8 FFF7FEFF 		bl	rt_hw_context_switch
 638              	.LVL68:
 494:rt-thread/src/scheduler.c **** 
 639              		.loc 1 494 0
 640 00bc 2046     		mov	r0, r4
 641 00be FFF7FEFF 		bl	rt_hw_interrupt_enable
 642              	.LVL69:
 643 00c2 ACE7     		b	.L43
 644              	.LVL70:
 645              	.L48:
 646              	.LBE25:
 527:rt-thread/src/scheduler.c ****                 rt_current_thread->stat = RT_THREAD_RUNNING | (rt_current_thread->stat & ~RT_THREAD
 647              		.loc 1 527 0
 648 00c4 3046     		mov	r0, r6
 649 00c6 FFF7FEFF 		bl	rt_schedule_remove_thread
 650              	.LVL71:
 528:rt-thread/src/scheduler.c ****             }
 651              		.loc 1 528 0
 652 00ca 074B     		ldr	r3, .L61+8
 653 00cc 1A68     		ldr	r2, [r3]
 654 00ce 92F93430 		ldrsb	r3, [r2, #52]
 655 00d2 23F00703 		bic	r3, r3, #7
 656 00d6 43F00303 		orr	r3, r3, #3
 657 00da 82F83430 		strb	r3, [r2, #52]
 658 00de 9BE7     		b	.L44
 659              	.L62:
 660              		.align	2
 661              	.L61:
 662 00e0 00000000 		.word	.LANCHOR1
 663 00e4 00000000 		.word	rt_thread_ready_priority_group
 664 00e8 00000000 		.word	rt_current_thread
 665 00ec 00000000 		.word	rt_current_priority
 666 00f0 00000000 		.word	rt_interrupt_nest
 667              	.LBE24:
 668              	.LBE26:
 669              		.cfi_endproc
 670              	.LFE19:
 672              		.section	.text.rt_enter_critical,"ax",%progbits
 673              		.align	1
ARM GAS  /tmp/cc8v2nhT.s 			page 30


 674              		.global	rt_enter_critical
 675              		.syntax unified
 676              		.thumb
 677              		.thumb_func
 678              		.fpu fpv4-sp-d16
 680              	rt_enter_critical:
 681              	.LFB22:
 835:rt-thread/src/scheduler.c **** }
 836:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 837:rt-thread/src/scheduler.c **** 
 838:rt-thread/src/scheduler.c **** /**
 839:rt-thread/src/scheduler.c ****  * This function will lock the thread scheduler.
 840:rt-thread/src/scheduler.c ****  */
 841:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 842:rt-thread/src/scheduler.c **** void rt_enter_critical(void)
 843:rt-thread/src/scheduler.c **** {
 844:rt-thread/src/scheduler.c ****     register rt_base_t level;
 845:rt-thread/src/scheduler.c ****     struct rt_thread *current_thread;
 846:rt-thread/src/scheduler.c **** 
 847:rt-thread/src/scheduler.c ****     /* disable interrupt */
 848:rt-thread/src/scheduler.c ****     level = rt_hw_local_irq_disable();
 849:rt-thread/src/scheduler.c **** 
 850:rt-thread/src/scheduler.c ****     current_thread = rt_cpu_self()->current_thread;
 851:rt-thread/src/scheduler.c ****     if (!current_thread)
 852:rt-thread/src/scheduler.c ****     {
 853:rt-thread/src/scheduler.c ****         rt_hw_local_irq_enable(level);
 854:rt-thread/src/scheduler.c ****         return ;
 855:rt-thread/src/scheduler.c ****     }
 856:rt-thread/src/scheduler.c **** 
 857:rt-thread/src/scheduler.c ****     /*
 858:rt-thread/src/scheduler.c ****      * the maximal number of nest is RT_UINT16_MAX, which is big
 859:rt-thread/src/scheduler.c ****      * enough and does not check here
 860:rt-thread/src/scheduler.c ****      */
 861:rt-thread/src/scheduler.c **** 
 862:rt-thread/src/scheduler.c ****     /* lock scheduler for all cpus */
 863:rt-thread/src/scheduler.c ****     if (current_thread->critical_lock_nest == 0)
 864:rt-thread/src/scheduler.c ****     {
 865:rt-thread/src/scheduler.c ****         rt_hw_spin_lock(&_rt_critical_lock);
 866:rt-thread/src/scheduler.c ****     }
 867:rt-thread/src/scheduler.c **** 
 868:rt-thread/src/scheduler.c ****     /* critical for local cpu */
 869:rt-thread/src/scheduler.c ****     current_thread->critical_lock_nest ++;
 870:rt-thread/src/scheduler.c **** 
 871:rt-thread/src/scheduler.c ****     /* lock scheduler for local cpu */
 872:rt-thread/src/scheduler.c ****     current_thread->scheduler_lock_nest ++;
 873:rt-thread/src/scheduler.c **** 
 874:rt-thread/src/scheduler.c ****     /* enable interrupt */
 875:rt-thread/src/scheduler.c ****     rt_hw_local_irq_enable(level);
 876:rt-thread/src/scheduler.c **** }
 877:rt-thread/src/scheduler.c **** #else
 878:rt-thread/src/scheduler.c **** void rt_enter_critical(void)
 879:rt-thread/src/scheduler.c **** {
 682              		.loc 1 879 0
 683              		.cfi_startproc
 684              		@ args = 0, pretend = 0, frame = 0
 685              		@ frame_needed = 0, uses_anonymous_args = 0
 686 0000 08B5     		push	{r3, lr}
ARM GAS  /tmp/cc8v2nhT.s 			page 31


 687              	.LCFI11:
 688              		.cfi_def_cfa_offset 8
 689              		.cfi_offset 3, -8
 690              		.cfi_offset 14, -4
 880:rt-thread/src/scheduler.c ****     register rt_base_t level;
 881:rt-thread/src/scheduler.c **** 
 882:rt-thread/src/scheduler.c ****     /* disable interrupt */
 883:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 691              		.loc 1 883 0
 692 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
 693              	.LVL72:
 884:rt-thread/src/scheduler.c **** 
 885:rt-thread/src/scheduler.c ****     /*
 886:rt-thread/src/scheduler.c ****      * the maximal number of nest is RT_UINT16_MAX, which is big
 887:rt-thread/src/scheduler.c ****      * enough and does not check here
 888:rt-thread/src/scheduler.c ****      */
 889:rt-thread/src/scheduler.c ****     rt_scheduler_lock_nest ++;
 694              		.loc 1 889 0
 695 0006 034A     		ldr	r2, .L65
 696 0008 1388     		ldrh	r3, [r2]
 697 000a 0133     		adds	r3, r3, #1
 698 000c 1380     		strh	r3, [r2]	@ movhi
 890:rt-thread/src/scheduler.c **** 
 891:rt-thread/src/scheduler.c ****     /* enable interrupt */
 892:rt-thread/src/scheduler.c ****     rt_hw_interrupt_enable(level);
 699              		.loc 1 892 0
 700 000e FFF7FEFF 		bl	rt_hw_interrupt_enable
 701              	.LVL73:
 702 0012 08BD     		pop	{r3, pc}
 703              	.L66:
 704              		.align	2
 705              	.L65:
 706 0014 00000000 		.word	.LANCHOR1
 707              		.cfi_endproc
 708              	.LFE22:
 710              		.section	.text.rt_exit_critical,"ax",%progbits
 711              		.align	1
 712              		.global	rt_exit_critical
 713              		.syntax unified
 714              		.thumb
 715              		.thumb_func
 716              		.fpu fpv4-sp-d16
 718              	rt_exit_critical:
 719              	.LFB23:
 893:rt-thread/src/scheduler.c **** }
 894:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 895:rt-thread/src/scheduler.c **** RTM_EXPORT(rt_enter_critical);
 896:rt-thread/src/scheduler.c **** 
 897:rt-thread/src/scheduler.c **** /**
 898:rt-thread/src/scheduler.c ****  * This function will unlock the thread scheduler.
 899:rt-thread/src/scheduler.c ****  */
 900:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 901:rt-thread/src/scheduler.c **** void rt_exit_critical(void)
 902:rt-thread/src/scheduler.c **** {
 903:rt-thread/src/scheduler.c ****     register rt_base_t level;
 904:rt-thread/src/scheduler.c ****     struct rt_thread *current_thread;
 905:rt-thread/src/scheduler.c **** 
ARM GAS  /tmp/cc8v2nhT.s 			page 32


 906:rt-thread/src/scheduler.c ****     /* disable interrupt */
 907:rt-thread/src/scheduler.c ****     level = rt_hw_local_irq_disable();
 908:rt-thread/src/scheduler.c **** 
 909:rt-thread/src/scheduler.c ****     current_thread = rt_cpu_self()->current_thread;
 910:rt-thread/src/scheduler.c ****     if (!current_thread)
 911:rt-thread/src/scheduler.c ****     {
 912:rt-thread/src/scheduler.c ****         rt_hw_local_irq_enable(level);
 913:rt-thread/src/scheduler.c ****         return ;
 914:rt-thread/src/scheduler.c ****     }
 915:rt-thread/src/scheduler.c **** 
 916:rt-thread/src/scheduler.c ****     current_thread->scheduler_lock_nest --;
 917:rt-thread/src/scheduler.c **** 
 918:rt-thread/src/scheduler.c ****     current_thread->critical_lock_nest --;
 919:rt-thread/src/scheduler.c **** 
 920:rt-thread/src/scheduler.c ****     if (current_thread->critical_lock_nest == 0)
 921:rt-thread/src/scheduler.c ****     {
 922:rt-thread/src/scheduler.c ****         rt_hw_spin_unlock(&_rt_critical_lock);
 923:rt-thread/src/scheduler.c ****     }
 924:rt-thread/src/scheduler.c **** 
 925:rt-thread/src/scheduler.c ****     if (current_thread->scheduler_lock_nest <= 0)
 926:rt-thread/src/scheduler.c ****     {
 927:rt-thread/src/scheduler.c ****         current_thread->scheduler_lock_nest = 0;
 928:rt-thread/src/scheduler.c ****         /* enable interrupt */
 929:rt-thread/src/scheduler.c ****         rt_hw_local_irq_enable(level);
 930:rt-thread/src/scheduler.c **** 
 931:rt-thread/src/scheduler.c ****         rt_schedule();
 932:rt-thread/src/scheduler.c ****     }
 933:rt-thread/src/scheduler.c ****     else
 934:rt-thread/src/scheduler.c ****     {
 935:rt-thread/src/scheduler.c ****         /* enable interrupt */
 936:rt-thread/src/scheduler.c ****         rt_hw_local_irq_enable(level);
 937:rt-thread/src/scheduler.c ****     }
 938:rt-thread/src/scheduler.c **** }
 939:rt-thread/src/scheduler.c **** #else
 940:rt-thread/src/scheduler.c **** void rt_exit_critical(void)
 941:rt-thread/src/scheduler.c **** {
 720              		.loc 1 941 0
 721              		.cfi_startproc
 722              		@ args = 0, pretend = 0, frame = 0
 723              		@ frame_needed = 0, uses_anonymous_args = 0
 724 0000 08B5     		push	{r3, lr}
 725              	.LCFI12:
 726              		.cfi_def_cfa_offset 8
 727              		.cfi_offset 3, -8
 728              		.cfi_offset 14, -4
 942:rt-thread/src/scheduler.c ****     register rt_base_t level;
 943:rt-thread/src/scheduler.c **** 
 944:rt-thread/src/scheduler.c ****     /* disable interrupt */
 945:rt-thread/src/scheduler.c ****     level = rt_hw_interrupt_disable();
 729              		.loc 1 945 0
 730 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
 731              	.LVL74:
 946:rt-thread/src/scheduler.c **** 
 947:rt-thread/src/scheduler.c ****     rt_scheduler_lock_nest --;
 732              		.loc 1 947 0
 733 0006 0B4A     		ldr	r2, .L72
 734 0008 1388     		ldrh	r3, [r2]
ARM GAS  /tmp/cc8v2nhT.s 			page 33


 735 000a 013B     		subs	r3, r3, #1
 736 000c 1BB2     		sxth	r3, r3
 737 000e 1380     		strh	r3, [r2]	@ movhi
 948:rt-thread/src/scheduler.c ****     if (rt_scheduler_lock_nest <= 0)
 738              		.loc 1 948 0
 739 0010 002B     		cmp	r3, #0
 740 0012 02DD     		ble	.L71
 949:rt-thread/src/scheduler.c ****     {
 950:rt-thread/src/scheduler.c ****         rt_scheduler_lock_nest = 0;
 951:rt-thread/src/scheduler.c ****         /* enable interrupt */
 952:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 953:rt-thread/src/scheduler.c **** 
 954:rt-thread/src/scheduler.c ****         if (rt_current_thread)
 955:rt-thread/src/scheduler.c ****         {
 956:rt-thread/src/scheduler.c ****             /* if scheduler is started, do a schedule */
 957:rt-thread/src/scheduler.c ****             rt_schedule();
 958:rt-thread/src/scheduler.c ****         }
 959:rt-thread/src/scheduler.c ****     }
 960:rt-thread/src/scheduler.c ****     else
 961:rt-thread/src/scheduler.c ****     {
 962:rt-thread/src/scheduler.c ****         /* enable interrupt */
 963:rt-thread/src/scheduler.c ****         rt_hw_interrupt_enable(level);
 741              		.loc 1 963 0
 742 0014 FFF7FEFF 		bl	rt_hw_interrupt_enable
 743              	.LVL75:
 744              	.L67:
 745 0018 08BD     		pop	{r3, pc}
 746              	.LVL76:
 747              	.L71:
 950:rt-thread/src/scheduler.c ****         /* enable interrupt */
 748              		.loc 1 950 0
 749 001a 0022     		movs	r2, #0
 750 001c 054B     		ldr	r3, .L72
 751 001e 1A80     		strh	r2, [r3]	@ movhi
 952:rt-thread/src/scheduler.c **** 
 752              		.loc 1 952 0
 753 0020 FFF7FEFF 		bl	rt_hw_interrupt_enable
 754              	.LVL77:
 954:rt-thread/src/scheduler.c ****         {
 755              		.loc 1 954 0
 756 0024 044B     		ldr	r3, .L72+4
 757 0026 1B68     		ldr	r3, [r3]
 758 0028 002B     		cmp	r3, #0
 759 002a F5D0     		beq	.L67
 957:rt-thread/src/scheduler.c ****         }
 760              		.loc 1 957 0
 761 002c FFF7FEFF 		bl	rt_schedule
 762              	.LVL78:
 763 0030 08BD     		pop	{r3, pc}
 764              	.L73:
 765 0032 00BF     		.align	2
 766              	.L72:
 767 0034 00000000 		.word	.LANCHOR1
 768 0038 00000000 		.word	rt_current_thread
 769              		.cfi_endproc
 770              	.LFE23:
 772              		.section	.text.rt_critical_level,"ax",%progbits
ARM GAS  /tmp/cc8v2nhT.s 			page 34


 773              		.align	1
 774              		.global	rt_critical_level
 775              		.syntax unified
 776              		.thumb
 777              		.thumb_func
 778              		.fpu fpv4-sp-d16
 780              	rt_critical_level:
 781              	.LFB24:
 964:rt-thread/src/scheduler.c ****     }
 965:rt-thread/src/scheduler.c **** }
 966:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 967:rt-thread/src/scheduler.c **** RTM_EXPORT(rt_exit_critical);
 968:rt-thread/src/scheduler.c **** 
 969:rt-thread/src/scheduler.c **** /**
 970:rt-thread/src/scheduler.c ****  * Get the scheduler lock level
 971:rt-thread/src/scheduler.c ****  *
 972:rt-thread/src/scheduler.c ****  * @return the level of the scheduler lock. 0 means unlocked.
 973:rt-thread/src/scheduler.c ****  */
 974:rt-thread/src/scheduler.c **** rt_uint16_t rt_critical_level(void)
 975:rt-thread/src/scheduler.c **** {
 782              		.loc 1 975 0
 783              		.cfi_startproc
 784              		@ args = 0, pretend = 0, frame = 0
 785              		@ frame_needed = 0, uses_anonymous_args = 0
 786              		@ link register save eliminated.
 976:rt-thread/src/scheduler.c **** #ifdef RT_USING_SMP
 977:rt-thread/src/scheduler.c ****     struct rt_thread *current_thread = rt_cpu_self()->current_thread;
 978:rt-thread/src/scheduler.c **** 
 979:rt-thread/src/scheduler.c ****     return current_thread->critical_lock_nest;
 980:rt-thread/src/scheduler.c **** #else
 981:rt-thread/src/scheduler.c ****     return rt_scheduler_lock_nest;
 982:rt-thread/src/scheduler.c **** #endif /*RT_USING_SMP*/
 983:rt-thread/src/scheduler.c **** }
 787              		.loc 1 983 0
 788 0000 014B     		ldr	r3, .L75
 789 0002 1888     		ldrh	r0, [r3]
 790 0004 7047     		bx	lr
 791              	.L76:
 792 0006 00BF     		.align	2
 793              	.L75:
 794 0008 00000000 		.word	.LANCHOR1
 795              		.cfi_endproc
 796              	.LFE24:
 798              		.comm	rt_thread_defunct,8,4
 799              		.comm	rt_current_priority,1,1
 800              		.comm	rt_current_thread,4,4
 801              		.comm	rt_thread_ready_priority_group,4,4
 802              		.comm	rt_thread_priority_table,256,4
 803              		.section	.bss.rt_scheduler_lock_nest,"aw",%nobits
 804              		.align	1
 805              		.set	.LANCHOR1,. + 0
 808              	rt_scheduler_lock_nest:
 809 0000 0000     		.space	2
 810              		.section	.rodata.__FUNCTION__.6523,"a",%progbits
 811              		.align	2
 812              		.set	.LANCHOR0,. + 0
 815              	__FUNCTION__.6523:
ARM GAS  /tmp/cc8v2nhT.s 			page 35


 816 0000 5F72745F 		.ascii	"_rt_scheduler_stack_check\000"
 816      73636865 
 816      64756C65 
 816      725F7374 
 816      61636B5F 
 817              		.section	.rodata.__FUNCTION__.6561,"a",%progbits
 818              		.align	2
 819              		.set	.LANCHOR2,. + 0
 822              	__FUNCTION__.6561:
 823 0000 72745F73 		.ascii	"rt_schedule_insert_thread\000"
 823      63686564 
 823      756C655F 
 823      696E7365 
 823      72745F74 
 824              		.section	.rodata.__FUNCTION__.6567,"a",%progbits
 825              		.align	2
 826              		.set	.LANCHOR3,. + 0
 829              	__FUNCTION__.6567:
 830 0000 72745F73 		.ascii	"rt_schedule_remove_thread\000"
 830      63686564 
 830      756C655F 
 830      72656D6F 
 830      76655F74 
 831              		.section	.rodata._rt_scheduler_stack_check.str1.4,"aMS",%progbits,1
 832              		.align	2
 833              	.LC0:
 834 0000 74687265 		.ascii	"thread != RT_NULL\000"
 834      61642021 
 834      3D205254 
 834      5F4E554C 
 834      4C00
 835 0012 0000     		.space	2
 836              	.LC1:
 837 0014 74687265 		.ascii	"thread:%s stack overflow\012\000"
 837      61643A25 
 837      73207374 
 837      61636B20 
 837      6F766572 
 838 002e 0000     		.space	2
 839              	.LC2:
 840 0030 7761726E 		.ascii	"warning: %s stack is close to end of stack address."
 840      696E673A 
 840      20257320 
 840      73746163 
 840      6B206973 
 841 0063 0A00     		.ascii	"\012\000"
 842              		.text
 843              	.Letext0:
 844              		.file 3 "rt-thread/include/rtdef.h"
 845              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 846              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 847              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 848              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 849              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 850              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 851              		.file 10 "rt-thread/include/rtthread.h"
 852              		.file 11 "rt-thread/include/rthw.h"
ARM GAS  /tmp/cc8v2nhT.s 			page 36


ARM GAS  /tmp/cc8v2nhT.s 			page 37


DEFINED SYMBOLS
                            *ABS*:0000000000000000 scheduler.c
     /tmp/cc8v2nhT.s:18     .text._get_highest_priority_thread:0000000000000000 $t
     /tmp/cc8v2nhT.s:24     .text._get_highest_priority_thread:0000000000000000 _get_highest_priority_thread
     /tmp/cc8v2nhT.s:60     .text._get_highest_priority_thread:000000000000001c $d
                            *COM*:0000000000000004 rt_thread_ready_priority_group
                            *COM*:0000000000000100 rt_thread_priority_table
     /tmp/cc8v2nhT.s:66     .text._rt_scheduler_stack_check:0000000000000000 $t
     /tmp/cc8v2nhT.s:72     .text._rt_scheduler_stack_check:0000000000000000 _rt_scheduler_stack_check
     /tmp/cc8v2nhT.s:150    .text._rt_scheduler_stack_check:000000000000004c $d
     /tmp/cc8v2nhT.s:158    .text.rt_system_scheduler_init:0000000000000000 $t
     /tmp/cc8v2nhT.s:165    .text.rt_system_scheduler_init:0000000000000000 rt_system_scheduler_init
     /tmp/cc8v2nhT.s:218    .text.rt_system_scheduler_init:0000000000000028 $d
                            *COM*:0000000000000008 rt_thread_defunct
     /tmp/cc8v2nhT.s:228    .text.rt_schedule_insert_thread:0000000000000000 $t
     /tmp/cc8v2nhT.s:235    .text.rt_schedule_insert_thread:0000000000000000 rt_schedule_insert_thread
     /tmp/cc8v2nhT.s:319    .text.rt_schedule_insert_thread:000000000000006c $d
                            *COM*:0000000000000004 rt_current_thread
     /tmp/cc8v2nhT.s:328    .text.rt_schedule_remove_thread:0000000000000000 $t
     /tmp/cc8v2nhT.s:335    .text.rt_schedule_remove_thread:0000000000000000 rt_schedule_remove_thread
     /tmp/cc8v2nhT.s:414    .text.rt_schedule_remove_thread:0000000000000054 $d
     /tmp/cc8v2nhT.s:422    .text.rt_system_scheduler_start:0000000000000000 $t
     /tmp/cc8v2nhT.s:429    .text.rt_system_scheduler_start:0000000000000000 rt_system_scheduler_start
     /tmp/cc8v2nhT.s:472    .text.rt_system_scheduler_start:0000000000000028 $d
     /tmp/cc8v2nhT.s:477    .text.rt_schedule:0000000000000000 $t
     /tmp/cc8v2nhT.s:484    .text.rt_schedule:0000000000000000 rt_schedule
     /tmp/cc8v2nhT.s:662    .text.rt_schedule:00000000000000e0 $d
                            *COM*:0000000000000001 rt_current_priority
     /tmp/cc8v2nhT.s:673    .text.rt_enter_critical:0000000000000000 $t
     /tmp/cc8v2nhT.s:680    .text.rt_enter_critical:0000000000000000 rt_enter_critical
     /tmp/cc8v2nhT.s:706    .text.rt_enter_critical:0000000000000014 $d
     /tmp/cc8v2nhT.s:711    .text.rt_exit_critical:0000000000000000 $t
     /tmp/cc8v2nhT.s:718    .text.rt_exit_critical:0000000000000000 rt_exit_critical
     /tmp/cc8v2nhT.s:767    .text.rt_exit_critical:0000000000000034 $d
     /tmp/cc8v2nhT.s:773    .text.rt_critical_level:0000000000000000 $t
     /tmp/cc8v2nhT.s:780    .text.rt_critical_level:0000000000000000 rt_critical_level
     /tmp/cc8v2nhT.s:794    .text.rt_critical_level:0000000000000008 $d
     /tmp/cc8v2nhT.s:804    .bss.rt_scheduler_lock_nest:0000000000000000 $d
     /tmp/cc8v2nhT.s:808    .bss.rt_scheduler_lock_nest:0000000000000000 rt_scheduler_lock_nest
     /tmp/cc8v2nhT.s:811    .rodata.__FUNCTION__.6523:0000000000000000 $d
     /tmp/cc8v2nhT.s:815    .rodata.__FUNCTION__.6523:0000000000000000 __FUNCTION__.6523
     /tmp/cc8v2nhT.s:818    .rodata.__FUNCTION__.6561:0000000000000000 $d
     /tmp/cc8v2nhT.s:822    .rodata.__FUNCTION__.6561:0000000000000000 __FUNCTION__.6561
     /tmp/cc8v2nhT.s:825    .rodata.__FUNCTION__.6567:0000000000000000 $d
     /tmp/cc8v2nhT.s:829    .rodata.__FUNCTION__.6567:0000000000000000 __FUNCTION__.6567
     /tmp/cc8v2nhT.s:832    .rodata._rt_scheduler_stack_check.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
__rt_ffs
rt_kprintf
rt_hw_interrupt_disable
rt_assert_handler
rt_hw_interrupt_enable
rt_hw_context_switch_to
rt_hw_context_switch_interrupt
rt_hw_context_switch
ARM GAS  /tmp/cc8v2nhT.s 			page 38


rt_interrupt_nest
