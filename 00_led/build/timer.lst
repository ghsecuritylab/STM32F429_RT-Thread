ARM GAS  /tmp/ccP1HQn7.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"timer.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._rt_timer_init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	_rt_timer_init:
  25              	.LFB15:
  26              		.file 1 "rt-thread/src/timer.c"
   1:rt-thread/src/timer.c **** /*
   2:rt-thread/src/timer.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/timer.c ****  *
   4:rt-thread/src/timer.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/timer.c ****  *
   6:rt-thread/src/timer.c ****  * Change Logs:
   7:rt-thread/src/timer.c ****  * Date           Author       Notes
   8:rt-thread/src/timer.c ****  * 2006-03-12     Bernard      first version
   9:rt-thread/src/timer.c ****  * 2006-04-29     Bernard      implement thread timer
  10:rt-thread/src/timer.c ****  * 2006-06-04     Bernard      implement rt_timer_control
  11:rt-thread/src/timer.c ****  * 2006-08-10     Bernard      fix the periodic timer bug
  12:rt-thread/src/timer.c ****  * 2006-09-03     Bernard      implement rt_timer_detach
  13:rt-thread/src/timer.c ****  * 2009-11-11     LiJin        add soft timer
  14:rt-thread/src/timer.c ****  * 2010-05-12     Bernard      fix the timer check bug.
  15:rt-thread/src/timer.c ****  * 2010-11-02     Charlie      re-implement tick overflow issue
  16:rt-thread/src/timer.c ****  * 2012-12-15     Bernard      fix the next timeout issue in soft timer
  17:rt-thread/src/timer.c ****  * 2014-07-12     Bernard      does not lock scheduler when invoking soft-timer
  18:rt-thread/src/timer.c ****  *                             timeout function.
  19:rt-thread/src/timer.c ****  */
  20:rt-thread/src/timer.c **** 
  21:rt-thread/src/timer.c **** #include <rtthread.h>
  22:rt-thread/src/timer.c **** #include <rthw.h>
  23:rt-thread/src/timer.c **** 
  24:rt-thread/src/timer.c **** /* hard timer list */
  25:rt-thread/src/timer.c **** static rt_list_t rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL];
  26:rt-thread/src/timer.c **** 
  27:rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
  28:rt-thread/src/timer.c **** #ifndef RT_TIMER_THREAD_STACK_SIZE
  29:rt-thread/src/timer.c **** #define RT_TIMER_THREAD_STACK_SIZE     512
  30:rt-thread/src/timer.c **** #endif
  31:rt-thread/src/timer.c **** 
  32:rt-thread/src/timer.c **** #ifndef RT_TIMER_THREAD_PRIO
ARM GAS  /tmp/ccP1HQn7.s 			page 2


  33:rt-thread/src/timer.c **** #define RT_TIMER_THREAD_PRIO           0
  34:rt-thread/src/timer.c **** #endif
  35:rt-thread/src/timer.c **** 
  36:rt-thread/src/timer.c **** /* soft timer list */
  37:rt-thread/src/timer.c **** static rt_list_t rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL];
  38:rt-thread/src/timer.c **** static struct rt_thread timer_thread;
  39:rt-thread/src/timer.c **** ALIGN(RT_ALIGN_SIZE)
  40:rt-thread/src/timer.c **** static rt_uint8_t timer_thread_stack[RT_TIMER_THREAD_STACK_SIZE];
  41:rt-thread/src/timer.c **** #endif
  42:rt-thread/src/timer.c **** 
  43:rt-thread/src/timer.c **** #ifdef RT_USING_HOOK
  44:rt-thread/src/timer.c **** extern void (*rt_object_take_hook)(struct rt_object *object);
  45:rt-thread/src/timer.c **** extern void (*rt_object_put_hook)(struct rt_object *object);
  46:rt-thread/src/timer.c **** static void (*rt_timer_enter_hook)(struct rt_timer *timer);
  47:rt-thread/src/timer.c **** static void (*rt_timer_exit_hook)(struct rt_timer *timer);
  48:rt-thread/src/timer.c **** 
  49:rt-thread/src/timer.c **** /**
  50:rt-thread/src/timer.c ****  * @addtogroup Hook
  51:rt-thread/src/timer.c ****  */
  52:rt-thread/src/timer.c **** 
  53:rt-thread/src/timer.c **** /**@{*/
  54:rt-thread/src/timer.c **** 
  55:rt-thread/src/timer.c **** /**
  56:rt-thread/src/timer.c ****  * This function will set a hook function, which will be invoked when enter
  57:rt-thread/src/timer.c ****  * timer timeout callback function.
  58:rt-thread/src/timer.c ****  *
  59:rt-thread/src/timer.c ****  * @param hook the hook function
  60:rt-thread/src/timer.c ****  */
  61:rt-thread/src/timer.c **** void rt_timer_enter_sethook(void (*hook)(struct rt_timer *timer))
  62:rt-thread/src/timer.c **** {
  63:rt-thread/src/timer.c ****     rt_timer_enter_hook = hook;
  64:rt-thread/src/timer.c **** }
  65:rt-thread/src/timer.c **** 
  66:rt-thread/src/timer.c **** /**
  67:rt-thread/src/timer.c ****  * This function will set a hook function, which will be invoked when exit
  68:rt-thread/src/timer.c ****  * timer timeout callback function.
  69:rt-thread/src/timer.c ****  *
  70:rt-thread/src/timer.c ****  * @param hook the hook function
  71:rt-thread/src/timer.c ****  */
  72:rt-thread/src/timer.c **** void rt_timer_exit_sethook(void (*hook)(struct rt_timer *timer))
  73:rt-thread/src/timer.c **** {
  74:rt-thread/src/timer.c ****     rt_timer_exit_hook = hook;
  75:rt-thread/src/timer.c **** }
  76:rt-thread/src/timer.c **** 
  77:rt-thread/src/timer.c **** /**@}*/
  78:rt-thread/src/timer.c **** #endif
  79:rt-thread/src/timer.c **** 
  80:rt-thread/src/timer.c **** static void _rt_timer_init(rt_timer_t timer,
  81:rt-thread/src/timer.c ****                            void (*timeout)(void *parameter),
  82:rt-thread/src/timer.c ****                            void      *parameter,
  83:rt-thread/src/timer.c ****                            rt_tick_t  time,
  84:rt-thread/src/timer.c ****                            rt_uint8_t flag)
  85:rt-thread/src/timer.c **** {
  27              		.loc 1 85 0
  28              		.cfi_startproc
  29              		@ args = 4, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
ARM GAS  /tmp/ccP1HQn7.s 			page 3


  31              		@ link register save eliminated.
  32              	.LVL0:
  33 0000 10B4     		push	{r4}
  34              	.LCFI0:
  35              		.cfi_def_cfa_offset 4
  36              		.cfi_offset 4, -4
  86:rt-thread/src/timer.c ****     int i;
  87:rt-thread/src/timer.c **** 
  88:rt-thread/src/timer.c ****     /* set flag */
  89:rt-thread/src/timer.c ****     timer->parent.flag  = flag;
  90:rt-thread/src/timer.c **** 
  91:rt-thread/src/timer.c ****     /* set deactivated */
  92:rt-thread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
  37              		.loc 1 92 0
  38 0002 9DF80440 		ldrb	r4, [sp, #4]	@ zero_extendqisi2
  39 0006 24F00104 		bic	r4, r4, #1
  40 000a 4472     		strb	r4, [r0, #9]
  93:rt-thread/src/timer.c **** 
  94:rt-thread/src/timer.c ****     timer->timeout_func = timeout;
  41              		.loc 1 94 0
  42 000c C161     		str	r1, [r0, #28]
  95:rt-thread/src/timer.c ****     timer->parameter    = parameter;
  43              		.loc 1 95 0
  44 000e 0262     		str	r2, [r0, #32]
  96:rt-thread/src/timer.c **** 
  97:rt-thread/src/timer.c ****     timer->timeout_tick = 0;
  45              		.loc 1 97 0
  46 0010 0022     		movs	r2, #0
  47              	.LVL1:
  48 0012 8262     		str	r2, [r0, #40]
  98:rt-thread/src/timer.c ****     timer->init_tick    = time;
  49              		.loc 1 98 0
  50 0014 4362     		str	r3, [r0, #36]
  51              	.LVL2:
  99:rt-thread/src/timer.c **** 
 100:rt-thread/src/timer.c ****     /* initialize timer list */
 101:rt-thread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
  52              		.loc 1 101 0
  53 0016 1346     		mov	r3, r2
  54              	.LVL3:
  55              	.L2:
  56              		.loc 1 101 0 is_stmt 0 discriminator 1
  57 0018 002B     		cmp	r3, #0
  58 001a 02DD     		ble	.L3
 102:rt-thread/src/timer.c ****     {
 103:rt-thread/src/timer.c ****         rt_list_init(&(timer->row[i]));
 104:rt-thread/src/timer.c ****     }
 105:rt-thread/src/timer.c **** }
  59              		.loc 1 105 0 is_stmt 1
  60 001c 5DF8044B 		ldr	r4, [sp], #4
  61              	.LCFI1:
  62              		.cfi_remember_state
  63              		.cfi_restore 4
  64              		.cfi_def_cfa_offset 0
  65              	.LVL4:
  66 0020 7047     		bx	lr
  67              	.LVL5:
ARM GAS  /tmp/ccP1HQn7.s 			page 4


  68              	.L3:
  69              	.LCFI2:
  70              		.cfi_restore_state
 103:rt-thread/src/timer.c ****     }
  71              		.loc 1 103 0 discriminator 3
  72 0022 9A1C     		adds	r2, r3, #2
  73 0024 00EBC202 		add	r2, r0, r2, lsl #3
  74 0028 111D     		adds	r1, r2, #4
  75              	.LVL6:
  76              	.LBB37:
  77              	.LBB38:
  78              		.file 2 "rt-thread/include/rtservice.h"
   1:rt-thread/include/rtservice.h **** /*
   2:rt-thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/include/rtservice.h ****  *
   4:rt-thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/include/rtservice.h ****  *
   6:rt-thread/include/rtservice.h ****  * Change Logs:
   7:rt-thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt-thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt-thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt-thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt-thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt-thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt-thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt-thread/include/rtservice.h ****  */
  15:rt-thread/include/rtservice.h **** 
  16:rt-thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt-thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt-thread/include/rtservice.h **** 
  19:rt-thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt-thread/include/rtservice.h **** extern "C" {
  21:rt-thread/include/rtservice.h **** #endif
  22:rt-thread/include/rtservice.h **** 
  23:rt-thread/include/rtservice.h **** /**
  24:rt-thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt-thread/include/rtservice.h ****  */
  26:rt-thread/include/rtservice.h **** 
  27:rt-thread/include/rtservice.h **** /**@{*/
  28:rt-thread/include/rtservice.h **** 
  29:rt-thread/include/rtservice.h **** /**
  30:rt-thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt-thread/include/rtservice.h ****  * struct type.
  32:rt-thread/include/rtservice.h ****  */
  33:rt-thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt-thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt-thread/include/rtservice.h **** 
  36:rt-thread/include/rtservice.h **** 
  37:rt-thread/include/rtservice.h **** /**
  38:rt-thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt-thread/include/rtservice.h ****  */
  40:rt-thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt-thread/include/rtservice.h **** 
  42:rt-thread/include/rtservice.h **** /**
  43:rt-thread/include/rtservice.h ****  * @brief initialize a list
  44:rt-thread/include/rtservice.h ****  *
  45:rt-thread/include/rtservice.h ****  * @param l list to be initialized
ARM GAS  /tmp/ccP1HQn7.s 			page 5


  46:rt-thread/include/rtservice.h ****  */
  47:rt-thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt-thread/include/rtservice.h **** {
  49:rt-thread/include/rtservice.h ****     l->next = l->prev = l;
  79              		.loc 2 49 0 discriminator 3
  80 002a 9160     		str	r1, [r2, #8]
  81 002c 5160     		str	r1, [r2, #4]
  82              	.LVL7:
  83              	.LBE38:
  84              	.LBE37:
 101:rt-thread/src/timer.c ****     {
  85              		.loc 1 101 0 discriminator 3
  86 002e 0133     		adds	r3, r3, #1
  87              	.LVL8:
  88 0030 F2E7     		b	.L2
  89              		.cfi_endproc
  90              	.LFE15:
  92              		.section	.text.rt_timer_list_next_timeout,"ax",%progbits
  93              		.align	1
  94              		.syntax unified
  95              		.thumb
  96              		.thumb_func
  97              		.fpu fpv4-sp-d16
  99              	rt_timer_list_next_timeout:
 100              	.LFB16:
 106:rt-thread/src/timer.c **** 
 107:rt-thread/src/timer.c **** /* the fist timer always in the last row */
 108:rt-thread/src/timer.c **** static rt_tick_t rt_timer_list_next_timeout(rt_list_t timer_list[])
 109:rt-thread/src/timer.c **** {
 101              		.loc 1 109 0
 102              		.cfi_startproc
 103              		@ args = 0, pretend = 0, frame = 0
 104              		@ frame_needed = 0, uses_anonymous_args = 0
 105              		@ link register save eliminated.
 106              	.LVL9:
 107              	.LBB39:
 108              	.LBB40:
  50:rt-thread/include/rtservice.h **** }
  51:rt-thread/include/rtservice.h **** 
  52:rt-thread/include/rtservice.h **** /**
  53:rt-thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt-thread/include/rtservice.h ****  *
  55:rt-thread/include/rtservice.h ****  * @param l list to insert it
  56:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt-thread/include/rtservice.h ****  */
  58:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rt-thread/include/rtservice.h **** {
  60:rt-thread/include/rtservice.h ****     l->next->prev = n;
  61:rt-thread/include/rtservice.h ****     n->next = l->next;
  62:rt-thread/include/rtservice.h **** 
  63:rt-thread/include/rtservice.h ****     l->next = n;
  64:rt-thread/include/rtservice.h ****     n->prev = l;
  65:rt-thread/include/rtservice.h **** }
  66:rt-thread/include/rtservice.h **** 
  67:rt-thread/include/rtservice.h **** /**
  68:rt-thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt-thread/include/rtservice.h ****  *
ARM GAS  /tmp/ccP1HQn7.s 			page 6


  70:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt-thread/include/rtservice.h ****  * @param l list to insert it
  72:rt-thread/include/rtservice.h ****  */
  73:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt-thread/include/rtservice.h **** {
  75:rt-thread/include/rtservice.h ****     l->prev->next = n;
  76:rt-thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt-thread/include/rtservice.h **** 
  78:rt-thread/include/rtservice.h ****     l->prev = n;
  79:rt-thread/include/rtservice.h ****     n->next = l;
  80:rt-thread/include/rtservice.h **** }
  81:rt-thread/include/rtservice.h **** 
  82:rt-thread/include/rtservice.h **** /**
  83:rt-thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt-thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt-thread/include/rtservice.h ****  */
  86:rt-thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rt-thread/include/rtservice.h **** {
  88:rt-thread/include/rtservice.h ****     n->next->prev = n->prev;
  89:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
  90:rt-thread/include/rtservice.h **** 
  91:rt-thread/include/rtservice.h ****     n->next = n->prev = n;
  92:rt-thread/include/rtservice.h **** }
  93:rt-thread/include/rtservice.h **** 
  94:rt-thread/include/rtservice.h **** /**
  95:rt-thread/include/rtservice.h ****  * @brief tests whether a list is empty
  96:rt-thread/include/rtservice.h ****  * @param l the list to test.
  97:rt-thread/include/rtservice.h ****  */
  98:rt-thread/include/rtservice.h **** rt_inline int rt_list_isempty(const rt_list_t *l)
  99:rt-thread/include/rtservice.h **** {
 100:rt-thread/include/rtservice.h ****     return l->next == l;
 109              		.loc 2 100 0
 110 0000 0368     		ldr	r3, [r0]
 111              	.LVL10:
 112              	.LBE40:
 113              	.LBE39:
 110:rt-thread/src/timer.c ****     struct rt_timer *timer;
 111:rt-thread/src/timer.c **** 
 112:rt-thread/src/timer.c ****     if (rt_list_isempty(&timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 114              		.loc 1 112 0
 115 0002 9842     		cmp	r0, r3
 116 0004 01D0     		beq	.L7
 117              	.LVL11:
 113:rt-thread/src/timer.c ****         return RT_TICK_MAX;
 114:rt-thread/src/timer.c **** 
 115:rt-thread/src/timer.c ****     timer = rt_list_entry(timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 116:rt-thread/src/timer.c ****                           struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 117:rt-thread/src/timer.c **** 
 118:rt-thread/src/timer.c ****     return timer->timeout_tick;
 118              		.loc 1 118 0
 119 0006 5869     		ldr	r0, [r3, #20]
 120              	.LVL12:
 121 0008 7047     		bx	lr
 122              	.LVL13:
 123              	.L7:
 113:rt-thread/src/timer.c ****         return RT_TICK_MAX;
 124              		.loc 1 113 0
ARM GAS  /tmp/ccP1HQn7.s 			page 7


 125 000a 4FF0FF30 		mov	r0, #-1
 126              	.LVL14:
 119:rt-thread/src/timer.c **** }
 127              		.loc 1 119 0
 128 000e 7047     		bx	lr
 129              		.cfi_endproc
 130              	.LFE16:
 132              		.section	.text.rt_timer_init,"ax",%progbits
 133              		.align	1
 134              		.global	rt_timer_init
 135              		.syntax unified
 136              		.thumb
 137              		.thumb_func
 138              		.fpu fpv4-sp-d16
 140              	rt_timer_init:
 141              	.LFB18:
 120:rt-thread/src/timer.c **** 
 121:rt-thread/src/timer.c **** rt_inline void _rt_timer_remove(rt_timer_t timer)
 122:rt-thread/src/timer.c **** {
 123:rt-thread/src/timer.c ****     int i;
 124:rt-thread/src/timer.c **** 
 125:rt-thread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 126:rt-thread/src/timer.c ****     {
 127:rt-thread/src/timer.c ****         rt_list_remove(&timer->row[i]);
 128:rt-thread/src/timer.c ****     }
 129:rt-thread/src/timer.c **** }
 130:rt-thread/src/timer.c **** 
 131:rt-thread/src/timer.c **** #if RT_DEBUG_TIMER
 132:rt-thread/src/timer.c **** static int rt_timer_count_height(struct rt_timer *timer)
 133:rt-thread/src/timer.c **** {
 134:rt-thread/src/timer.c ****     int i, cnt = 0;
 135:rt-thread/src/timer.c **** 
 136:rt-thread/src/timer.c ****     for (i = 0; i < RT_TIMER_SKIP_LIST_LEVEL; i++)
 137:rt-thread/src/timer.c ****     {
 138:rt-thread/src/timer.c ****         if (!rt_list_isempty(&timer->row[i]))
 139:rt-thread/src/timer.c ****             cnt++;
 140:rt-thread/src/timer.c ****     }
 141:rt-thread/src/timer.c ****     return cnt;
 142:rt-thread/src/timer.c **** }
 143:rt-thread/src/timer.c **** 
 144:rt-thread/src/timer.c **** void rt_timer_dump(rt_list_t timer_heads[])
 145:rt-thread/src/timer.c **** {
 146:rt-thread/src/timer.c ****     rt_list_t *list;
 147:rt-thread/src/timer.c **** 
 148:rt-thread/src/timer.c ****     for (list = timer_heads[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
 149:rt-thread/src/timer.c ****          list != &timer_heads[RT_TIMER_SKIP_LIST_LEVEL - 1];
 150:rt-thread/src/timer.c ****          list = list->next)
 151:rt-thread/src/timer.c ****     {
 152:rt-thread/src/timer.c ****         struct rt_timer *timer = rt_list_entry(list,
 153:rt-thread/src/timer.c ****                                                struct rt_timer,
 154:rt-thread/src/timer.c ****                                                row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 155:rt-thread/src/timer.c ****         rt_kprintf("%d", rt_timer_count_height(timer));
 156:rt-thread/src/timer.c ****     }
 157:rt-thread/src/timer.c ****     rt_kprintf("\n");
 158:rt-thread/src/timer.c **** }
 159:rt-thread/src/timer.c **** #endif
 160:rt-thread/src/timer.c **** 
ARM GAS  /tmp/ccP1HQn7.s 			page 8


 161:rt-thread/src/timer.c **** /**
 162:rt-thread/src/timer.c ****  * @addtogroup Clock
 163:rt-thread/src/timer.c ****  */
 164:rt-thread/src/timer.c **** 
 165:rt-thread/src/timer.c **** /**@{*/
 166:rt-thread/src/timer.c **** 
 167:rt-thread/src/timer.c **** /**
 168:rt-thread/src/timer.c ****  * This function will initialize a timer, normally this function is used to
 169:rt-thread/src/timer.c ****  * initialize a static timer object.
 170:rt-thread/src/timer.c ****  *
 171:rt-thread/src/timer.c ****  * @param timer the static timer object
 172:rt-thread/src/timer.c ****  * @param name the name of timer
 173:rt-thread/src/timer.c ****  * @param timeout the timeout function
 174:rt-thread/src/timer.c ****  * @param parameter the parameter of timeout function
 175:rt-thread/src/timer.c ****  * @param time the tick of timer
 176:rt-thread/src/timer.c ****  * @param flag the flag of timer
 177:rt-thread/src/timer.c ****  */
 178:rt-thread/src/timer.c **** void rt_timer_init(rt_timer_t  timer,
 179:rt-thread/src/timer.c ****                    const char *name,
 180:rt-thread/src/timer.c ****                    void (*timeout)(void *parameter),
 181:rt-thread/src/timer.c ****                    void       *parameter,
 182:rt-thread/src/timer.c ****                    rt_tick_t   time,
 183:rt-thread/src/timer.c ****                    rt_uint8_t  flag)
 184:rt-thread/src/timer.c **** {
 142              		.loc 1 184 0
 143              		.cfi_startproc
 144              		@ args = 8, pretend = 0, frame = 0
 145              		@ frame_needed = 0, uses_anonymous_args = 0
 146              	.LVL15:
 147 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 148              	.LCFI3:
 149              		.cfi_def_cfa_offset 20
 150              		.cfi_offset 4, -20
 151              		.cfi_offset 5, -16
 152              		.cfi_offset 6, -12
 153              		.cfi_offset 7, -8
 154              		.cfi_offset 14, -4
 155 0002 83B0     		sub	sp, sp, #12
 156              	.LCFI4:
 157              		.cfi_def_cfa_offset 32
 158 0004 0F46     		mov	r7, r1
 159 0006 1546     		mov	r5, r2
 160 0008 1E46     		mov	r6, r3
 185:rt-thread/src/timer.c ****     /* timer check */
 186:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 161              		.loc 1 186 0
 162 000a 0446     		mov	r4, r0
 163 000c 78B1     		cbz	r0, .L11
 164              	.LVL16:
 165              	.L9:
 187:rt-thread/src/timer.c **** 
 188:rt-thread/src/timer.c ****     /* timer object initialization */
 189:rt-thread/src/timer.c ****     rt_object_init((rt_object_t)timer, RT_Object_Class_Timer, name);
 166              		.loc 1 189 0
 167 000e 3A46     		mov	r2, r7
 168 0010 0A21     		movs	r1, #10
 169 0012 2046     		mov	r0, r4
ARM GAS  /tmp/ccP1HQn7.s 			page 9


 170 0014 FFF7FEFF 		bl	rt_object_init
 171              	.LVL17:
 190:rt-thread/src/timer.c **** 
 191:rt-thread/src/timer.c ****     _rt_timer_init(timer, timeout, parameter, time, flag);
 172              		.loc 1 191 0
 173 0018 9DF82430 		ldrb	r3, [sp, #36]	@ zero_extendqisi2
 174 001c 0093     		str	r3, [sp]
 175 001e 089B     		ldr	r3, [sp, #32]
 176 0020 3246     		mov	r2, r6
 177 0022 2946     		mov	r1, r5
 178 0024 2046     		mov	r0, r4
 179 0026 FFF7FEFF 		bl	_rt_timer_init
 180              	.LVL18:
 192:rt-thread/src/timer.c **** }
 181              		.loc 1 192 0
 182 002a 03B0     		add	sp, sp, #12
 183              	.LCFI5:
 184              		.cfi_remember_state
 185              		.cfi_def_cfa_offset 20
 186              		@ sp needed
 187 002c F0BD     		pop	{r4, r5, r6, r7, pc}
 188              	.LVL19:
 189              	.L11:
 190              	.LCFI6:
 191              		.cfi_restore_state
 186:rt-thread/src/timer.c **** 
 192              		.loc 1 186 0 discriminator 1
 193 002e BA22     		movs	r2, #186
 194              	.LVL20:
 195 0030 0249     		ldr	r1, .L12
 196              	.LVL21:
 197 0032 0348     		ldr	r0, .L12+4
 198              	.LVL22:
 199 0034 FFF7FEFF 		bl	rt_assert_handler
 200              	.LVL23:
 201 0038 E9E7     		b	.L9
 202              	.L13:
 203 003a 00BF     		.align	2
 204              	.L12:
 205 003c 00000000 		.word	.LANCHOR0
 206 0040 00000000 		.word	.LC0
 207              		.cfi_endproc
 208              	.LFE18:
 210              		.section	.text.rt_timer_detach,"ax",%progbits
 211              		.align	1
 212              		.global	rt_timer_detach
 213              		.syntax unified
 214              		.thumb
 215              		.thumb_func
 216              		.fpu fpv4-sp-d16
 218              	rt_timer_detach:
 219              	.LFB19:
 193:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_init);
 194:rt-thread/src/timer.c **** 
 195:rt-thread/src/timer.c **** /**
 196:rt-thread/src/timer.c ****  * This function will detach a timer from timer management.
 197:rt-thread/src/timer.c ****  *
ARM GAS  /tmp/ccP1HQn7.s 			page 10


 198:rt-thread/src/timer.c ****  * @param timer the static timer object
 199:rt-thread/src/timer.c ****  *
 200:rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 201:rt-thread/src/timer.c ****  */
 202:rt-thread/src/timer.c **** rt_err_t rt_timer_detach(rt_timer_t timer)
 203:rt-thread/src/timer.c **** {
 220              		.loc 1 203 0
 221              		.cfi_startproc
 222              		@ args = 0, pretend = 0, frame = 0
 223              		@ frame_needed = 0, uses_anonymous_args = 0
 224              	.LVL24:
 225 0000 70B5     		push	{r4, r5, r6, lr}
 226              	.LCFI7:
 227              		.cfi_def_cfa_offset 16
 228              		.cfi_offset 4, -16
 229              		.cfi_offset 5, -12
 230              		.cfi_offset 6, -8
 231              		.cfi_offset 14, -4
 204:rt-thread/src/timer.c ****     register rt_base_t level;
 205:rt-thread/src/timer.c **** 
 206:rt-thread/src/timer.c ****     /* timer check */
 207:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 232              		.loc 1 207 0
 233 0002 0446     		mov	r4, r0
 234 0004 C8B1     		cbz	r0, .L21
 235              	.LVL25:
 236              	.L15:
 208:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 237              		.loc 1 208 0
 238 0006 2046     		mov	r0, r4
 239 0008 FFF7FEFF 		bl	rt_object_get_type
 240              	.LVL26:
 241 000c 0A28     		cmp	r0, #10
 242 000e 04D0     		beq	.L16
 243              		.loc 1 208 0 is_stmt 0 discriminator 1
 244 0010 D022     		movs	r2, #208
 245 0012 1749     		ldr	r1, .L23
 246 0014 1748     		ldr	r0, .L23+4
 247 0016 FFF7FEFF 		bl	rt_assert_handler
 248              	.LVL27:
 249              	.L16:
 209:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_is_systemobject(&timer->parent));
 250              		.loc 1 209 0 is_stmt 1
 251 001a 2046     		mov	r0, r4
 252 001c FFF7FEFF 		bl	rt_object_is_systemobject
 253              	.LVL28:
 254 0020 88B1     		cbz	r0, .L22
 255              	.L17:
 210:rt-thread/src/timer.c **** 
 211:rt-thread/src/timer.c ****     /* disable interrupt */
 212:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 256              		.loc 1 212 0
 257 0022 FFF7FEFF 		bl	rt_hw_interrupt_disable
 258              	.LVL29:
 259              	.LBB41:
 260              	.LBB42:
 125:rt-thread/src/timer.c ****     {
ARM GAS  /tmp/ccP1HQn7.s 			page 11


 261              		.loc 1 125 0
 262 0026 0022     		movs	r2, #0
 263              	.LVL30:
 264              	.L18:
 265 0028 002A     		cmp	r2, #0
 266 002a 12DD     		ble	.L19
 267              	.LVL31:
 268              	.LBE42:
 269              	.LBE41:
 213:rt-thread/src/timer.c **** 
 214:rt-thread/src/timer.c ****     _rt_timer_remove(timer);
 215:rt-thread/src/timer.c **** 
 216:rt-thread/src/timer.c ****     /* enable interrupt */
 217:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 270              		.loc 1 217 0
 271 002c FFF7FEFF 		bl	rt_hw_interrupt_enable
 272              	.LVL32:
 218:rt-thread/src/timer.c **** 
 219:rt-thread/src/timer.c ****     rt_object_detach((rt_object_t)timer);
 273              		.loc 1 219 0
 274 0030 2046     		mov	r0, r4
 275 0032 FFF7FEFF 		bl	rt_object_detach
 276              	.LVL33:
 220:rt-thread/src/timer.c **** 
 221:rt-thread/src/timer.c ****     return RT_EOK;
 222:rt-thread/src/timer.c **** }
 277              		.loc 1 222 0
 278 0036 0020     		movs	r0, #0
 279 0038 70BD     		pop	{r4, r5, r6, pc}
 280              	.LVL34:
 281              	.L21:
 207:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 282              		.loc 1 207 0 discriminator 1
 283 003a CF22     		movs	r2, #207
 284 003c 0C49     		ldr	r1, .L23
 285 003e 0E48     		ldr	r0, .L23+8
 286              	.LVL35:
 287 0040 FFF7FEFF 		bl	rt_assert_handler
 288              	.LVL36:
 289 0044 DFE7     		b	.L15
 290              	.L22:
 209:rt-thread/src/timer.c **** 
 291              		.loc 1 209 0 discriminator 1
 292 0046 D122     		movs	r2, #209
 293 0048 0949     		ldr	r1, .L23
 294 004a 0C48     		ldr	r0, .L23+12
 295 004c FFF7FEFF 		bl	rt_assert_handler
 296              	.LVL37:
 297 0050 E7E7     		b	.L17
 298              	.LVL38:
 299              	.L19:
 300              	.LBB46:
 301              	.LBB45:
 127:rt-thread/src/timer.c ****     }
 302              		.loc 1 127 0
 303 0052 931C     		adds	r3, r2, #2
 304 0054 04EBC303 		add	r3, r4, r3, lsl #3
ARM GAS  /tmp/ccP1HQn7.s 			page 12


 305 0058 191D     		adds	r1, r3, #4
 306              	.LVL39:
 307              	.LBB43:
 308              	.LBB44:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 309              		.loc 2 88 0
 310 005a 5D68     		ldr	r5, [r3, #4]
 311 005c 9E68     		ldr	r6, [r3, #8]
 312 005e 6E60     		str	r6, [r5, #4]
  89:rt-thread/include/rtservice.h **** 
 313              		.loc 2 89 0
 314 0060 9D68     		ldr	r5, [r3, #8]
 315 0062 5E68     		ldr	r6, [r3, #4]
 316 0064 2E60     		str	r6, [r5]
  91:rt-thread/include/rtservice.h **** }
 317              		.loc 2 91 0
 318 0066 9960     		str	r1, [r3, #8]
 319 0068 5960     		str	r1, [r3, #4]
 320              	.LVL40:
 321              	.LBE44:
 322              	.LBE43:
 125:rt-thread/src/timer.c ****     {
 323              		.loc 1 125 0
 324 006a 0132     		adds	r2, r2, #1
 325              	.LVL41:
 326 006c DCE7     		b	.L18
 327              	.L24:
 328 006e 00BF     		.align	2
 329              	.L23:
 330 0070 00000000 		.word	.LANCHOR1
 331 0074 00000000 		.word	.LC1
 332 0078 00000000 		.word	.LC0
 333 007c 3C000000 		.word	.LC2
 334              	.LBE45:
 335              	.LBE46:
 336              		.cfi_endproc
 337              	.LFE19:
 339              		.section	.text.rt_timer_create,"ax",%progbits
 340              		.align	1
 341              		.global	rt_timer_create
 342              		.syntax unified
 343              		.thumb
 344              		.thumb_func
 345              		.fpu fpv4-sp-d16
 347              	rt_timer_create:
 348              	.LFB20:
 223:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_detach);
 224:rt-thread/src/timer.c **** 
 225:rt-thread/src/timer.c **** #ifdef RT_USING_HEAP
 226:rt-thread/src/timer.c **** /**
 227:rt-thread/src/timer.c ****  * This function will create a timer
 228:rt-thread/src/timer.c ****  *
 229:rt-thread/src/timer.c ****  * @param name the name of timer
 230:rt-thread/src/timer.c ****  * @param timeout the timeout function
 231:rt-thread/src/timer.c ****  * @param parameter the parameter of timeout function
 232:rt-thread/src/timer.c ****  * @param time the tick of timer
 233:rt-thread/src/timer.c ****  * @param flag the flag of timer
ARM GAS  /tmp/ccP1HQn7.s 			page 13


 234:rt-thread/src/timer.c ****  *
 235:rt-thread/src/timer.c ****  * @return the created timer object
 236:rt-thread/src/timer.c ****  */
 237:rt-thread/src/timer.c **** rt_timer_t rt_timer_create(const char *name,
 238:rt-thread/src/timer.c ****                            void (*timeout)(void *parameter),
 239:rt-thread/src/timer.c ****                            void       *parameter,
 240:rt-thread/src/timer.c ****                            rt_tick_t   time,
 241:rt-thread/src/timer.c ****                            rt_uint8_t  flag)
 242:rt-thread/src/timer.c **** {
 349              		.loc 1 242 0
 350              		.cfi_startproc
 351              		@ args = 4, pretend = 0, frame = 0
 352              		@ frame_needed = 0, uses_anonymous_args = 0
 353              	.LVL42:
 354 0000 F0B5     		push	{r4, r5, r6, r7, lr}
 355              	.LCFI8:
 356              		.cfi_def_cfa_offset 20
 357              		.cfi_offset 4, -20
 358              		.cfi_offset 5, -16
 359              		.cfi_offset 6, -12
 360              		.cfi_offset 7, -8
 361              		.cfi_offset 14, -4
 362 0002 83B0     		sub	sp, sp, #12
 363              	.LCFI9:
 364              		.cfi_def_cfa_offset 32
 365 0004 0D46     		mov	r5, r1
 366 0006 1646     		mov	r6, r2
 367 0008 1F46     		mov	r7, r3
 243:rt-thread/src/timer.c ****     struct rt_timer *timer;
 244:rt-thread/src/timer.c **** 
 245:rt-thread/src/timer.c ****     /* allocate a object */
 246:rt-thread/src/timer.c ****     timer = (struct rt_timer *)rt_object_allocate(RT_Object_Class_Timer, name);
 368              		.loc 1 246 0
 369 000a 0146     		mov	r1, r0
 370              	.LVL43:
 371 000c 0A20     		movs	r0, #10
 372              	.LVL44:
 373 000e FFF7FEFF 		bl	rt_object_allocate
 374              	.LVL45:
 247:rt-thread/src/timer.c ****     if (timer == RT_NULL)
 375              		.loc 1 247 0
 376 0012 58B1     		cbz	r0, .L27
 377 0014 0446     		mov	r4, r0
 248:rt-thread/src/timer.c ****     {
 249:rt-thread/src/timer.c ****         return RT_NULL;
 250:rt-thread/src/timer.c ****     }
 251:rt-thread/src/timer.c **** 
 252:rt-thread/src/timer.c ****     _rt_timer_init(timer, timeout, parameter, time, flag);
 378              		.loc 1 252 0
 379 0016 9DF82030 		ldrb	r3, [sp, #32]	@ zero_extendqisi2
 380 001a 0093     		str	r3, [sp]
 381 001c 3B46     		mov	r3, r7
 382 001e 3246     		mov	r2, r6
 383 0020 2946     		mov	r1, r5
 384 0022 FFF7FEFF 		bl	_rt_timer_init
 385              	.LVL46:
 386              	.L25:
ARM GAS  /tmp/ccP1HQn7.s 			page 14


 253:rt-thread/src/timer.c **** 
 254:rt-thread/src/timer.c ****     return timer;
 255:rt-thread/src/timer.c **** }
 387              		.loc 1 255 0
 388 0026 2046     		mov	r0, r4
 389 0028 03B0     		add	sp, sp, #12
 390              	.LCFI10:
 391              		.cfi_remember_state
 392              		.cfi_def_cfa_offset 20
 393              		@ sp needed
 394 002a F0BD     		pop	{r4, r5, r6, r7, pc}
 395              	.LVL47:
 396              	.L27:
 397              	.LCFI11:
 398              		.cfi_restore_state
 249:rt-thread/src/timer.c ****     }
 399              		.loc 1 249 0
 400 002c 0024     		movs	r4, #0
 401 002e FAE7     		b	.L25
 402              		.cfi_endproc
 403              	.LFE20:
 405              		.section	.text.rt_timer_delete,"ax",%progbits
 406              		.align	1
 407              		.global	rt_timer_delete
 408              		.syntax unified
 409              		.thumb
 410              		.thumb_func
 411              		.fpu fpv4-sp-d16
 413              	rt_timer_delete:
 414              	.LFB21:
 256:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_create);
 257:rt-thread/src/timer.c **** 
 258:rt-thread/src/timer.c **** /**
 259:rt-thread/src/timer.c ****  * This function will delete a timer and release timer memory
 260:rt-thread/src/timer.c ****  *
 261:rt-thread/src/timer.c ****  * @param timer the timer to be deleted
 262:rt-thread/src/timer.c ****  *
 263:rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK; RT_ERROR on error
 264:rt-thread/src/timer.c ****  */
 265:rt-thread/src/timer.c **** rt_err_t rt_timer_delete(rt_timer_t timer)
 266:rt-thread/src/timer.c **** {
 415              		.loc 1 266 0
 416              		.cfi_startproc
 417              		@ args = 0, pretend = 0, frame = 0
 418              		@ frame_needed = 0, uses_anonymous_args = 0
 419              	.LVL48:
 420 0000 70B5     		push	{r4, r5, r6, lr}
 421              	.LCFI12:
 422              		.cfi_def_cfa_offset 16
 423              		.cfi_offset 4, -16
 424              		.cfi_offset 5, -12
 425              		.cfi_offset 6, -8
 426              		.cfi_offset 14, -4
 267:rt-thread/src/timer.c ****     register rt_base_t level;
 268:rt-thread/src/timer.c **** 
 269:rt-thread/src/timer.c ****     /* timer check */
 270:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
ARM GAS  /tmp/ccP1HQn7.s 			page 15


 427              		.loc 1 270 0
 428 0002 0446     		mov	r4, r0
 429 0004 D0B1     		cbz	r0, .L36
 430              	.LVL49:
 431              	.L30:
 271:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 432              		.loc 1 271 0
 433 0006 2046     		mov	r0, r4
 434 0008 FFF7FEFF 		bl	rt_object_get_type
 435              	.LVL50:
 436 000c 0A28     		cmp	r0, #10
 437 000e 05D0     		beq	.L31
 438              		.loc 1 271 0 is_stmt 0 discriminator 1
 439 0010 40F20F12 		movw	r2, #271
 440 0014 1749     		ldr	r1, .L38
 441 0016 1848     		ldr	r0, .L38+4
 442 0018 FFF7FEFF 		bl	rt_assert_handler
 443              	.LVL51:
 444              	.L31:
 272:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_is_systemobject(&timer->parent) == RT_FALSE);
 445              		.loc 1 272 0 is_stmt 1
 446 001c 2046     		mov	r0, r4
 447 001e FFF7FEFF 		bl	rt_object_is_systemobject
 448              	.LVL52:
 449 0022 90B9     		cbnz	r0, .L37
 450              	.L32:
 273:rt-thread/src/timer.c **** 
 274:rt-thread/src/timer.c ****     /* disable interrupt */
 275:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 451              		.loc 1 275 0
 452 0024 FFF7FEFF 		bl	rt_hw_interrupt_disable
 453              	.LVL53:
 454              	.LBB47:
 455              	.LBB48:
 125:rt-thread/src/timer.c ****     {
 456              		.loc 1 125 0
 457 0028 0022     		movs	r2, #0
 458              	.LVL54:
 459              	.L33:
 460 002a 002A     		cmp	r2, #0
 461 002c 14DD     		ble	.L34
 462              	.LVL55:
 463              	.LBE48:
 464              	.LBE47:
 276:rt-thread/src/timer.c **** 
 277:rt-thread/src/timer.c ****     _rt_timer_remove(timer);
 278:rt-thread/src/timer.c **** 
 279:rt-thread/src/timer.c ****     /* enable interrupt */
 280:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 465              		.loc 1 280 0
 466 002e FFF7FEFF 		bl	rt_hw_interrupt_enable
 467              	.LVL56:
 281:rt-thread/src/timer.c **** 
 282:rt-thread/src/timer.c ****     rt_object_delete((rt_object_t)timer);
 468              		.loc 1 282 0
 469 0032 2046     		mov	r0, r4
 470 0034 FFF7FEFF 		bl	rt_object_delete
ARM GAS  /tmp/ccP1HQn7.s 			page 16


 471              	.LVL57:
 283:rt-thread/src/timer.c **** 
 284:rt-thread/src/timer.c ****     return RT_EOK;
 285:rt-thread/src/timer.c **** }
 472              		.loc 1 285 0
 473 0038 0020     		movs	r0, #0
 474 003a 70BD     		pop	{r4, r5, r6, pc}
 475              	.LVL58:
 476              	.L36:
 270:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 477              		.loc 1 270 0 discriminator 1
 478 003c 4FF48772 		mov	r2, #270
 479 0040 0C49     		ldr	r1, .L38
 480 0042 0E48     		ldr	r0, .L38+8
 481              	.LVL59:
 482 0044 FFF7FEFF 		bl	rt_assert_handler
 483              	.LVL60:
 484 0048 DDE7     		b	.L30
 485              	.L37:
 272:rt-thread/src/timer.c **** 
 486              		.loc 1 272 0 discriminator 1
 487 004a 4FF48872 		mov	r2, #272
 488 004e 0949     		ldr	r1, .L38
 489 0050 0B48     		ldr	r0, .L38+12
 490 0052 FFF7FEFF 		bl	rt_assert_handler
 491              	.LVL61:
 492 0056 E5E7     		b	.L32
 493              	.LVL62:
 494              	.L34:
 495              	.LBB52:
 496              	.LBB51:
 127:rt-thread/src/timer.c ****     }
 497              		.loc 1 127 0
 498 0058 931C     		adds	r3, r2, #2
 499 005a 04EBC303 		add	r3, r4, r3, lsl #3
 500 005e 191D     		adds	r1, r3, #4
 501              	.LVL63:
 502              	.LBB49:
 503              	.LBB50:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 504              		.loc 2 88 0
 505 0060 5D68     		ldr	r5, [r3, #4]
 506 0062 9E68     		ldr	r6, [r3, #8]
 507 0064 6E60     		str	r6, [r5, #4]
  89:rt-thread/include/rtservice.h **** 
 508              		.loc 2 89 0
 509 0066 9D68     		ldr	r5, [r3, #8]
 510 0068 5E68     		ldr	r6, [r3, #4]
 511 006a 2E60     		str	r6, [r5]
  91:rt-thread/include/rtservice.h **** }
 512              		.loc 2 91 0
 513 006c 9960     		str	r1, [r3, #8]
 514 006e 5960     		str	r1, [r3, #4]
 515              	.LVL64:
 516              	.LBE50:
 517              	.LBE49:
 125:rt-thread/src/timer.c ****     {
ARM GAS  /tmp/ccP1HQn7.s 			page 17


 518              		.loc 1 125 0
 519 0070 0132     		adds	r2, r2, #1
 520              	.LVL65:
 521 0072 DAE7     		b	.L33
 522              	.L39:
 523              		.align	2
 524              	.L38:
 525 0074 00000000 		.word	.LANCHOR2
 526 0078 00000000 		.word	.LC1
 527 007c 00000000 		.word	.LC0
 528 0080 00000000 		.word	.LC3
 529              	.LBE51:
 530              	.LBE52:
 531              		.cfi_endproc
 532              	.LFE21:
 534              		.section	.text.rt_timer_start,"ax",%progbits
 535              		.align	1
 536              		.global	rt_timer_start
 537              		.syntax unified
 538              		.thumb
 539              		.thumb_func
 540              		.fpu fpv4-sp-d16
 542              	rt_timer_start:
 543              	.LFB22:
 286:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_delete);
 287:rt-thread/src/timer.c **** #endif
 288:rt-thread/src/timer.c **** 
 289:rt-thread/src/timer.c **** /**
 290:rt-thread/src/timer.c ****  * This function will start the timer
 291:rt-thread/src/timer.c ****  *
 292:rt-thread/src/timer.c ****  * @param timer the timer to be started
 293:rt-thread/src/timer.c ****  *
 294:rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 295:rt-thread/src/timer.c ****  */
 296:rt-thread/src/timer.c **** rt_err_t rt_timer_start(rt_timer_t timer)
 297:rt-thread/src/timer.c **** {
 544              		.loc 1 297 0
 545              		.cfi_startproc
 546              		@ args = 0, pretend = 0, frame = 8
 547              		@ frame_needed = 0, uses_anonymous_args = 0
 548              	.LVL66:
 549 0000 70B5     		push	{r4, r5, r6, lr}
 550              	.LCFI13:
 551              		.cfi_def_cfa_offset 16
 552              		.cfi_offset 4, -16
 553              		.cfi_offset 5, -12
 554              		.cfi_offset 6, -8
 555              		.cfi_offset 14, -4
 556 0002 82B0     		sub	sp, sp, #8
 557              	.LCFI14:
 558              		.cfi_def_cfa_offset 24
 298:rt-thread/src/timer.c ****     unsigned int row_lvl;
 299:rt-thread/src/timer.c ****     rt_list_t *timer_list;
 300:rt-thread/src/timer.c ****     register rt_base_t level;
 301:rt-thread/src/timer.c ****     rt_list_t *row_head[RT_TIMER_SKIP_LIST_LEVEL];
 302:rt-thread/src/timer.c ****     unsigned int tst_nr;
 303:rt-thread/src/timer.c ****     static unsigned int random_nr;
ARM GAS  /tmp/ccP1HQn7.s 			page 18


 304:rt-thread/src/timer.c **** 
 305:rt-thread/src/timer.c ****     /* timer check */
 306:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 559              		.loc 1 306 0
 560 0004 0446     		mov	r4, r0
 561 0006 0028     		cmp	r0, #0
 562 0008 3BD0     		beq	.L52
 563              	.LVL67:
 564              	.L41:
 307:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 565              		.loc 1 307 0
 566 000a 2046     		mov	r0, r4
 567 000c FFF7FEFF 		bl	rt_object_get_type
 568              	.LVL68:
 569 0010 0A28     		cmp	r0, #10
 570 0012 05D0     		beq	.L42
 571              		.loc 1 307 0 is_stmt 0 discriminator 1
 572 0014 40F23312 		movw	r2, #307
 573 0018 3649     		ldr	r1, .L54
 574 001a 3748     		ldr	r0, .L54+4
 575 001c FFF7FEFF 		bl	rt_assert_handler
 576              	.LVL69:
 577              	.L42:
 308:rt-thread/src/timer.c **** 
 309:rt-thread/src/timer.c ****     /* stop timer firstly */
 310:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 578              		.loc 1 310 0 is_stmt 1
 579 0020 FFF7FEFF 		bl	rt_hw_interrupt_disable
 580              	.LVL70:
 581              	.LBB53:
 582              	.LBB54:
 125:rt-thread/src/timer.c ****     {
 583              		.loc 1 125 0
 584 0024 0022     		movs	r2, #0
 585              	.LVL71:
 586              	.L43:
 587 0026 002A     		cmp	r2, #0
 588 0028 32DD     		ble	.L44
 589              	.LVL72:
 590              	.LBE54:
 591              	.LBE53:
 311:rt-thread/src/timer.c ****     /* remove timer from list */
 312:rt-thread/src/timer.c ****     _rt_timer_remove(timer);
 313:rt-thread/src/timer.c ****     /* change status of timer */
 314:rt-thread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 592              		.loc 1 314 0
 593 002a 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 594 002c 23F00103 		bic	r3, r3, #1
 595 0030 6372     		strb	r3, [r4, #9]
 315:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 596              		.loc 1 315 0
 597 0032 FFF7FEFF 		bl	rt_hw_interrupt_enable
 598              	.LVL73:
 316:rt-thread/src/timer.c **** 
 317:rt-thread/src/timer.c ****     RT_OBJECT_HOOK_CALL(rt_object_take_hook, (&(timer->parent)));
 318:rt-thread/src/timer.c **** 
 319:rt-thread/src/timer.c ****     /*
ARM GAS  /tmp/ccP1HQn7.s 			page 19


 320:rt-thread/src/timer.c ****      * get timeout tick,
 321:rt-thread/src/timer.c ****      * the max timeout tick shall not great than RT_TICK_MAX/2
 322:rt-thread/src/timer.c ****      */
 323:rt-thread/src/timer.c ****     RT_ASSERT(timer->init_tick < RT_TICK_MAX / 2);
 599              		.loc 1 323 0
 600 0036 626A     		ldr	r2, [r4, #36]
 601 0038 304B     		ldr	r3, .L54+8
 602 003a 9A42     		cmp	r2, r3
 603 003c 36D8     		bhi	.L53
 604              	.L45:
 324:rt-thread/src/timer.c ****     timer->timeout_tick = rt_tick_get() + timer->init_tick;
 605              		.loc 1 324 0
 606 003e FFF7FEFF 		bl	rt_tick_get
 607              	.LVL74:
 608 0042 636A     		ldr	r3, [r4, #36]
 609 0044 1844     		add	r0, r0, r3
 610 0046 A062     		str	r0, [r4, #40]
 325:rt-thread/src/timer.c **** 
 326:rt-thread/src/timer.c ****     /* disable interrupt */
 327:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 611              		.loc 1 327 0
 612 0048 FFF7FEFF 		bl	rt_hw_interrupt_disable
 613              	.LVL75:
 328:rt-thread/src/timer.c **** 
 329:rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 330:rt-thread/src/timer.c ****     if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 331:rt-thread/src/timer.c ****     {
 332:rt-thread/src/timer.c ****         /* insert timer to soft timer list */
 333:rt-thread/src/timer.c ****         timer_list = rt_soft_timer_list;
 334:rt-thread/src/timer.c ****     }
 335:rt-thread/src/timer.c ****     else
 336:rt-thread/src/timer.c **** #endif
 337:rt-thread/src/timer.c ****     {
 338:rt-thread/src/timer.c ****         /* insert timer to system timer list */
 339:rt-thread/src/timer.c ****         timer_list = rt_timer_list;
 340:rt-thread/src/timer.c ****     }
 341:rt-thread/src/timer.c **** 
 342:rt-thread/src/timer.c ****     row_head[0]  = &timer_list[0];
 614              		.loc 1 342 0
 615 004c 2C4B     		ldr	r3, .L54+12
 616 004e 0193     		str	r3, [sp, #4]
 617              	.LVL76:
 343:rt-thread/src/timer.c ****     for (row_lvl = 0; row_lvl < RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 618              		.loc 1 343 0
 619 0050 0021     		movs	r1, #0
 620              	.LVL77:
 621              	.L46:
 622              		.loc 1 343 0 is_stmt 0 discriminator 1
 623 0052 0029     		cmp	r1, #0
 624 0054 36D0     		beq	.L50
 344:rt-thread/src/timer.c ****     {
 345:rt-thread/src/timer.c ****         for (; row_head[row_lvl] != timer_list[row_lvl].prev;
 346:rt-thread/src/timer.c ****              row_head[row_lvl]  = row_head[row_lvl]->next)
 347:rt-thread/src/timer.c ****         {
 348:rt-thread/src/timer.c ****             struct rt_timer *t;
 349:rt-thread/src/timer.c ****             rt_list_t *p = row_head[row_lvl]->next;
 350:rt-thread/src/timer.c **** 
ARM GAS  /tmp/ccP1HQn7.s 			page 20


 351:rt-thread/src/timer.c ****             /* fix up the entry pointer */
 352:rt-thread/src/timer.c ****             t = rt_list_entry(p, struct rt_timer, row[row_lvl]);
 353:rt-thread/src/timer.c **** 
 354:rt-thread/src/timer.c ****             /* If we have two timers that timeout at the same time, it's
 355:rt-thread/src/timer.c ****              * preferred that the timer inserted early get called early.
 356:rt-thread/src/timer.c ****              * So insert the new timer to the end the the some-timeout timer
 357:rt-thread/src/timer.c ****              * list.
 358:rt-thread/src/timer.c ****              */
 359:rt-thread/src/timer.c ****             if ((t->timeout_tick - timer->timeout_tick) == 0)
 360:rt-thread/src/timer.c ****             {
 361:rt-thread/src/timer.c ****                 continue;
 362:rt-thread/src/timer.c ****             }
 363:rt-thread/src/timer.c ****             else if ((t->timeout_tick - timer->timeout_tick) < RT_TICK_MAX / 2)
 364:rt-thread/src/timer.c ****             {
 365:rt-thread/src/timer.c ****                 break;
 366:rt-thread/src/timer.c ****             }
 367:rt-thread/src/timer.c ****         }
 368:rt-thread/src/timer.c ****         if (row_lvl != RT_TIMER_SKIP_LIST_LEVEL - 1)
 369:rt-thread/src/timer.c ****             row_head[row_lvl + 1] = row_head[row_lvl] + 1;
 370:rt-thread/src/timer.c ****     }
 371:rt-thread/src/timer.c **** 
 372:rt-thread/src/timer.c ****     /* Interestingly, this super simple timer insert counter works very very
 373:rt-thread/src/timer.c ****      * well on distributing the list height uniformly. By means of "very very
 374:rt-thread/src/timer.c ****      * well", I mean it beats the randomness of timer->timeout_tick very easily
 375:rt-thread/src/timer.c ****      * (actually, the timeout_tick is not random and easy to be attacked). */
 376:rt-thread/src/timer.c ****     random_nr++;
 625              		.loc 1 376 0 is_stmt 1
 626 0056 2B4A     		ldr	r2, .L54+16
 627 0058 1368     		ldr	r3, [r2]
 628 005a 0133     		adds	r3, r3, #1
 629 005c 1360     		str	r3, [r2]
 630              	.LVL78:
 377:rt-thread/src/timer.c ****     tst_nr = random_nr;
 378:rt-thread/src/timer.c **** 
 379:rt-thread/src/timer.c ****     rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - 1],
 631              		.loc 1 379 0
 632 005e 019B     		ldr	r3, [sp, #4]
 633              	.LVL79:
 634 0060 04F11402 		add	r2, r4, #20
 635              	.LVL80:
 636              	.LBB58:
 637              	.LBB59:
  60:rt-thread/include/rtservice.h ****     n->next = l->next;
 638              		.loc 2 60 0
 639 0064 1968     		ldr	r1, [r3]
 640              	.LVL81:
 641 0066 4A60     		str	r2, [r1, #4]
  61:rt-thread/include/rtservice.h **** 
 642              		.loc 2 61 0
 643 0068 1968     		ldr	r1, [r3]
 644 006a 6161     		str	r1, [r4, #20]
  63:rt-thread/include/rtservice.h ****     n->prev = l;
 645              		.loc 2 63 0
 646 006c 1A60     		str	r2, [r3]
  64:rt-thread/include/rtservice.h **** }
 647              		.loc 2 64 0
 648 006e A361     		str	r3, [r4, #24]
ARM GAS  /tmp/ccP1HQn7.s 			page 21


 649              	.LVL82:
 650              	.LBE59:
 651              	.LBE58:
 380:rt-thread/src/timer.c ****                          &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - 1]));
 381:rt-thread/src/timer.c ****     for (row_lvl = 2; row_lvl <= RT_TIMER_SKIP_LIST_LEVEL; row_lvl++)
 382:rt-thread/src/timer.c ****     {
 383:rt-thread/src/timer.c ****         if (!(tst_nr & RT_TIMER_SKIP_LIST_MASK))
 384:rt-thread/src/timer.c ****             rt_list_insert_after(row_head[RT_TIMER_SKIP_LIST_LEVEL - row_lvl],
 385:rt-thread/src/timer.c ****                                  &(timer->row[RT_TIMER_SKIP_LIST_LEVEL - row_lvl]));
 386:rt-thread/src/timer.c ****         else
 387:rt-thread/src/timer.c ****             break;
 388:rt-thread/src/timer.c ****         /* Shift over the bits we have tested. Works well with 1 bit and 2
 389:rt-thread/src/timer.c ****          * bits. */
 390:rt-thread/src/timer.c ****         tst_nr >>= (RT_TIMER_SKIP_LIST_MASK + 1) >> 1;
 391:rt-thread/src/timer.c ****     }
 392:rt-thread/src/timer.c **** 
 393:rt-thread/src/timer.c ****     timer->parent.flag |= RT_TIMER_FLAG_ACTIVATED;
 652              		.loc 1 393 0
 653 0070 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 654 0072 43F00103 		orr	r3, r3, #1
 655 0076 6372     		strb	r3, [r4, #9]
 394:rt-thread/src/timer.c **** 
 395:rt-thread/src/timer.c ****     /* enable interrupt */
 396:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 656              		.loc 1 396 0
 657 0078 FFF7FEFF 		bl	rt_hw_interrupt_enable
 658              	.LVL83:
 397:rt-thread/src/timer.c **** 
 398:rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 399:rt-thread/src/timer.c ****     if (timer->parent.flag & RT_TIMER_FLAG_SOFT_TIMER)
 400:rt-thread/src/timer.c ****     {
 401:rt-thread/src/timer.c ****         /* check whether timer thread is ready */
 402:rt-thread/src/timer.c ****         if ((timer_thread.stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND)
 403:rt-thread/src/timer.c ****         {
 404:rt-thread/src/timer.c ****             /* resume timer thread to check soft timer */
 405:rt-thread/src/timer.c ****             rt_thread_resume(&timer_thread);
 406:rt-thread/src/timer.c ****             rt_schedule();
 407:rt-thread/src/timer.c ****         }
 408:rt-thread/src/timer.c ****     }
 409:rt-thread/src/timer.c **** #endif
 410:rt-thread/src/timer.c **** 
 411:rt-thread/src/timer.c ****     return RT_EOK;
 412:rt-thread/src/timer.c **** }
 659              		.loc 1 412 0
 660 007c 0020     		movs	r0, #0
 661 007e 02B0     		add	sp, sp, #8
 662              	.LCFI15:
 663              		.cfi_remember_state
 664              		.cfi_def_cfa_offset 16
 665              		@ sp needed
 666 0080 70BD     		pop	{r4, r5, r6, pc}
 667              	.LVL84:
 668              	.L52:
 669              	.LCFI16:
 670              		.cfi_restore_state
 306:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 671              		.loc 1 306 0 discriminator 1
ARM GAS  /tmp/ccP1HQn7.s 			page 22


 672 0082 4FF49972 		mov	r2, #306
 673 0086 1B49     		ldr	r1, .L54
 674 0088 1F48     		ldr	r0, .L54+20
 675              	.LVL85:
 676 008a FFF7FEFF 		bl	rt_assert_handler
 677              	.LVL86:
 678 008e BCE7     		b	.L41
 679              	.LVL87:
 680              	.L44:
 681              	.LBB60:
 682              	.LBB57:
 127:rt-thread/src/timer.c ****     }
 683              		.loc 1 127 0
 684 0090 931C     		adds	r3, r2, #2
 685 0092 04EBC303 		add	r3, r4, r3, lsl #3
 686 0096 191D     		adds	r1, r3, #4
 687              	.LVL88:
 688              	.LBB55:
 689              	.LBB56:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 690              		.loc 2 88 0
 691 0098 5D68     		ldr	r5, [r3, #4]
 692 009a 9E68     		ldr	r6, [r3, #8]
 693 009c 6E60     		str	r6, [r5, #4]
  89:rt-thread/include/rtservice.h **** 
 694              		.loc 2 89 0
 695 009e 9D68     		ldr	r5, [r3, #8]
 696 00a0 5E68     		ldr	r6, [r3, #4]
 697 00a2 2E60     		str	r6, [r5]
  91:rt-thread/include/rtservice.h **** }
 698              		.loc 2 91 0
 699 00a4 9960     		str	r1, [r3, #8]
 700 00a6 5960     		str	r1, [r3, #4]
 701              	.LVL89:
 702              	.LBE56:
 703              	.LBE55:
 125:rt-thread/src/timer.c ****     {
 704              		.loc 1 125 0
 705 00a8 0132     		adds	r2, r2, #1
 706              	.LVL90:
 707 00aa BCE7     		b	.L43
 708              	.LVL91:
 709              	.L53:
 710              	.LBE57:
 711              	.LBE60:
 323:rt-thread/src/timer.c ****     timer->timeout_tick = rt_tick_get() + timer->init_tick;
 712              		.loc 1 323 0 discriminator 1
 713 00ac 40F24312 		movw	r2, #323
 714 00b0 1049     		ldr	r1, .L54
 715 00b2 1648     		ldr	r0, .L54+24
 716 00b4 FFF7FEFF 		bl	rt_assert_handler
 717              	.LVL92:
 718 00b8 C1E7     		b	.L45
 719              	.LVL93:
 720              	.L47:
 346:rt-thread/src/timer.c ****         {
 721              		.loc 1 346 0
ARM GAS  /tmp/ccP1HQn7.s 			page 23


 722 00ba 02AB     		add	r3, sp, #8
 723 00bc 03EB8103 		add	r3, r3, r1, lsl #2
 724 00c0 43F8042C 		str	r2, [r3, #-4]
 725              	.LVL94:
 726              	.L50:
 345:rt-thread/src/timer.c ****              row_head[row_lvl]  = row_head[row_lvl]->next)
 727              		.loc 1 345 0
 728 00c4 02AB     		add	r3, sp, #8
 729 00c6 03EB8103 		add	r3, r3, r1, lsl #2
 730 00ca 53F8045C 		ldr	r5, [r3, #-4]
 731 00ce CB00     		lsls	r3, r1, #3
 732 00d0 0B4A     		ldr	r2, .L54+12
 733 00d2 1A44     		add	r2, r2, r3
 734 00d4 5268     		ldr	r2, [r2, #4]
 735 00d6 9542     		cmp	r5, r2
 736 00d8 0AD0     		beq	.L48
 737              	.LBB61:
 349:rt-thread/src/timer.c **** 
 738              		.loc 1 349 0
 739 00da 2A68     		ldr	r2, [r5]
 740              	.LVL95:
 352:rt-thread/src/timer.c **** 
 741              		.loc 1 352 0
 742 00dc 1433     		adds	r3, r3, #20
 743 00de D31A     		subs	r3, r2, r3
 744              	.LVL96:
 359:rt-thread/src/timer.c ****             {
 745              		.loc 1 359 0
 746 00e0 9B6A     		ldr	r3, [r3, #40]
 747              	.LVL97:
 748 00e2 A56A     		ldr	r5, [r4, #40]
 749 00e4 AB42     		cmp	r3, r5
 750 00e6 E8D0     		beq	.L47
 363:rt-thread/src/timer.c ****             {
 751              		.loc 1 363 0
 752 00e8 5B1B     		subs	r3, r3, r5
 753 00ea 044D     		ldr	r5, .L54+8
 754 00ec AB42     		cmp	r3, r5
 755 00ee E4D8     		bhi	.L47
 756              	.LVL98:
 757              	.L48:
 758              	.LBE61:
 343:rt-thread/src/timer.c ****     {
 759              		.loc 1 343 0 discriminator 2
 760 00f0 0131     		adds	r1, r1, #1
 761              	.LVL99:
 762 00f2 AEE7     		b	.L46
 763              	.L55:
 764              		.align	2
 765              	.L54:
 766 00f4 00000000 		.word	.LANCHOR3
 767 00f8 00000000 		.word	.LC1
 768 00fc FEFFFF7F 		.word	2147483646
 769 0100 00000000 		.word	.LANCHOR4
 770 0104 00000000 		.word	.LANCHOR5
 771 0108 00000000 		.word	.LC0
 772 010c 00000000 		.word	.LC4
ARM GAS  /tmp/ccP1HQn7.s 			page 24


 773              		.cfi_endproc
 774              	.LFE22:
 776              		.section	.text.rt_timer_stop,"ax",%progbits
 777              		.align	1
 778              		.global	rt_timer_stop
 779              		.syntax unified
 780              		.thumb
 781              		.thumb_func
 782              		.fpu fpv4-sp-d16
 784              	rt_timer_stop:
 785              	.LFB23:
 413:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_start);
 414:rt-thread/src/timer.c **** 
 415:rt-thread/src/timer.c **** /**
 416:rt-thread/src/timer.c ****  * This function will stop the timer
 417:rt-thread/src/timer.c ****  *
 418:rt-thread/src/timer.c ****  * @param timer the timer to be stopped
 419:rt-thread/src/timer.c ****  *
 420:rt-thread/src/timer.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 421:rt-thread/src/timer.c ****  */
 422:rt-thread/src/timer.c **** rt_err_t rt_timer_stop(rt_timer_t timer)
 423:rt-thread/src/timer.c **** {
 786              		.loc 1 423 0
 787              		.cfi_startproc
 788              		@ args = 0, pretend = 0, frame = 0
 789              		@ frame_needed = 0, uses_anonymous_args = 0
 790              	.LVL100:
 791 0000 70B5     		push	{r4, r5, r6, lr}
 792              	.LCFI17:
 793              		.cfi_def_cfa_offset 16
 794              		.cfi_offset 4, -16
 795              		.cfi_offset 5, -12
 796              		.cfi_offset 6, -8
 797              		.cfi_offset 14, -4
 424:rt-thread/src/timer.c ****     register rt_base_t level;
 425:rt-thread/src/timer.c **** 
 426:rt-thread/src/timer.c ****     /* timer check */
 427:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 798              		.loc 1 427 0
 799 0002 0446     		mov	r4, r0
 800 0004 D8B1     		cbz	r0, .L64
 801              	.LVL101:
 802              	.L57:
 428:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 803              		.loc 1 428 0
 804 0006 2046     		mov	r0, r4
 805 0008 FFF7FEFF 		bl	rt_object_get_type
 806              	.LVL102:
 807 000c 0A28     		cmp	r0, #10
 808 000e 05D0     		beq	.L58
 809              		.loc 1 428 0 is_stmt 0 discriminator 1
 810 0010 4FF4D672 		mov	r2, #428
 811 0014 1649     		ldr	r1, .L65
 812 0016 1748     		ldr	r0, .L65+4
 813 0018 FFF7FEFF 		bl	rt_assert_handler
 814              	.LVL103:
 815              	.L58:
ARM GAS  /tmp/ccP1HQn7.s 			page 25


 429:rt-thread/src/timer.c **** 
 430:rt-thread/src/timer.c ****     if (!(timer->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 816              		.loc 1 430 0 is_stmt 1
 817 001c 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 818 001e 13F0010F 		tst	r3, #1
 819 0022 21D0     		beq	.L62
 431:rt-thread/src/timer.c ****         return -RT_ERROR;
 432:rt-thread/src/timer.c **** 
 433:rt-thread/src/timer.c ****     RT_OBJECT_HOOK_CALL(rt_object_put_hook, (&(timer->parent)));
 434:rt-thread/src/timer.c **** 
 435:rt-thread/src/timer.c ****     /* disable interrupt */
 436:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 820              		.loc 1 436 0
 821 0024 FFF7FEFF 		bl	rt_hw_interrupt_disable
 822              	.LVL104:
 823              	.LBB62:
 824              	.LBB63:
 125:rt-thread/src/timer.c ****     {
 825              		.loc 1 125 0
 826 0028 0022     		movs	r2, #0
 827              	.LVL105:
 828              	.L60:
 829 002a 002A     		cmp	r2, #0
 830 002c 0EDD     		ble	.L61
 831              	.LVL106:
 832              	.LBE63:
 833              	.LBE62:
 437:rt-thread/src/timer.c **** 
 438:rt-thread/src/timer.c ****     _rt_timer_remove(timer);
 439:rt-thread/src/timer.c **** 
 440:rt-thread/src/timer.c ****     /* enable interrupt */
 441:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 834              		.loc 1 441 0
 835 002e FFF7FEFF 		bl	rt_hw_interrupt_enable
 836              	.LVL107:
 442:rt-thread/src/timer.c **** 
 443:rt-thread/src/timer.c ****     /* change stat */
 444:rt-thread/src/timer.c ****     timer->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 837              		.loc 1 444 0
 838 0032 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 839 0034 23F00103 		bic	r3, r3, #1
 840 0038 6372     		strb	r3, [r4, #9]
 445:rt-thread/src/timer.c **** 
 446:rt-thread/src/timer.c ****     return RT_EOK;
 841              		.loc 1 446 0
 842 003a 0020     		movs	r0, #0
 843 003c 70BD     		pop	{r4, r5, r6, pc}
 844              	.LVL108:
 845              	.L64:
 427:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 846              		.loc 1 427 0 discriminator 1
 847 003e 40F2AB12 		movw	r2, #427
 848 0042 0B49     		ldr	r1, .L65
 849 0044 0C48     		ldr	r0, .L65+8
 850              	.LVL109:
 851 0046 FFF7FEFF 		bl	rt_assert_handler
 852              	.LVL110:
ARM GAS  /tmp/ccP1HQn7.s 			page 26


 853 004a DCE7     		b	.L57
 854              	.LVL111:
 855              	.L61:
 856              	.LBB67:
 857              	.LBB66:
 127:rt-thread/src/timer.c ****     }
 858              		.loc 1 127 0
 859 004c 931C     		adds	r3, r2, #2
 860 004e 04EBC303 		add	r3, r4, r3, lsl #3
 861 0052 191D     		adds	r1, r3, #4
 862              	.LVL112:
 863              	.LBB64:
 864              	.LBB65:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 865              		.loc 2 88 0
 866 0054 5D68     		ldr	r5, [r3, #4]
 867 0056 9E68     		ldr	r6, [r3, #8]
 868 0058 6E60     		str	r6, [r5, #4]
  89:rt-thread/include/rtservice.h **** 
 869              		.loc 2 89 0
 870 005a 9D68     		ldr	r5, [r3, #8]
 871 005c 5E68     		ldr	r6, [r3, #4]
 872 005e 2E60     		str	r6, [r5]
  91:rt-thread/include/rtservice.h **** }
 873              		.loc 2 91 0
 874 0060 9960     		str	r1, [r3, #8]
 875 0062 5960     		str	r1, [r3, #4]
 876              	.LVL113:
 877              	.LBE65:
 878              	.LBE64:
 125:rt-thread/src/timer.c ****     {
 879              		.loc 1 125 0
 880 0064 0132     		adds	r2, r2, #1
 881              	.LVL114:
 882 0066 E0E7     		b	.L60
 883              	.LVL115:
 884              	.L62:
 885              	.LBE66:
 886              	.LBE67:
 431:rt-thread/src/timer.c **** 
 887              		.loc 1 431 0
 888 0068 4FF0FF30 		mov	r0, #-1
 447:rt-thread/src/timer.c **** }
 889              		.loc 1 447 0
 890 006c 70BD     		pop	{r4, r5, r6, pc}
 891              	.LVL116:
 892              	.L66:
 893 006e 00BF     		.align	2
 894              	.L65:
 895 0070 00000000 		.word	.LANCHOR6
 896 0074 00000000 		.word	.LC1
 897 0078 00000000 		.word	.LC0
 898              		.cfi_endproc
 899              	.LFE23:
 901              		.section	.text.rt_timer_control,"ax",%progbits
 902              		.align	1
 903              		.global	rt_timer_control
ARM GAS  /tmp/ccP1HQn7.s 			page 27


 904              		.syntax unified
 905              		.thumb
 906              		.thumb_func
 907              		.fpu fpv4-sp-d16
 909              	rt_timer_control:
 910              	.LFB24:
 448:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_stop);
 449:rt-thread/src/timer.c **** 
 450:rt-thread/src/timer.c **** /**
 451:rt-thread/src/timer.c ****  * This function will get or set some options of the timer
 452:rt-thread/src/timer.c ****  *
 453:rt-thread/src/timer.c ****  * @param timer the timer to be get or set
 454:rt-thread/src/timer.c ****  * @param cmd the control command
 455:rt-thread/src/timer.c ****  * @param arg the argument
 456:rt-thread/src/timer.c ****  *
 457:rt-thread/src/timer.c ****  * @return RT_EOK
 458:rt-thread/src/timer.c ****  */
 459:rt-thread/src/timer.c **** rt_err_t rt_timer_control(rt_timer_t timer, int cmd, void *arg)
 460:rt-thread/src/timer.c **** {
 911              		.loc 1 460 0
 912              		.cfi_startproc
 913              		@ args = 0, pretend = 0, frame = 0
 914              		@ frame_needed = 0, uses_anonymous_args = 0
 915              	.LVL117:
 916 0000 70B5     		push	{r4, r5, r6, lr}
 917              	.LCFI18:
 918              		.cfi_def_cfa_offset 16
 919              		.cfi_offset 4, -16
 920              		.cfi_offset 5, -12
 921              		.cfi_offset 6, -8
 922              		.cfi_offset 14, -4
 923 0002 0D46     		mov	r5, r1
 924 0004 1646     		mov	r6, r2
 461:rt-thread/src/timer.c ****     /* timer check */
 462:rt-thread/src/timer.c ****     RT_ASSERT(timer != RT_NULL);
 925              		.loc 1 462 0
 926 0006 0446     		mov	r4, r0
 927 0008 80B1     		cbz	r0, .L77
 928              	.LVL118:
 929              	.L68:
 463:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 930              		.loc 1 463 0
 931 000a 2046     		mov	r0, r4
 932 000c FFF7FEFF 		bl	rt_object_get_type
 933              	.LVL119:
 934 0010 0A28     		cmp	r0, #10
 935 0012 05D0     		beq	.L69
 936              		.loc 1 463 0 is_stmt 0 discriminator 1
 937 0014 40F2CF12 		movw	r2, #463
 938 0018 1049     		ldr	r1, .L78
 939 001a 1148     		ldr	r0, .L78+4
 940 001c FFF7FEFF 		bl	rt_assert_handler
 941              	.LVL120:
 942              	.L69:
 464:rt-thread/src/timer.c **** 
 465:rt-thread/src/timer.c ****     switch (cmd)
 943              		.loc 1 465 0 is_stmt 1
ARM GAS  /tmp/ccP1HQn7.s 			page 28


 944 0020 032D     		cmp	r5, #3
 945 0022 0CD8     		bhi	.L70
 946 0024 DFE805F0 		tbb	[pc, r5]
 947              	.L72:
 948 0028 0D       		.byte	(.L71-.L72)/2
 949 0029 09       		.byte	(.L73-.L72)/2
 950 002a 10       		.byte	(.L74-.L72)/2
 951 002b 15       		.byte	(.L75-.L72)/2
 952              	.LVL121:
 953              		.p2align 1
 954              	.L77:
 462:rt-thread/src/timer.c ****     RT_ASSERT(rt_object_get_type(&timer->parent) == RT_Object_Class_Timer);
 955              		.loc 1 462 0 discriminator 1
 956 002c 4FF4E772 		mov	r2, #462
 957              	.LVL122:
 958 0030 0A49     		ldr	r1, .L78
 959              	.LVL123:
 960 0032 0C48     		ldr	r0, .L78+8
 961              	.LVL124:
 962 0034 FFF7FEFF 		bl	rt_assert_handler
 963              	.LVL125:
 964 0038 E7E7     		b	.L68
 965              	.L73:
 466:rt-thread/src/timer.c ****     {
 467:rt-thread/src/timer.c ****     case RT_TIMER_CTRL_GET_TIME:
 468:rt-thread/src/timer.c ****         *(rt_tick_t *)arg = timer->init_tick;
 966              		.loc 1 468 0
 967 003a 636A     		ldr	r3, [r4, #36]
 968 003c 3360     		str	r3, [r6]
 969              	.L70:
 469:rt-thread/src/timer.c ****         break;
 470:rt-thread/src/timer.c **** 
 471:rt-thread/src/timer.c ****     case RT_TIMER_CTRL_SET_TIME:
 472:rt-thread/src/timer.c ****         timer->init_tick = *(rt_tick_t *)arg;
 473:rt-thread/src/timer.c ****         break;
 474:rt-thread/src/timer.c **** 
 475:rt-thread/src/timer.c ****     case RT_TIMER_CTRL_SET_ONESHOT:
 476:rt-thread/src/timer.c ****         timer->parent.flag &= ~RT_TIMER_FLAG_PERIODIC;
 477:rt-thread/src/timer.c ****         break;
 478:rt-thread/src/timer.c **** 
 479:rt-thread/src/timer.c ****     case RT_TIMER_CTRL_SET_PERIODIC:
 480:rt-thread/src/timer.c ****         timer->parent.flag |= RT_TIMER_FLAG_PERIODIC;
 481:rt-thread/src/timer.c ****         break;
 482:rt-thread/src/timer.c ****     }
 483:rt-thread/src/timer.c **** 
 484:rt-thread/src/timer.c ****     return RT_EOK;
 485:rt-thread/src/timer.c **** }
 970              		.loc 1 485 0
 971 003e 0020     		movs	r0, #0
 972 0040 70BD     		pop	{r4, r5, r6, pc}
 973              	.LVL126:
 974              	.L71:
 472:rt-thread/src/timer.c ****         break;
 975              		.loc 1 472 0
 976 0042 3368     		ldr	r3, [r6]
 977 0044 6362     		str	r3, [r4, #36]
 473:rt-thread/src/timer.c **** 
ARM GAS  /tmp/ccP1HQn7.s 			page 29


 978              		.loc 1 473 0
 979 0046 FAE7     		b	.L70
 980              	.L74:
 476:rt-thread/src/timer.c ****         break;
 981              		.loc 1 476 0
 982 0048 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 983 004a 23F00203 		bic	r3, r3, #2
 984 004e 6372     		strb	r3, [r4, #9]
 477:rt-thread/src/timer.c **** 
 985              		.loc 1 477 0
 986 0050 F5E7     		b	.L70
 987              	.L75:
 480:rt-thread/src/timer.c ****         break;
 988              		.loc 1 480 0
 989 0052 637A     		ldrb	r3, [r4, #9]	@ zero_extendqisi2
 990 0054 43F00203 		orr	r3, r3, #2
 991 0058 6372     		strb	r3, [r4, #9]
 481:rt-thread/src/timer.c ****     }
 992              		.loc 1 481 0
 993 005a F0E7     		b	.L70
 994              	.L79:
 995              		.align	2
 996              	.L78:
 997 005c 00000000 		.word	.LANCHOR7
 998 0060 00000000 		.word	.LC1
 999 0064 00000000 		.word	.LC0
 1000              		.cfi_endproc
 1001              	.LFE24:
 1003              		.section	.text.rt_timer_check,"ax",%progbits
 1004              		.align	1
 1005              		.global	rt_timer_check
 1006              		.syntax unified
 1007              		.thumb
 1008              		.thumb_func
 1009              		.fpu fpv4-sp-d16
 1011              	rt_timer_check:
 1012              	.LFB25:
 486:rt-thread/src/timer.c **** RTM_EXPORT(rt_timer_control);
 487:rt-thread/src/timer.c **** 
 488:rt-thread/src/timer.c **** /**
 489:rt-thread/src/timer.c ****  * This function will check timer list, if a timeout event happens, the
 490:rt-thread/src/timer.c ****  * corresponding timeout function will be invoked.
 491:rt-thread/src/timer.c ****  *
 492:rt-thread/src/timer.c ****  * @note this function shall be invoked in operating system timer interrupt.
 493:rt-thread/src/timer.c ****  */
 494:rt-thread/src/timer.c **** void rt_timer_check(void)
 495:rt-thread/src/timer.c **** {
 1013              		.loc 1 495 0
 1014              		.cfi_startproc
 1015              		@ args = 0, pretend = 0, frame = 0
 1016              		@ frame_needed = 0, uses_anonymous_args = 0
 1017 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1018              	.LCFI19:
 1019              		.cfi_def_cfa_offset 24
 1020              		.cfi_offset 3, -24
 1021              		.cfi_offset 4, -20
 1022              		.cfi_offset 5, -16
ARM GAS  /tmp/ccP1HQn7.s 			page 30


 1023              		.cfi_offset 6, -12
 1024              		.cfi_offset 7, -8
 1025              		.cfi_offset 14, -4
 496:rt-thread/src/timer.c ****     struct rt_timer *t;
 497:rt-thread/src/timer.c ****     rt_tick_t current_tick;
 498:rt-thread/src/timer.c ****     register rt_base_t level;
 499:rt-thread/src/timer.c **** 
 500:rt-thread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check enter\n"));
 501:rt-thread/src/timer.c **** 
 502:rt-thread/src/timer.c ****     current_tick = rt_tick_get();
 1026              		.loc 1 502 0
 1027 0002 FFF7FEFF 		bl	rt_tick_get
 1028              	.LVL127:
 1029 0006 0746     		mov	r7, r0
 1030              	.LVL128:
 503:rt-thread/src/timer.c **** 
 504:rt-thread/src/timer.c ****     /* disable interrupt */
 505:rt-thread/src/timer.c ****     level = rt_hw_interrupt_disable();
 1031              		.loc 1 505 0
 1032 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1033              	.LVL129:
 1034 000c 0646     		mov	r6, r0
 1035              	.LVL130:
 506:rt-thread/src/timer.c **** 
 507:rt-thread/src/timer.c ****     while (!rt_list_isempty(&rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]))
 1036              		.loc 1 507 0
 1037 000e 27E0     		b	.L81
 1038              	.LVL131:
 1039              	.L84:
 1040              	.LBB68:
 1041              	.LBB69:
 127:rt-thread/src/timer.c ****     }
 1042              		.loc 1 127 0
 1043 0010 A4F11402 		sub	r2, r4, #20
 1044 0014 8B1C     		adds	r3, r1, #2
 1045 0016 DB00     		lsls	r3, r3, #3
 1046 0018 1A44     		add	r2, r2, r3
 1047 001a 0432     		adds	r2, r2, #4
 1048              	.LVL132:
 1049              	.LBB70:
 1050              	.LBB71:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 1051              		.loc 2 88 0
 1052 001c 2344     		add	r3, r3, r4
 1053 001e 53F8100C 		ldr	r0, [r3, #-16]
 1054 0022 53F80C7C 		ldr	r7, [r3, #-12]
 1055 0026 4760     		str	r7, [r0, #4]
  89:rt-thread/include/rtservice.h **** 
 1056              		.loc 2 89 0
 1057 0028 53F80C0C 		ldr	r0, [r3, #-12]
 1058 002c 53F8107C 		ldr	r7, [r3, #-16]
 1059 0030 0760     		str	r7, [r0]
  91:rt-thread/include/rtservice.h **** }
 1060              		.loc 2 91 0
 1061 0032 43F80C2C 		str	r2, [r3, #-12]
 1062 0036 43F8102C 		str	r2, [r3, #-16]
 1063              	.LVL133:
ARM GAS  /tmp/ccP1HQn7.s 			page 31


 1064              	.LBE71:
 1065              	.LBE70:
 125:rt-thread/src/timer.c ****     {
 1066              		.loc 1 125 0
 1067 003a 0131     		adds	r1, r1, #1
 1068              	.LVL134:
 1069              	.L82:
 1070 003c 0029     		cmp	r1, #0
 1071 003e E7DD     		ble	.L84
 1072              	.LVL135:
 1073              	.LBE69:
 1074              	.LBE68:
 508:rt-thread/src/timer.c ****     {
 509:rt-thread/src/timer.c ****         t = rt_list_entry(rt_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next,
 510:rt-thread/src/timer.c ****                           struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 511:rt-thread/src/timer.c **** 
 512:rt-thread/src/timer.c ****         /*
 513:rt-thread/src/timer.c ****          * It supposes that the new tick shall less than the half duration of
 514:rt-thread/src/timer.c ****          * tick max.
 515:rt-thread/src/timer.c ****          */
 516:rt-thread/src/timer.c ****         if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 517:rt-thread/src/timer.c ****         {
 518:rt-thread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
 519:rt-thread/src/timer.c **** 
 520:rt-thread/src/timer.c ****             /* remove timer from timer list firstly */
 521:rt-thread/src/timer.c ****             _rt_timer_remove(t);
 522:rt-thread/src/timer.c **** 
 523:rt-thread/src/timer.c ****             /* call timeout function */
 524:rt-thread/src/timer.c ****             t->timeout_func(t->parameter);
 1075              		.loc 1 524 0
 1076 0040 A368     		ldr	r3, [r4, #8]
 1077 0042 E068     		ldr	r0, [r4, #12]
 1078 0044 9847     		blx	r3
 1079              	.LVL136:
 525:rt-thread/src/timer.c **** 
 526:rt-thread/src/timer.c ****             /* re-get tick */
 527:rt-thread/src/timer.c ****             current_tick = rt_tick_get();
 1080              		.loc 1 527 0
 1081 0046 FFF7FEFF 		bl	rt_tick_get
 1082              	.LVL137:
 1083 004a 0746     		mov	r7, r0
 1084              	.LVL138:
 528:rt-thread/src/timer.c **** 
 529:rt-thread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
 530:rt-thread/src/timer.c ****             RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
 531:rt-thread/src/timer.c **** 
 532:rt-thread/src/timer.c ****             if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 1085              		.loc 1 532 0
 1086 004c 14F80B3C 		ldrb	r3, [r4, #-11]	@ zero_extendqisi2
 1087 0050 03F00302 		and	r2, r3, #3
 1088 0054 032A     		cmp	r2, #3
 1089 0056 10D0     		beq	.L90
 533:rt-thread/src/timer.c ****                 (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 534:rt-thread/src/timer.c ****             {
 535:rt-thread/src/timer.c ****                 /* start it */
 536:rt-thread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 537:rt-thread/src/timer.c ****                 rt_timer_start(t);
ARM GAS  /tmp/ccP1HQn7.s 			page 32


 538:rt-thread/src/timer.c ****             }
 539:rt-thread/src/timer.c ****             else
 540:rt-thread/src/timer.c ****             {
 541:rt-thread/src/timer.c ****                 /* stop timer */
 542:rt-thread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 1090              		.loc 1 542 0
 1091 0058 23F00103 		bic	r3, r3, #1
 1092 005c 04F80B3C 		strb	r3, [r4, #-11]
 1093              	.LVL139:
 1094              	.L81:
 1095              	.LBB72:
 1096              	.LBB73:
 1097              		.loc 2 100 0
 1098 0060 0C4B     		ldr	r3, .L91
 1099 0062 1C68     		ldr	r4, [r3]
 1100              	.LVL140:
 1101              	.LBE73:
 1102              	.LBE72:
 507:rt-thread/src/timer.c ****     {
 1103              		.loc 1 507 0
 1104 0064 9C42     		cmp	r4, r3
 1105 0066 10D0     		beq	.L83
 509:rt-thread/src/timer.c ****                           struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 1106              		.loc 1 509 0
 1107 0068 A4F11405 		sub	r5, r4, #20
 1108              	.LVL141:
 516:rt-thread/src/timer.c ****         {
 1109              		.loc 1 516 0
 1110 006c 6069     		ldr	r0, [r4, #20]
 1111 006e 381A     		subs	r0, r7, r0
 1112 0070 094B     		ldr	r3, .L91+4
 1113 0072 9842     		cmp	r0, r3
 1114 0074 09D8     		bhi	.L83
 1115 0076 0021     		movs	r1, #0
 1116 0078 E0E7     		b	.L82
 1117              	.LVL142:
 1118              	.L90:
 536:rt-thread/src/timer.c ****                 rt_timer_start(t);
 1119              		.loc 1 536 0
 1120 007a 23F00103 		bic	r3, r3, #1
 1121 007e 04F80B3C 		strb	r3, [r4, #-11]
 537:rt-thread/src/timer.c ****             }
 1122              		.loc 1 537 0
 1123 0082 2846     		mov	r0, r5
 1124              	.LVL143:
 1125 0084 FFF7FEFF 		bl	rt_timer_start
 1126              	.LVL144:
 1127 0088 EAE7     		b	.L81
 1128              	.LVL145:
 1129              	.L83:
 543:rt-thread/src/timer.c ****             }
 544:rt-thread/src/timer.c ****         }
 545:rt-thread/src/timer.c ****         else
 546:rt-thread/src/timer.c ****             break;
 547:rt-thread/src/timer.c ****     }
 548:rt-thread/src/timer.c **** 
 549:rt-thread/src/timer.c ****     /* enable interrupt */
ARM GAS  /tmp/ccP1HQn7.s 			page 33


 550:rt-thread/src/timer.c ****     rt_hw_interrupt_enable(level);
 1130              		.loc 1 550 0
 1131 008a 3046     		mov	r0, r6
 1132 008c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1133              	.LVL146:
 1134 0090 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1135              	.LVL147:
 1136              	.L92:
 1137 0092 00BF     		.align	2
 1138              	.L91:
 1139 0094 00000000 		.word	.LANCHOR4
 1140 0098 FEFFFF7F 		.word	2147483646
 1141              		.cfi_endproc
 1142              	.LFE25:
 1144              		.section	.text.rt_timer_next_timeout_tick,"ax",%progbits
 1145              		.align	1
 1146              		.global	rt_timer_next_timeout_tick
 1147              		.syntax unified
 1148              		.thumb
 1149              		.thumb_func
 1150              		.fpu fpv4-sp-d16
 1152              	rt_timer_next_timeout_tick:
 1153              	.LFB26:
 551:rt-thread/src/timer.c **** 
 552:rt-thread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("timer check leave\n"));
 553:rt-thread/src/timer.c **** }
 554:rt-thread/src/timer.c **** 
 555:rt-thread/src/timer.c **** /**
 556:rt-thread/src/timer.c ****  * This function will return the next timeout tick in the system.
 557:rt-thread/src/timer.c ****  *
 558:rt-thread/src/timer.c ****  * @return the next timeout tick in the system
 559:rt-thread/src/timer.c ****  */
 560:rt-thread/src/timer.c **** rt_tick_t rt_timer_next_timeout_tick(void)
 561:rt-thread/src/timer.c **** {
 1154              		.loc 1 561 0
 1155              		.cfi_startproc
 1156              		@ args = 0, pretend = 0, frame = 0
 1157              		@ frame_needed = 0, uses_anonymous_args = 0
 1158 0000 08B5     		push	{r3, lr}
 1159              	.LCFI20:
 1160              		.cfi_def_cfa_offset 8
 1161              		.cfi_offset 3, -8
 1162              		.cfi_offset 14, -4
 562:rt-thread/src/timer.c ****     return rt_timer_list_next_timeout(rt_timer_list);
 1163              		.loc 1 562 0
 1164 0002 0248     		ldr	r0, .L95
 1165 0004 FFF7FEFF 		bl	rt_timer_list_next_timeout
 1166              	.LVL148:
 563:rt-thread/src/timer.c **** }
 1167              		.loc 1 563 0
 1168 0008 08BD     		pop	{r3, pc}
 1169              	.L96:
 1170 000a 00BF     		.align	2
 1171              	.L95:
 1172 000c 00000000 		.word	.LANCHOR4
 1173              		.cfi_endproc
 1174              	.LFE26:
ARM GAS  /tmp/ccP1HQn7.s 			page 34


 1176              		.section	.text.rt_system_timer_init,"ax",%progbits
 1177              		.align	1
 1178              		.global	rt_system_timer_init
 1179              		.syntax unified
 1180              		.thumb
 1181              		.thumb_func
 1182              		.fpu fpv4-sp-d16
 1184              	rt_system_timer_init:
 1185              	.LFB27:
 564:rt-thread/src/timer.c **** 
 565:rt-thread/src/timer.c **** #ifdef RT_USING_TIMER_SOFT
 566:rt-thread/src/timer.c **** /**
 567:rt-thread/src/timer.c ****  * This function will check timer list, if a timeout event happens, the
 568:rt-thread/src/timer.c ****  * corresponding timeout function will be invoked.
 569:rt-thread/src/timer.c ****  */
 570:rt-thread/src/timer.c **** void rt_soft_timer_check(void)
 571:rt-thread/src/timer.c **** {
 572:rt-thread/src/timer.c ****     rt_tick_t current_tick;
 573:rt-thread/src/timer.c ****     rt_list_t *n;
 574:rt-thread/src/timer.c ****     struct rt_timer *t;
 575:rt-thread/src/timer.c **** 
 576:rt-thread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check enter\n"));
 577:rt-thread/src/timer.c **** 
 578:rt-thread/src/timer.c ****     current_tick = rt_tick_get();
 579:rt-thread/src/timer.c **** 
 580:rt-thread/src/timer.c ****     /* lock scheduler */
 581:rt-thread/src/timer.c ****     rt_enter_critical();
 582:rt-thread/src/timer.c **** 
 583:rt-thread/src/timer.c ****     for (n = rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1].next;
 584:rt-thread/src/timer.c ****          n != &(rt_soft_timer_list[RT_TIMER_SKIP_LIST_LEVEL - 1]);)
 585:rt-thread/src/timer.c ****     {
 586:rt-thread/src/timer.c ****         t = rt_list_entry(n, struct rt_timer, row[RT_TIMER_SKIP_LIST_LEVEL - 1]);
 587:rt-thread/src/timer.c **** 
 588:rt-thread/src/timer.c ****         /*
 589:rt-thread/src/timer.c ****          * It supposes that the new tick shall less than the half duration of
 590:rt-thread/src/timer.c ****          * tick max.
 591:rt-thread/src/timer.c ****          */
 592:rt-thread/src/timer.c ****         if ((current_tick - t->timeout_tick) < RT_TICK_MAX / 2)
 593:rt-thread/src/timer.c ****         {
 594:rt-thread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_enter_hook, (t));
 595:rt-thread/src/timer.c **** 
 596:rt-thread/src/timer.c ****             /* move node to the next */
 597:rt-thread/src/timer.c ****             n = n->next;
 598:rt-thread/src/timer.c **** 
 599:rt-thread/src/timer.c ****             /* remove timer from timer list firstly */
 600:rt-thread/src/timer.c ****             _rt_timer_remove(t);
 601:rt-thread/src/timer.c **** 
 602:rt-thread/src/timer.c ****             /* not lock scheduler when performing timeout function */
 603:rt-thread/src/timer.c ****             rt_exit_critical();
 604:rt-thread/src/timer.c ****             /* call timeout function */
 605:rt-thread/src/timer.c ****             t->timeout_func(t->parameter);
 606:rt-thread/src/timer.c **** 
 607:rt-thread/src/timer.c ****             /* re-get tick */
 608:rt-thread/src/timer.c ****             current_tick = rt_tick_get();
 609:rt-thread/src/timer.c **** 
 610:rt-thread/src/timer.c ****             RT_OBJECT_HOOK_CALL(rt_timer_exit_hook, (t));
 611:rt-thread/src/timer.c ****             RT_DEBUG_LOG(RT_DEBUG_TIMER, ("current tick: %d\n", current_tick));
ARM GAS  /tmp/ccP1HQn7.s 			page 35


 612:rt-thread/src/timer.c **** 
 613:rt-thread/src/timer.c ****             /* lock scheduler */
 614:rt-thread/src/timer.c ****             rt_enter_critical();
 615:rt-thread/src/timer.c **** 
 616:rt-thread/src/timer.c ****             if ((t->parent.flag & RT_TIMER_FLAG_PERIODIC) &&
 617:rt-thread/src/timer.c ****                 (t->parent.flag & RT_TIMER_FLAG_ACTIVATED))
 618:rt-thread/src/timer.c ****             {
 619:rt-thread/src/timer.c ****                 /* start it */
 620:rt-thread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 621:rt-thread/src/timer.c ****                 rt_timer_start(t);
 622:rt-thread/src/timer.c ****             }
 623:rt-thread/src/timer.c ****             else
 624:rt-thread/src/timer.c ****             {
 625:rt-thread/src/timer.c ****                 /* stop timer */
 626:rt-thread/src/timer.c ****                 t->parent.flag &= ~RT_TIMER_FLAG_ACTIVATED;
 627:rt-thread/src/timer.c ****             }
 628:rt-thread/src/timer.c ****         }
 629:rt-thread/src/timer.c ****         else break; /* not check anymore */
 630:rt-thread/src/timer.c ****     }
 631:rt-thread/src/timer.c **** 
 632:rt-thread/src/timer.c ****     /* unlock scheduler */
 633:rt-thread/src/timer.c ****     rt_exit_critical();
 634:rt-thread/src/timer.c **** 
 635:rt-thread/src/timer.c ****     RT_DEBUG_LOG(RT_DEBUG_TIMER, ("software timer check leave\n"));
 636:rt-thread/src/timer.c **** }
 637:rt-thread/src/timer.c **** 
 638:rt-thread/src/timer.c **** /* system timer thread entry */
 639:rt-thread/src/timer.c **** static void rt_thread_timer_entry(void *parameter)
 640:rt-thread/src/timer.c **** {
 641:rt-thread/src/timer.c ****     rt_tick_t next_timeout;
 642:rt-thread/src/timer.c **** 
 643:rt-thread/src/timer.c ****     while (1)
 644:rt-thread/src/timer.c ****     {
 645:rt-thread/src/timer.c ****         /* get the next timeout tick */
 646:rt-thread/src/timer.c ****         next_timeout = rt_timer_list_next_timeout(rt_soft_timer_list);
 647:rt-thread/src/timer.c ****         if (next_timeout == RT_TICK_MAX)
 648:rt-thread/src/timer.c ****         {
 649:rt-thread/src/timer.c ****             /* no software timer exist, suspend self. */
 650:rt-thread/src/timer.c ****             rt_thread_suspend(rt_thread_self());
 651:rt-thread/src/timer.c ****             rt_schedule();
 652:rt-thread/src/timer.c ****         }
 653:rt-thread/src/timer.c ****         else
 654:rt-thread/src/timer.c ****         {
 655:rt-thread/src/timer.c ****             rt_tick_t current_tick;
 656:rt-thread/src/timer.c **** 
 657:rt-thread/src/timer.c ****             /* get current tick */
 658:rt-thread/src/timer.c ****             current_tick = rt_tick_get();
 659:rt-thread/src/timer.c **** 
 660:rt-thread/src/timer.c ****             if ((next_timeout - current_tick) < RT_TICK_MAX / 2)
 661:rt-thread/src/timer.c ****             {
 662:rt-thread/src/timer.c ****                 /* get the delta timeout tick */
 663:rt-thread/src/timer.c ****                 next_timeout = next_timeout - current_tick;
 664:rt-thread/src/timer.c ****                 rt_thread_delay(next_timeout);
 665:rt-thread/src/timer.c ****             }
 666:rt-thread/src/timer.c ****         }
 667:rt-thread/src/timer.c **** 
 668:rt-thread/src/timer.c ****         /* check software timer */
ARM GAS  /tmp/ccP1HQn7.s 			page 36


 669:rt-thread/src/timer.c ****         rt_soft_timer_check();
 670:rt-thread/src/timer.c ****     }
 671:rt-thread/src/timer.c **** }
 672:rt-thread/src/timer.c **** #endif
 673:rt-thread/src/timer.c **** 
 674:rt-thread/src/timer.c **** /**
 675:rt-thread/src/timer.c ****  * @ingroup SystemInit
 676:rt-thread/src/timer.c ****  *
 677:rt-thread/src/timer.c ****  * This function will initialize system timer
 678:rt-thread/src/timer.c ****  */
 679:rt-thread/src/timer.c **** void rt_system_timer_init(void)
 680:rt-thread/src/timer.c **** {
 1186              		.loc 1 680 0
 1187              		.cfi_startproc
 1188              		@ args = 0, pretend = 0, frame = 0
 1189              		@ frame_needed = 0, uses_anonymous_args = 0
 1190              		@ link register save eliminated.
 1191              	.LVL149:
 681:rt-thread/src/timer.c ****     int i;
 682:rt-thread/src/timer.c **** 
 683:rt-thread/src/timer.c ****     for (i = 0; i < sizeof(rt_timer_list) / sizeof(rt_timer_list[0]); i++)
 1192              		.loc 1 683 0
 1193 0000 0023     		movs	r3, #0
 1194              	.LVL150:
 1195              	.L98:
 1196              		.loc 1 683 0 is_stmt 0 discriminator 1
 1197 0002 03B1     		cbz	r3, .L99
 684:rt-thread/src/timer.c ****     {
 685:rt-thread/src/timer.c ****         rt_list_init(rt_timer_list + i);
 686:rt-thread/src/timer.c ****     }
 687:rt-thread/src/timer.c **** }
 1198              		.loc 1 687 0 is_stmt 1
 1199 0004 7047     		bx	lr
 1200              	.L99:
 685:rt-thread/src/timer.c ****     }
 1201              		.loc 1 685 0 discriminator 3
 1202 0006 0449     		ldr	r1, .L100
 1203 0008 01EBC302 		add	r2, r1, r3, lsl #3
 1204              	.LVL151:
 1205              	.LBB74:
 1206              	.LBB75:
  49:rt-thread/include/rtservice.h **** }
 1207              		.loc 2 49 0 discriminator 3
 1208 000c 5260     		str	r2, [r2, #4]
 1209 000e 41F83320 		str	r2, [r1, r3, lsl #3]
 1210              	.LVL152:
 1211              	.LBE75:
 1212              	.LBE74:
 683:rt-thread/src/timer.c ****     {
 1213              		.loc 1 683 0 discriminator 3
 1214 0012 0133     		adds	r3, r3, #1
 1215              	.LVL153:
 1216 0014 F5E7     		b	.L98
 1217              	.L101:
 1218 0016 00BF     		.align	2
 1219              	.L100:
 1220 0018 00000000 		.word	.LANCHOR4
ARM GAS  /tmp/ccP1HQn7.s 			page 37


 1221              		.cfi_endproc
 1222              	.LFE27:
 1224              		.section	.text.rt_system_timer_thread_init,"ax",%progbits
 1225              		.align	1
 1226              		.global	rt_system_timer_thread_init
 1227              		.syntax unified
 1228              		.thumb
 1229              		.thumb_func
 1230              		.fpu fpv4-sp-d16
 1232              	rt_system_timer_thread_init:
 1233              	.LFB28:
 688:rt-thread/src/timer.c **** 
 689:rt-thread/src/timer.c **** /**
 690:rt-thread/src/timer.c ****  * @ingroup SystemInit
 691:rt-thread/src/timer.c ****  *
 692:rt-thread/src/timer.c ****  * This function will initialize system timer thread
 693:rt-thread/src/timer.c ****  */
 694:rt-thread/src/timer.c **** void rt_system_timer_thread_init(void)
 695:rt-thread/src/timer.c **** {
 1234              		.loc 1 695 0
 1235              		.cfi_startproc
 1236              		@ args = 0, pretend = 0, frame = 0
 1237              		@ frame_needed = 0, uses_anonymous_args = 0
 1238              		@ link register save eliminated.
 1239 0000 7047     		bx	lr
 1240              		.cfi_endproc
 1241              	.LFE28:
 1243              		.section	.bss.random_nr.6574,"aw",%nobits
 1244              		.align	2
 1245              		.set	.LANCHOR5,. + 0
 1248              	random_nr.6574:
 1249 0000 00000000 		.space	4
 1250              		.section	.bss.rt_timer_list,"aw",%nobits
 1251              		.align	2
 1252              		.set	.LANCHOR4,. + 0
 1255              	rt_timer_list:
 1256 0000 00000000 		.space	8
 1256      00000000 
 1257              		.section	.rodata.__FUNCTION__.6546,"a",%progbits
 1258              		.align	2
 1259              		.set	.LANCHOR0,. + 0
 1262              	__FUNCTION__.6546:
 1263 0000 72745F74 		.ascii	"rt_timer_init\000"
 1263      696D6572 
 1263      5F696E69 
 1263      7400
 1264              		.section	.rodata.__FUNCTION__.6551,"a",%progbits
 1265              		.align	2
 1266              		.set	.LANCHOR1,. + 0
 1269              	__FUNCTION__.6551:
 1270 0000 72745F74 		.ascii	"rt_timer_detach\000"
 1270      696D6572 
 1270      5F646574 
 1270      61636800 
 1271              		.section	.rodata.__FUNCTION__.6565,"a",%progbits
 1272              		.align	2
 1273              		.set	.LANCHOR2,. + 0
ARM GAS  /tmp/ccP1HQn7.s 			page 38


 1276              	__FUNCTION__.6565:
 1277 0000 72745F74 		.ascii	"rt_timer_delete\000"
 1277      696D6572 
 1277      5F64656C 
 1277      65746500 
 1278              		.section	.rodata.__FUNCTION__.6575,"a",%progbits
 1279              		.align	2
 1280              		.set	.LANCHOR3,. + 0
 1283              	__FUNCTION__.6575:
 1284 0000 72745F74 		.ascii	"rt_timer_start\000"
 1284      696D6572 
 1284      5F737461 
 1284      727400
 1285              		.section	.rodata.__FUNCTION__.6592,"a",%progbits
 1286              		.align	2
 1287              		.set	.LANCHOR6,. + 0
 1290              	__FUNCTION__.6592:
 1291 0000 72745F74 		.ascii	"rt_timer_stop\000"
 1291      696D6572 
 1291      5F73746F 
 1291      7000
 1292              		.section	.rodata.__FUNCTION__.6598,"a",%progbits
 1293              		.align	2
 1294              		.set	.LANCHOR7,. + 0
 1297              	__FUNCTION__.6598:
 1298 0000 72745F74 		.ascii	"rt_timer_control\000"
 1298      696D6572 
 1298      5F636F6E 
 1298      74726F6C 
 1298      00
 1299              		.section	.rodata.rt_timer_delete.str1.4,"aMS",%progbits,1
 1300              		.align	2
 1301              	.LC3:
 1302 0000 72745F6F 		.ascii	"rt_object_is_systemobject(&timer->parent) == RT_FAL"
 1302      626A6563 
 1302      745F6973 
 1302      5F737973 
 1302      74656D6F 
 1303 0033 534500   		.ascii	"SE\000"
 1304              		.section	.rodata.rt_timer_detach.str1.4,"aMS",%progbits,1
 1305              		.align	2
 1306              	.LC1:
 1307 0000 72745F6F 		.ascii	"rt_object_get_type(&timer->parent) == RT_Object_Cla"
 1307      626A6563 
 1307      745F6765 
 1307      745F7479 
 1307      70652826 
 1308 0033 73735F54 		.ascii	"ss_Timer\000"
 1308      696D6572 
 1308      00
 1309              	.LC2:
 1310 003c 72745F6F 		.ascii	"rt_object_is_systemobject(&timer->parent)\000"
 1310      626A6563 
 1310      745F6973 
 1310      5F737973 
 1310      74656D6F 
 1311              		.section	.rodata.rt_timer_init.str1.4,"aMS",%progbits,1
ARM GAS  /tmp/ccP1HQn7.s 			page 39


 1312              		.align	2
 1313              	.LC0:
 1314 0000 74696D65 		.ascii	"timer != RT_NULL\000"
 1314      7220213D 
 1314      2052545F 
 1314      4E554C4C 
 1314      00
 1315              		.section	.rodata.rt_timer_start.str1.4,"aMS",%progbits,1
 1316              		.align	2
 1317              	.LC4:
 1318 0000 74696D65 		.ascii	"timer->init_tick < RT_TICK_MAX / 2\000"
 1318      722D3E69 
 1318      6E69745F 
 1318      7469636B 
 1318      203C2052 
 1319              		.text
 1320              	.Letext0:
 1321              		.file 3 "rt-thread/include/rtdef.h"
 1322              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 1323              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 1324              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1325              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 1326              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 1327              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 1328              		.file 10 "rt-thread/include/rtthread.h"
 1329              		.file 11 "rt-thread/include/rthw.h"
ARM GAS  /tmp/ccP1HQn7.s 			page 40


DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccP1HQn7.s:18     .text._rt_timer_init:0000000000000000 $t
     /tmp/ccP1HQn7.s:24     .text._rt_timer_init:0000000000000000 _rt_timer_init
     /tmp/ccP1HQn7.s:93     .text.rt_timer_list_next_timeout:0000000000000000 $t
     /tmp/ccP1HQn7.s:99     .text.rt_timer_list_next_timeout:0000000000000000 rt_timer_list_next_timeout
     /tmp/ccP1HQn7.s:133    .text.rt_timer_init:0000000000000000 $t
     /tmp/ccP1HQn7.s:140    .text.rt_timer_init:0000000000000000 rt_timer_init
     /tmp/ccP1HQn7.s:205    .text.rt_timer_init:000000000000003c $d
     /tmp/ccP1HQn7.s:211    .text.rt_timer_detach:0000000000000000 $t
     /tmp/ccP1HQn7.s:218    .text.rt_timer_detach:0000000000000000 rt_timer_detach
     /tmp/ccP1HQn7.s:330    .text.rt_timer_detach:0000000000000070 $d
     /tmp/ccP1HQn7.s:340    .text.rt_timer_create:0000000000000000 $t
     /tmp/ccP1HQn7.s:347    .text.rt_timer_create:0000000000000000 rt_timer_create
     /tmp/ccP1HQn7.s:406    .text.rt_timer_delete:0000000000000000 $t
     /tmp/ccP1HQn7.s:413    .text.rt_timer_delete:0000000000000000 rt_timer_delete
     /tmp/ccP1HQn7.s:525    .text.rt_timer_delete:0000000000000074 $d
     /tmp/ccP1HQn7.s:535    .text.rt_timer_start:0000000000000000 $t
     /tmp/ccP1HQn7.s:542    .text.rt_timer_start:0000000000000000 rt_timer_start
     /tmp/ccP1HQn7.s:766    .text.rt_timer_start:00000000000000f4 $d
     /tmp/ccP1HQn7.s:777    .text.rt_timer_stop:0000000000000000 $t
     /tmp/ccP1HQn7.s:784    .text.rt_timer_stop:0000000000000000 rt_timer_stop
     /tmp/ccP1HQn7.s:895    .text.rt_timer_stop:0000000000000070 $d
     /tmp/ccP1HQn7.s:902    .text.rt_timer_control:0000000000000000 $t
     /tmp/ccP1HQn7.s:909    .text.rt_timer_control:0000000000000000 rt_timer_control
     /tmp/ccP1HQn7.s:948    .text.rt_timer_control:0000000000000028 $d
     /tmp/ccP1HQn7.s:953    .text.rt_timer_control:000000000000002c $t
     /tmp/ccP1HQn7.s:997    .text.rt_timer_control:000000000000005c $d
     /tmp/ccP1HQn7.s:1004   .text.rt_timer_check:0000000000000000 $t
     /tmp/ccP1HQn7.s:1011   .text.rt_timer_check:0000000000000000 rt_timer_check
     /tmp/ccP1HQn7.s:1139   .text.rt_timer_check:0000000000000094 $d
     /tmp/ccP1HQn7.s:1145   .text.rt_timer_next_timeout_tick:0000000000000000 $t
     /tmp/ccP1HQn7.s:1152   .text.rt_timer_next_timeout_tick:0000000000000000 rt_timer_next_timeout_tick
     /tmp/ccP1HQn7.s:1172   .text.rt_timer_next_timeout_tick:000000000000000c $d
     /tmp/ccP1HQn7.s:1177   .text.rt_system_timer_init:0000000000000000 $t
     /tmp/ccP1HQn7.s:1184   .text.rt_system_timer_init:0000000000000000 rt_system_timer_init
     /tmp/ccP1HQn7.s:1220   .text.rt_system_timer_init:0000000000000018 $d
     /tmp/ccP1HQn7.s:1225   .text.rt_system_timer_thread_init:0000000000000000 $t
     /tmp/ccP1HQn7.s:1232   .text.rt_system_timer_thread_init:0000000000000000 rt_system_timer_thread_init
     /tmp/ccP1HQn7.s:1244   .bss.random_nr.6574:0000000000000000 $d
     /tmp/ccP1HQn7.s:1248   .bss.random_nr.6574:0000000000000000 random_nr.6574
     /tmp/ccP1HQn7.s:1251   .bss.rt_timer_list:0000000000000000 $d
     /tmp/ccP1HQn7.s:1255   .bss.rt_timer_list:0000000000000000 rt_timer_list
     /tmp/ccP1HQn7.s:1258   .rodata.__FUNCTION__.6546:0000000000000000 $d
     /tmp/ccP1HQn7.s:1262   .rodata.__FUNCTION__.6546:0000000000000000 __FUNCTION__.6546
     /tmp/ccP1HQn7.s:1265   .rodata.__FUNCTION__.6551:0000000000000000 $d
     /tmp/ccP1HQn7.s:1269   .rodata.__FUNCTION__.6551:0000000000000000 __FUNCTION__.6551
     /tmp/ccP1HQn7.s:1272   .rodata.__FUNCTION__.6565:0000000000000000 $d
     /tmp/ccP1HQn7.s:1276   .rodata.__FUNCTION__.6565:0000000000000000 __FUNCTION__.6565
     /tmp/ccP1HQn7.s:1279   .rodata.__FUNCTION__.6575:0000000000000000 $d
     /tmp/ccP1HQn7.s:1283   .rodata.__FUNCTION__.6575:0000000000000000 __FUNCTION__.6575
     /tmp/ccP1HQn7.s:1286   .rodata.__FUNCTION__.6592:0000000000000000 $d
     /tmp/ccP1HQn7.s:1290   .rodata.__FUNCTION__.6592:0000000000000000 __FUNCTION__.6592
     /tmp/ccP1HQn7.s:1293   .rodata.__FUNCTION__.6598:0000000000000000 $d
     /tmp/ccP1HQn7.s:1297   .rodata.__FUNCTION__.6598:0000000000000000 __FUNCTION__.6598
     /tmp/ccP1HQn7.s:1300   .rodata.rt_timer_delete.str1.4:0000000000000000 $d
     /tmp/ccP1HQn7.s:1305   .rodata.rt_timer_detach.str1.4:0000000000000000 $d
ARM GAS  /tmp/ccP1HQn7.s 			page 41


     /tmp/ccP1HQn7.s:1312   .rodata.rt_timer_init.str1.4:0000000000000000 $d
     /tmp/ccP1HQn7.s:1316   .rodata.rt_timer_start.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_object_init
rt_assert_handler
rt_object_get_type
rt_object_is_systemobject
rt_hw_interrupt_disable
rt_hw_interrupt_enable
rt_object_detach
rt_object_allocate
rt_object_delete
rt_tick_get
