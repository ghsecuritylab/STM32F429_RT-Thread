ARM GAS  /tmp/ccxK9JzO.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"thread.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text._rt_thread_init,"ax",%progbits
  18              		.align	1
  19              		.syntax unified
  20              		.thumb
  21              		.thumb_func
  22              		.fpu fpv4-sp-d16
  24              	_rt_thread_init:
  25              	.LFB16:
  26              		.file 1 "rt-thread/src/thread.c"
   1:rt-thread/src/thread.c **** /*
   2:rt-thread/src/thread.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/thread.c ****  *
   4:rt-thread/src/thread.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/thread.c ****  *
   6:rt-thread/src/thread.c ****  * Change Logs:
   7:rt-thread/src/thread.c ****  * Date           Author       Notes
   8:rt-thread/src/thread.c ****  * 2006-03-28     Bernard      first version
   9:rt-thread/src/thread.c ****  * 2006-04-29     Bernard      implement thread timer
  10:rt-thread/src/thread.c ****  * 2006-04-30     Bernard      added THREAD_DEBUG
  11:rt-thread/src/thread.c ****  * 2006-05-27     Bernard      fixed the rt_thread_yield bug
  12:rt-thread/src/thread.c ****  * 2006-06-03     Bernard      fixed the thread timer init bug
  13:rt-thread/src/thread.c ****  * 2006-08-10     Bernard      fixed the timer bug in thread_sleep
  14:rt-thread/src/thread.c ****  * 2006-09-03     Bernard      changed rt_timer_delete to rt_timer_detach
  15:rt-thread/src/thread.c ****  * 2006-09-03     Bernard      implement rt_thread_detach
  16:rt-thread/src/thread.c ****  * 2008-02-16     Bernard      fixed the rt_thread_timeout bug
  17:rt-thread/src/thread.c ****  * 2010-03-21     Bernard      change the errno of rt_thread_delay/sleep to
  18:rt-thread/src/thread.c ****  *                             RT_EOK.
  19:rt-thread/src/thread.c ****  * 2010-11-10     Bernard      add cleanup callback function in thread exit.
  20:rt-thread/src/thread.c ****  * 2011-09-01     Bernard      fixed rt_thread_exit issue when the current
  21:rt-thread/src/thread.c ****  *                             thread preempted, which reported by Jiaxing Lee.
  22:rt-thread/src/thread.c ****  * 2011-09-08     Bernard      fixed the scheduling issue in rt_thread_startup.
  23:rt-thread/src/thread.c ****  * 2012-12-29     Bernard      fixed compiling warning.
  24:rt-thread/src/thread.c ****  * 2016-08-09     ArdaFu       add thread suspend and resume hook.
  25:rt-thread/src/thread.c ****  * 2017-04-10     armink       fixed the rt_thread_delete and rt_thread_detach
  26:rt-thread/src/thread.c ****  *                             bug when thread has not startup.
  27:rt-thread/src/thread.c ****  * 2018-11-22     Jesven       yield is same to rt_schedule
  28:rt-thread/src/thread.c ****  *                             add support for tasks bound to cpu
  29:rt-thread/src/thread.c ****  */
  30:rt-thread/src/thread.c **** 
  31:rt-thread/src/thread.c **** #include <rthw.h>
  32:rt-thread/src/thread.c **** #include <rtthread.h>
ARM GAS  /tmp/ccxK9JzO.s 			page 2


  33:rt-thread/src/thread.c **** 
  34:rt-thread/src/thread.c **** extern rt_list_t rt_thread_defunct;
  35:rt-thread/src/thread.c **** 
  36:rt-thread/src/thread.c **** #ifdef RT_USING_HOOK
  37:rt-thread/src/thread.c **** static void (*rt_thread_suspend_hook)(rt_thread_t thread);
  38:rt-thread/src/thread.c **** static void (*rt_thread_resume_hook) (rt_thread_t thread);
  39:rt-thread/src/thread.c **** static void (*rt_thread_inited_hook) (rt_thread_t thread);
  40:rt-thread/src/thread.c **** 
  41:rt-thread/src/thread.c **** /**
  42:rt-thread/src/thread.c ****  * @ingroup Hook
  43:rt-thread/src/thread.c ****  * This function sets a hook function when the system suspend a thread.
  44:rt-thread/src/thread.c ****  *
  45:rt-thread/src/thread.c ****  * @param hook the specified hook function
  46:rt-thread/src/thread.c ****  *
  47:rt-thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  48:rt-thread/src/thread.c ****  */
  49:rt-thread/src/thread.c **** void rt_thread_suspend_sethook(void (*hook)(rt_thread_t thread))
  50:rt-thread/src/thread.c **** {
  51:rt-thread/src/thread.c ****     rt_thread_suspend_hook = hook;
  52:rt-thread/src/thread.c **** }
  53:rt-thread/src/thread.c **** 
  54:rt-thread/src/thread.c **** /**
  55:rt-thread/src/thread.c ****  * @ingroup Hook
  56:rt-thread/src/thread.c ****  * This function sets a hook function when the system resume a thread.
  57:rt-thread/src/thread.c ****  *
  58:rt-thread/src/thread.c ****  * @param hook the specified hook function
  59:rt-thread/src/thread.c ****  *
  60:rt-thread/src/thread.c ****  * @note the hook function must be simple and never be blocked or suspend.
  61:rt-thread/src/thread.c ****  */
  62:rt-thread/src/thread.c **** void rt_thread_resume_sethook(void (*hook)(rt_thread_t thread))
  63:rt-thread/src/thread.c **** {
  64:rt-thread/src/thread.c ****     rt_thread_resume_hook = hook;
  65:rt-thread/src/thread.c **** }
  66:rt-thread/src/thread.c **** 
  67:rt-thread/src/thread.c **** /**
  68:rt-thread/src/thread.c ****  * @ingroup Hook
  69:rt-thread/src/thread.c ****  * This function sets a hook function when a thread is initialized.
  70:rt-thread/src/thread.c ****  *
  71:rt-thread/src/thread.c ****  * @param hook the specified hook function
  72:rt-thread/src/thread.c ****  */
  73:rt-thread/src/thread.c **** void rt_thread_inited_sethook(void (*hook)(rt_thread_t thread))
  74:rt-thread/src/thread.c **** {
  75:rt-thread/src/thread.c ****     rt_thread_inited_hook = hook;
  76:rt-thread/src/thread.c **** }
  77:rt-thread/src/thread.c **** 
  78:rt-thread/src/thread.c **** #endif
  79:rt-thread/src/thread.c **** 
  80:rt-thread/src/thread.c **** void rt_thread_exit(void)
  81:rt-thread/src/thread.c **** {
  82:rt-thread/src/thread.c ****     struct rt_thread *thread;
  83:rt-thread/src/thread.c ****     register rt_base_t level;
  84:rt-thread/src/thread.c **** 
  85:rt-thread/src/thread.c ****     /* get current thread */
  86:rt-thread/src/thread.c ****     thread = rt_thread_self();
  87:rt-thread/src/thread.c **** 
  88:rt-thread/src/thread.c ****     /* disable interrupt */
  89:rt-thread/src/thread.c ****     level = rt_hw_interrupt_disable();
ARM GAS  /tmp/ccxK9JzO.s 			page 3


  90:rt-thread/src/thread.c **** 
  91:rt-thread/src/thread.c ****     /* remove from schedule */
  92:rt-thread/src/thread.c ****     rt_schedule_remove_thread(thread);
  93:rt-thread/src/thread.c ****     /* change stat */
  94:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
  95:rt-thread/src/thread.c **** 
  96:rt-thread/src/thread.c ****     /* remove it from timer list */
  97:rt-thread/src/thread.c ****     rt_timer_detach(&thread->thread_timer);
  98:rt-thread/src/thread.c **** 
  99:rt-thread/src/thread.c ****     if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 100:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 101:rt-thread/src/thread.c ****     {
 102:rt-thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 103:rt-thread/src/thread.c ****     }
 104:rt-thread/src/thread.c ****     else
 105:rt-thread/src/thread.c ****     {
 106:rt-thread/src/thread.c ****         /* insert to defunct thread list */
 107:rt-thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 108:rt-thread/src/thread.c ****     }
 109:rt-thread/src/thread.c **** 
 110:rt-thread/src/thread.c ****     /* switch to next task */
 111:rt-thread/src/thread.c ****     rt_schedule();
 112:rt-thread/src/thread.c **** 
 113:rt-thread/src/thread.c ****     /* enable interrupt */
 114:rt-thread/src/thread.c ****     rt_hw_interrupt_enable(level);
 115:rt-thread/src/thread.c **** }
 116:rt-thread/src/thread.c **** 
 117:rt-thread/src/thread.c **** static rt_err_t _rt_thread_init(struct rt_thread *thread,
 118:rt-thread/src/thread.c ****                                 const char       *name,
 119:rt-thread/src/thread.c ****                                 void (*entry)(void *parameter),
 120:rt-thread/src/thread.c ****                                 void             *parameter,
 121:rt-thread/src/thread.c ****                                 void             *stack_start,
 122:rt-thread/src/thread.c ****                                 rt_uint32_t       stack_size,
 123:rt-thread/src/thread.c ****                                 rt_uint8_t        priority,
 124:rt-thread/src/thread.c ****                                 rt_uint32_t       tick)
 125:rt-thread/src/thread.c **** {
  27              		.loc 1 125 0
  28              		.cfi_startproc
  29              		@ args = 16, pretend = 0, frame = 0
  30              		@ frame_needed = 0, uses_anonymous_args = 0
  31              	.LVL0:
  32 0000 F0B5     		push	{r4, r5, r6, r7, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 20
  35              		.cfi_offset 4, -20
  36              		.cfi_offset 5, -16
  37              		.cfi_offset 6, -12
  38              		.cfi_offset 7, -8
  39              		.cfi_offset 14, -4
  40 0002 83B0     		sub	sp, sp, #12
  41              	.LCFI1:
  42              		.cfi_def_cfa_offset 32
  43 0004 0446     		mov	r4, r0
  44 0006 0898     		ldr	r0, [sp, #32]
  45              	.LVL1:
  46 0008 0999     		ldr	r1, [sp, #36]
  47              	.LVL2:
ARM GAS  /tmp/ccxK9JzO.s 			page 4


  48 000a 9DF82850 		ldrb	r5, [sp, #40]	@ zero_extendqisi2
  49 000e 0B9E     		ldr	r6, [sp, #44]
 126:rt-thread/src/thread.c ****     /* init thread list */
 127:rt-thread/src/thread.c ****     rt_list_init(&(thread->tlist));
  50              		.loc 1 127 0
  51 0010 04F11407 		add	r7, r4, #20
  52              	.LVL3:
  53              	.LBB14:
  54              	.LBB15:
  55              		.file 2 "rt-thread/include/rtservice.h"
   1:rt-thread/include/rtservice.h **** /*
   2:rt-thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/include/rtservice.h ****  *
   4:rt-thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/include/rtservice.h ****  *
   6:rt-thread/include/rtservice.h ****  * Change Logs:
   7:rt-thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt-thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt-thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt-thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt-thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt-thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt-thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt-thread/include/rtservice.h ****  */
  15:rt-thread/include/rtservice.h **** 
  16:rt-thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt-thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt-thread/include/rtservice.h **** 
  19:rt-thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt-thread/include/rtservice.h **** extern "C" {
  21:rt-thread/include/rtservice.h **** #endif
  22:rt-thread/include/rtservice.h **** 
  23:rt-thread/include/rtservice.h **** /**
  24:rt-thread/include/rtservice.h ****  * @addtogroup KernelService
  25:rt-thread/include/rtservice.h ****  */
  26:rt-thread/include/rtservice.h **** 
  27:rt-thread/include/rtservice.h **** /**@{*/
  28:rt-thread/include/rtservice.h **** 
  29:rt-thread/include/rtservice.h **** /**
  30:rt-thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt-thread/include/rtservice.h ****  * struct type.
  32:rt-thread/include/rtservice.h ****  */
  33:rt-thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt-thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt-thread/include/rtservice.h **** 
  36:rt-thread/include/rtservice.h **** 
  37:rt-thread/include/rtservice.h **** /**
  38:rt-thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt-thread/include/rtservice.h ****  */
  40:rt-thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt-thread/include/rtservice.h **** 
  42:rt-thread/include/rtservice.h **** /**
  43:rt-thread/include/rtservice.h ****  * @brief initialize a list
  44:rt-thread/include/rtservice.h ****  *
  45:rt-thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt-thread/include/rtservice.h ****  */
  47:rt-thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
ARM GAS  /tmp/ccxK9JzO.s 			page 5


  48:rt-thread/include/rtservice.h **** {
  49:rt-thread/include/rtservice.h ****     l->next = l->prev = l;
  56              		.loc 2 49 0
  57 0014 A761     		str	r7, [r4, #24]
  58 0016 6761     		str	r7, [r4, #20]
  59              	.LVL4:
  60              	.LBE15:
  61              	.LBE14:
 128:rt-thread/src/thread.c **** 
 129:rt-thread/src/thread.c ****     thread->entry = (void *)entry;
  62              		.loc 1 129 0
  63 0018 2262     		str	r2, [r4, #32]
 130:rt-thread/src/thread.c ****     thread->parameter = parameter;
  64              		.loc 1 130 0
  65 001a 6362     		str	r3, [r4, #36]
 131:rt-thread/src/thread.c **** 
 132:rt-thread/src/thread.c ****     /* stack init */
 133:rt-thread/src/thread.c ****     thread->stack_addr = stack_start;
  66              		.loc 1 133 0
  67 001c A062     		str	r0, [r4, #40]
 134:rt-thread/src/thread.c ****     thread->stack_size = stack_size;
  68              		.loc 1 134 0
  69 001e E162     		str	r1, [r4, #44]
 135:rt-thread/src/thread.c **** 
 136:rt-thread/src/thread.c ****     /* init thread stack */
 137:rt-thread/src/thread.c ****     rt_memset(thread->stack_addr, '#', thread->stack_size);
  70              		.loc 1 137 0
  71 0020 0A46     		mov	r2, r1
  72              	.LVL5:
  73 0022 2321     		movs	r1, #35
  74 0024 FFF7FEFF 		bl	rt_memset
  75              	.LVL6:
 138:rt-thread/src/thread.c **** #ifdef ARCH_CPU_STACK_GROWS_UPWARD
 139:rt-thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 140:rt-thread/src/thread.c ****                                           (void *)((char *)thread->stack_addr),
 141:rt-thread/src/thread.c ****                                           (void *)rt_thread_exit);
 142:rt-thread/src/thread.c **** #else
 143:rt-thread/src/thread.c ****     thread->sp = (void *)rt_hw_stack_init(thread->entry, thread->parameter,
 144:rt-thread/src/thread.c ****                                           (rt_uint8_t *)((char *)thread->stack_addr + thread->stack
  76              		.loc 1 144 0
  77 0028 A16A     		ldr	r1, [r4, #40]
  78 002a E36A     		ldr	r3, [r4, #44]
  79 002c 1A1F     		subs	r2, r3, #4
 143:rt-thread/src/thread.c ****                                           (rt_uint8_t *)((char *)thread->stack_addr + thread->stack
  80              		.loc 1 143 0
  81 002e 144B     		ldr	r3, .L5
  82 0030 0A44     		add	r2, r2, r1
  83 0032 616A     		ldr	r1, [r4, #36]
  84 0034 206A     		ldr	r0, [r4, #32]
  85 0036 FFF7FEFF 		bl	rt_hw_stack_init
  86              	.LVL7:
  87 003a E061     		str	r0, [r4, #28]
 145:rt-thread/src/thread.c ****                                           (void *)rt_thread_exit);
 146:rt-thread/src/thread.c **** #endif
 147:rt-thread/src/thread.c **** 
 148:rt-thread/src/thread.c ****     /* priority init */
 149:rt-thread/src/thread.c ****     RT_ASSERT(priority < RT_THREAD_PRIORITY_MAX);
ARM GAS  /tmp/ccxK9JzO.s 			page 6


  88              		.loc 1 149 0
  89 003c 1F2D     		cmp	r5, #31
  90 003e 18D8     		bhi	.L4
  91              	.L2:
 150:rt-thread/src/thread.c ****     thread->init_priority    = priority;
  92              		.loc 1 150 0
  93 0040 84F83650 		strb	r5, [r4, #54]
 151:rt-thread/src/thread.c ****     thread->current_priority = priority;
  94              		.loc 1 151 0
  95 0044 84F83550 		strb	r5, [r4, #53]
 152:rt-thread/src/thread.c **** 
 153:rt-thread/src/thread.c ****     thread->number_mask = 0;
  96              		.loc 1 153 0
  97 0048 0025     		movs	r5, #0
  98 004a A563     		str	r5, [r4, #56]
 154:rt-thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 155:rt-thread/src/thread.c ****     thread->number = 0;
 156:rt-thread/src/thread.c ****     thread->high_mask = 0;
 157:rt-thread/src/thread.c **** #endif
 158:rt-thread/src/thread.c **** 
 159:rt-thread/src/thread.c ****     /* tick init */
 160:rt-thread/src/thread.c ****     thread->init_tick      = tick;
  99              		.loc 1 160 0
 100 004c E663     		str	r6, [r4, #60]
 161:rt-thread/src/thread.c ****     thread->remaining_tick = tick;
 101              		.loc 1 161 0
 102 004e 2664     		str	r6, [r4, #64]
 162:rt-thread/src/thread.c **** 
 163:rt-thread/src/thread.c ****     /* error and flags */
 164:rt-thread/src/thread.c ****     thread->error = RT_EOK;
 103              		.loc 1 164 0
 104 0050 2563     		str	r5, [r4, #48]
 165:rt-thread/src/thread.c ****     thread->stat  = RT_THREAD_INIT;
 105              		.loc 1 165 0
 106 0052 84F83450 		strb	r5, [r4, #52]
 166:rt-thread/src/thread.c **** 
 167:rt-thread/src/thread.c **** #ifdef RT_USING_SMP
 168:rt-thread/src/thread.c ****     /* not bind on any cpu */
 169:rt-thread/src/thread.c ****     thread->bind_cpu = RT_CPUS_NR;
 170:rt-thread/src/thread.c ****     thread->oncpu = RT_CPU_DETACHED;
 171:rt-thread/src/thread.c **** 
 172:rt-thread/src/thread.c ****     /* lock init */
 173:rt-thread/src/thread.c ****     thread->scheduler_lock_nest = 0;
 174:rt-thread/src/thread.c ****     thread->cpus_lock_nest = 0;
 175:rt-thread/src/thread.c ****     thread->critical_lock_nest = 0;
 176:rt-thread/src/thread.c **** #endif /*RT_USING_SMP*/
 177:rt-thread/src/thread.c **** 
 178:rt-thread/src/thread.c ****     /* initialize cleanup function and user data */
 179:rt-thread/src/thread.c ****     thread->cleanup   = 0;
 107              		.loc 1 179 0
 108 0056 2567     		str	r5, [r4, #112]
 180:rt-thread/src/thread.c ****     thread->user_data = 0;
 109              		.loc 1 180 0
 110 0058 6567     		str	r5, [r4, #116]
 181:rt-thread/src/thread.c **** 
 182:rt-thread/src/thread.c ****     /* initialize thread timer */
 183:rt-thread/src/thread.c ****     rt_timer_init(&(thread->thread_timer),
ARM GAS  /tmp/ccxK9JzO.s 			page 7


 111              		.loc 1 183 0
 112 005a 0195     		str	r5, [sp, #4]
 113 005c 0095     		str	r5, [sp]
 114 005e 2346     		mov	r3, r4
 115 0060 084A     		ldr	r2, .L5+4
 116 0062 2146     		mov	r1, r4
 117 0064 04F14400 		add	r0, r4, #68
 118 0068 FFF7FEFF 		bl	rt_timer_init
 119              	.LVL8:
 184:rt-thread/src/thread.c ****                   thread->name,
 185:rt-thread/src/thread.c ****                   rt_thread_timeout,
 186:rt-thread/src/thread.c ****                   thread,
 187:rt-thread/src/thread.c ****                   0,
 188:rt-thread/src/thread.c ****                   RT_TIMER_FLAG_ONE_SHOT);
 189:rt-thread/src/thread.c **** 
 190:rt-thread/src/thread.c ****     /* initialize signal */
 191:rt-thread/src/thread.c **** #ifdef RT_USING_SIGNALS
 192:rt-thread/src/thread.c ****     thread->sig_mask    = 0x00;
 193:rt-thread/src/thread.c ****     thread->sig_pending = 0x00;
 194:rt-thread/src/thread.c **** 
 195:rt-thread/src/thread.c **** #ifndef RT_USING_SMP
 196:rt-thread/src/thread.c ****     thread->sig_ret     = RT_NULL;
 197:rt-thread/src/thread.c **** #endif
 198:rt-thread/src/thread.c ****     thread->sig_vectors = RT_NULL;
 199:rt-thread/src/thread.c ****     thread->si_list     = RT_NULL;
 200:rt-thread/src/thread.c **** #endif
 201:rt-thread/src/thread.c **** 
 202:rt-thread/src/thread.c **** #ifdef RT_USING_LWP
 203:rt-thread/src/thread.c ****     thread->lwp = RT_NULL;
 204:rt-thread/src/thread.c **** #endif
 205:rt-thread/src/thread.c **** 
 206:rt-thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_inited_hook, (thread));
 207:rt-thread/src/thread.c **** 
 208:rt-thread/src/thread.c ****     return RT_EOK;
 209:rt-thread/src/thread.c **** }
 120              		.loc 1 209 0
 121 006c 2846     		mov	r0, r5
 122 006e 03B0     		add	sp, sp, #12
 123              	.LCFI2:
 124              		.cfi_remember_state
 125              		.cfi_def_cfa_offset 20
 126              		@ sp needed
 127 0070 F0BD     		pop	{r4, r5, r6, r7, pc}
 128              	.LVL9:
 129              	.L4:
 130              	.LCFI3:
 131              		.cfi_restore_state
 149:rt-thread/src/thread.c ****     thread->init_priority    = priority;
 132              		.loc 1 149 0 discriminator 1
 133 0072 9522     		movs	r2, #149
 134 0074 0449     		ldr	r1, .L5+8
 135 0076 0548     		ldr	r0, .L5+12
 136 0078 FFF7FEFF 		bl	rt_assert_handler
 137              	.LVL10:
 138 007c E0E7     		b	.L2
 139              	.L6:
 140 007e 00BF     		.align	2
ARM GAS  /tmp/ccxK9JzO.s 			page 8


 141              	.L5:
 142 0080 00000000 		.word	rt_thread_exit
 143 0084 00000000 		.word	rt_thread_timeout
 144 0088 00000000 		.word	.LANCHOR0
 145 008c 00000000 		.word	.LC0
 146              		.cfi_endproc
 147              	.LFE16:
 149              		.section	.text.rt_thread_timeout,"ax",%progbits
 150              		.align	1
 151              		.global	rt_thread_timeout
 152              		.syntax unified
 153              		.thumb
 154              		.thumb_func
 155              		.fpu fpv4-sp-d16
 157              	rt_thread_timeout:
 158              	.LFB31:
 210:rt-thread/src/thread.c **** 
 211:rt-thread/src/thread.c **** /**
 212:rt-thread/src/thread.c ****  * @addtogroup Thread
 213:rt-thread/src/thread.c ****  */
 214:rt-thread/src/thread.c **** 
 215:rt-thread/src/thread.c **** /**@{*/
 216:rt-thread/src/thread.c **** 
 217:rt-thread/src/thread.c **** /**
 218:rt-thread/src/thread.c ****  * This function will initialize a thread, normally it's used to initialize a
 219:rt-thread/src/thread.c ****  * static thread object.
 220:rt-thread/src/thread.c ****  *
 221:rt-thread/src/thread.c ****  * @param thread the static thread object
 222:rt-thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 223:rt-thread/src/thread.c ****  * @param entry the entry function of thread
 224:rt-thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 225:rt-thread/src/thread.c ****  * @param stack_start the start address of thread stack
 226:rt-thread/src/thread.c ****  * @param stack_size the size of thread stack
 227:rt-thread/src/thread.c ****  * @param priority the priority of thread
 228:rt-thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 229:rt-thread/src/thread.c ****  *
 230:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 231:rt-thread/src/thread.c ****  */
 232:rt-thread/src/thread.c **** rt_err_t rt_thread_init(struct rt_thread *thread,
 233:rt-thread/src/thread.c ****                         const char       *name,
 234:rt-thread/src/thread.c ****                         void (*entry)(void *parameter),
 235:rt-thread/src/thread.c ****                         void             *parameter,
 236:rt-thread/src/thread.c ****                         void             *stack_start,
 237:rt-thread/src/thread.c ****                         rt_uint32_t       stack_size,
 238:rt-thread/src/thread.c ****                         rt_uint8_t        priority,
 239:rt-thread/src/thread.c ****                         rt_uint32_t       tick)
 240:rt-thread/src/thread.c **** {
 241:rt-thread/src/thread.c ****     /* thread check */
 242:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 243:rt-thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 244:rt-thread/src/thread.c **** 
 245:rt-thread/src/thread.c ****     /* initialize thread object */
 246:rt-thread/src/thread.c ****     rt_object_init((rt_object_t)thread, RT_Object_Class_Thread, name);
 247:rt-thread/src/thread.c **** 
 248:rt-thread/src/thread.c ****     return _rt_thread_init(thread,
 249:rt-thread/src/thread.c ****                            name,
 250:rt-thread/src/thread.c ****                            entry,
ARM GAS  /tmp/ccxK9JzO.s 			page 9


 251:rt-thread/src/thread.c ****                            parameter,
 252:rt-thread/src/thread.c ****                            stack_start,
 253:rt-thread/src/thread.c ****                            stack_size,
 254:rt-thread/src/thread.c ****                            priority,
 255:rt-thread/src/thread.c ****                            tick);
 256:rt-thread/src/thread.c **** }
 257:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_init);
 258:rt-thread/src/thread.c **** 
 259:rt-thread/src/thread.c **** /**
 260:rt-thread/src/thread.c ****  * This function will return self thread object
 261:rt-thread/src/thread.c ****  *
 262:rt-thread/src/thread.c ****  * @return the self thread object
 263:rt-thread/src/thread.c ****  */
 264:rt-thread/src/thread.c **** rt_thread_t rt_thread_self(void)
 265:rt-thread/src/thread.c **** {
 266:rt-thread/src/thread.c **** #ifdef RT_USING_SMP
 267:rt-thread/src/thread.c ****     rt_base_t lock;
 268:rt-thread/src/thread.c ****     rt_thread_t self;
 269:rt-thread/src/thread.c **** 
 270:rt-thread/src/thread.c ****     lock = rt_hw_local_irq_disable();
 271:rt-thread/src/thread.c ****     self = rt_cpu_self()->current_thread;
 272:rt-thread/src/thread.c ****     rt_hw_local_irq_enable(lock);
 273:rt-thread/src/thread.c ****     return self;
 274:rt-thread/src/thread.c **** #else
 275:rt-thread/src/thread.c ****     extern rt_thread_t rt_current_thread;
 276:rt-thread/src/thread.c **** 
 277:rt-thread/src/thread.c ****     return rt_current_thread;
 278:rt-thread/src/thread.c **** #endif
 279:rt-thread/src/thread.c **** }
 280:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_self);
 281:rt-thread/src/thread.c **** 
 282:rt-thread/src/thread.c **** /**
 283:rt-thread/src/thread.c ****  * This function will start a thread and put it to system ready queue
 284:rt-thread/src/thread.c ****  *
 285:rt-thread/src/thread.c ****  * @param thread the thread to be started
 286:rt-thread/src/thread.c ****  *
 287:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 288:rt-thread/src/thread.c ****  */
 289:rt-thread/src/thread.c **** rt_err_t rt_thread_startup(rt_thread_t thread)
 290:rt-thread/src/thread.c **** {
 291:rt-thread/src/thread.c ****     /* thread check */
 292:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 293:rt-thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 294:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 295:rt-thread/src/thread.c **** 
 296:rt-thread/src/thread.c ****     /* set current priority to initialize priority */
 297:rt-thread/src/thread.c ****     thread->current_priority = thread->init_priority;
 298:rt-thread/src/thread.c **** 
 299:rt-thread/src/thread.c ****     /* calculate priority attribute */
 300:rt-thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 301:rt-thread/src/thread.c ****     thread->number      = thread->current_priority >> 3;            /* 5bit */
 302:rt-thread/src/thread.c ****     thread->number_mask = 1L << thread->number;
 303:rt-thread/src/thread.c ****     thread->high_mask   = 1L << (thread->current_priority & 0x07);  /* 3bit */
 304:rt-thread/src/thread.c **** #else
 305:rt-thread/src/thread.c ****     thread->number_mask = 1L << thread->current_priority;
 306:rt-thread/src/thread.c **** #endif
 307:rt-thread/src/thread.c **** 
ARM GAS  /tmp/ccxK9JzO.s 			page 10


 308:rt-thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("startup a thread:%s with priority:%d\n",
 309:rt-thread/src/thread.c ****                                    thread->name, thread->init_priority));
 310:rt-thread/src/thread.c ****     /* change thread stat */
 311:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND;
 312:rt-thread/src/thread.c ****     /* then resume it */
 313:rt-thread/src/thread.c ****     rt_thread_resume(thread);
 314:rt-thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 315:rt-thread/src/thread.c ****     {
 316:rt-thread/src/thread.c ****         /* do a scheduling */
 317:rt-thread/src/thread.c ****         rt_schedule();
 318:rt-thread/src/thread.c ****     }
 319:rt-thread/src/thread.c **** 
 320:rt-thread/src/thread.c ****     return RT_EOK;
 321:rt-thread/src/thread.c **** }
 322:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_startup);
 323:rt-thread/src/thread.c **** 
 324:rt-thread/src/thread.c **** /**
 325:rt-thread/src/thread.c ****  * This function will detach a thread. The thread object will be removed from
 326:rt-thread/src/thread.c ****  * thread queue and detached/deleted from system object management.
 327:rt-thread/src/thread.c ****  *
 328:rt-thread/src/thread.c ****  * @param thread the thread to be deleted
 329:rt-thread/src/thread.c ****  *
 330:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 331:rt-thread/src/thread.c ****  */
 332:rt-thread/src/thread.c **** rt_err_t rt_thread_detach(rt_thread_t thread)
 333:rt-thread/src/thread.c **** {
 334:rt-thread/src/thread.c ****     rt_base_t lock;
 335:rt-thread/src/thread.c **** 
 336:rt-thread/src/thread.c ****     /* thread check */
 337:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 338:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 339:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 340:rt-thread/src/thread.c **** 
 341:rt-thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 342:rt-thread/src/thread.c ****     {
 343:rt-thread/src/thread.c ****         /* remove from schedule */
 344:rt-thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 345:rt-thread/src/thread.c ****     }
 346:rt-thread/src/thread.c **** 
 347:rt-thread/src/thread.c ****     /* release thread timer */
 348:rt-thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 349:rt-thread/src/thread.c **** 
 350:rt-thread/src/thread.c ****     /* change stat */
 351:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 352:rt-thread/src/thread.c **** 
 353:rt-thread/src/thread.c ****     if ((rt_object_is_systemobject((rt_object_t)thread) == RT_TRUE) &&
 354:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 355:rt-thread/src/thread.c ****     {
 356:rt-thread/src/thread.c ****         rt_object_detach((rt_object_t)thread);
 357:rt-thread/src/thread.c ****     }
 358:rt-thread/src/thread.c ****     else
 359:rt-thread/src/thread.c ****     {
 360:rt-thread/src/thread.c ****         /* disable interrupt */
 361:rt-thread/src/thread.c ****         lock = rt_hw_interrupt_disable();
 362:rt-thread/src/thread.c ****         /* insert to defunct thread list */
 363:rt-thread/src/thread.c ****         rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 364:rt-thread/src/thread.c ****         /* enable interrupt */
ARM GAS  /tmp/ccxK9JzO.s 			page 11


 365:rt-thread/src/thread.c ****         rt_hw_interrupt_enable(lock);
 366:rt-thread/src/thread.c ****     }
 367:rt-thread/src/thread.c **** 
 368:rt-thread/src/thread.c ****     return RT_EOK;
 369:rt-thread/src/thread.c **** }
 370:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_detach);
 371:rt-thread/src/thread.c **** 
 372:rt-thread/src/thread.c **** #ifdef RT_USING_HEAP
 373:rt-thread/src/thread.c **** /**
 374:rt-thread/src/thread.c ****  * This function will create a thread object and allocate thread object memory
 375:rt-thread/src/thread.c ****  * and stack.
 376:rt-thread/src/thread.c ****  *
 377:rt-thread/src/thread.c ****  * @param name the name of thread, which shall be unique
 378:rt-thread/src/thread.c ****  * @param entry the entry function of thread
 379:rt-thread/src/thread.c ****  * @param parameter the parameter of thread enter function
 380:rt-thread/src/thread.c ****  * @param stack_size the size of thread stack
 381:rt-thread/src/thread.c ****  * @param priority the priority of thread
 382:rt-thread/src/thread.c ****  * @param tick the time slice if there are same priority thread
 383:rt-thread/src/thread.c ****  *
 384:rt-thread/src/thread.c ****  * @return the created thread object
 385:rt-thread/src/thread.c ****  */
 386:rt-thread/src/thread.c **** rt_thread_t rt_thread_create(const char *name,
 387:rt-thread/src/thread.c ****                              void (*entry)(void *parameter),
 388:rt-thread/src/thread.c ****                              void       *parameter,
 389:rt-thread/src/thread.c ****                              rt_uint32_t stack_size,
 390:rt-thread/src/thread.c ****                              rt_uint8_t  priority,
 391:rt-thread/src/thread.c ****                              rt_uint32_t tick)
 392:rt-thread/src/thread.c **** {
 393:rt-thread/src/thread.c ****     struct rt_thread *thread;
 394:rt-thread/src/thread.c ****     void *stack_start;
 395:rt-thread/src/thread.c **** 
 396:rt-thread/src/thread.c ****     thread = (struct rt_thread *)rt_object_allocate(RT_Object_Class_Thread,
 397:rt-thread/src/thread.c ****                                                     name);
 398:rt-thread/src/thread.c ****     if (thread == RT_NULL)
 399:rt-thread/src/thread.c ****         return RT_NULL;
 400:rt-thread/src/thread.c **** 
 401:rt-thread/src/thread.c ****     stack_start = (void *)RT_KERNEL_MALLOC(stack_size);
 402:rt-thread/src/thread.c ****     if (stack_start == RT_NULL)
 403:rt-thread/src/thread.c ****     {
 404:rt-thread/src/thread.c ****         /* allocate stack failure */
 405:rt-thread/src/thread.c ****         rt_object_delete((rt_object_t)thread);
 406:rt-thread/src/thread.c **** 
 407:rt-thread/src/thread.c ****         return RT_NULL;
 408:rt-thread/src/thread.c ****     }
 409:rt-thread/src/thread.c **** 
 410:rt-thread/src/thread.c ****     _rt_thread_init(thread,
 411:rt-thread/src/thread.c ****                     name,
 412:rt-thread/src/thread.c ****                     entry,
 413:rt-thread/src/thread.c ****                     parameter,
 414:rt-thread/src/thread.c ****                     stack_start,
 415:rt-thread/src/thread.c ****                     stack_size,
 416:rt-thread/src/thread.c ****                     priority,
 417:rt-thread/src/thread.c ****                     tick);
 418:rt-thread/src/thread.c **** 
 419:rt-thread/src/thread.c ****     return thread;
 420:rt-thread/src/thread.c **** }
 421:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_create);
ARM GAS  /tmp/ccxK9JzO.s 			page 12


 422:rt-thread/src/thread.c **** 
 423:rt-thread/src/thread.c **** /**
 424:rt-thread/src/thread.c ****  * This function will delete a thread. The thread object will be removed from
 425:rt-thread/src/thread.c ****  * thread queue and deleted from system object management in the idle thread.
 426:rt-thread/src/thread.c ****  *
 427:rt-thread/src/thread.c ****  * @param thread the thread to be deleted
 428:rt-thread/src/thread.c ****  *
 429:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 430:rt-thread/src/thread.c ****  */
 431:rt-thread/src/thread.c **** rt_err_t rt_thread_delete(rt_thread_t thread)
 432:rt-thread/src/thread.c **** {
 433:rt-thread/src/thread.c ****     rt_base_t lock;
 434:rt-thread/src/thread.c **** 
 435:rt-thread/src/thread.c ****     /* thread check */
 436:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 437:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 438:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 439:rt-thread/src/thread.c **** 
 440:rt-thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 441:rt-thread/src/thread.c ****     {
 442:rt-thread/src/thread.c ****         /* remove from schedule */
 443:rt-thread/src/thread.c ****         rt_schedule_remove_thread(thread);
 444:rt-thread/src/thread.c ****     }
 445:rt-thread/src/thread.c **** 
 446:rt-thread/src/thread.c ****     /* release thread timer */
 447:rt-thread/src/thread.c ****     rt_timer_detach(&(thread->thread_timer));
 448:rt-thread/src/thread.c **** 
 449:rt-thread/src/thread.c ****     /* disable interrupt */
 450:rt-thread/src/thread.c ****     lock = rt_hw_interrupt_disable();
 451:rt-thread/src/thread.c **** 
 452:rt-thread/src/thread.c ****     /* change stat */
 453:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_CLOSE;
 454:rt-thread/src/thread.c **** 
 455:rt-thread/src/thread.c ****     /* insert to defunct thread list */
 456:rt-thread/src/thread.c ****     rt_list_insert_after(&rt_thread_defunct, &(thread->tlist));
 457:rt-thread/src/thread.c **** 
 458:rt-thread/src/thread.c ****     /* enable interrupt */
 459:rt-thread/src/thread.c ****     rt_hw_interrupt_enable(lock);
 460:rt-thread/src/thread.c **** 
 461:rt-thread/src/thread.c ****     return RT_EOK;
 462:rt-thread/src/thread.c **** }
 463:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delete);
 464:rt-thread/src/thread.c **** #endif
 465:rt-thread/src/thread.c **** 
 466:rt-thread/src/thread.c **** /**
 467:rt-thread/src/thread.c ****  * This function will let current thread yield processor, and scheduler will
 468:rt-thread/src/thread.c ****  * choose a highest thread to run. After yield processor, the current thread
 469:rt-thread/src/thread.c ****  * is still in READY state.
 470:rt-thread/src/thread.c ****  *
 471:rt-thread/src/thread.c ****  * @return RT_EOK
 472:rt-thread/src/thread.c ****  */
 473:rt-thread/src/thread.c **** rt_err_t rt_thread_yield(void)
 474:rt-thread/src/thread.c **** {
 475:rt-thread/src/thread.c ****     rt_schedule();
 476:rt-thread/src/thread.c **** 
 477:rt-thread/src/thread.c ****     return RT_EOK;
 478:rt-thread/src/thread.c **** }
ARM GAS  /tmp/ccxK9JzO.s 			page 13


 479:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_yield);
 480:rt-thread/src/thread.c **** 
 481:rt-thread/src/thread.c **** /**
 482:rt-thread/src/thread.c ****  * This function will let current thread sleep for some ticks.
 483:rt-thread/src/thread.c ****  *
 484:rt-thread/src/thread.c ****  * @param tick the sleep ticks
 485:rt-thread/src/thread.c ****  *
 486:rt-thread/src/thread.c ****  * @return RT_EOK
 487:rt-thread/src/thread.c ****  */
 488:rt-thread/src/thread.c **** rt_err_t rt_thread_sleep(rt_tick_t tick)
 489:rt-thread/src/thread.c **** {
 490:rt-thread/src/thread.c ****     register rt_base_t temp;
 491:rt-thread/src/thread.c ****     struct rt_thread *thread;
 492:rt-thread/src/thread.c **** 
 493:rt-thread/src/thread.c ****     /* set to current thread */
 494:rt-thread/src/thread.c ****     thread = rt_thread_self();
 495:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 496:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 497:rt-thread/src/thread.c **** 
 498:rt-thread/src/thread.c ****     /* disable interrupt */
 499:rt-thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 500:rt-thread/src/thread.c **** 
 501:rt-thread/src/thread.c ****     /* suspend thread */
 502:rt-thread/src/thread.c ****     rt_thread_suspend(thread);
 503:rt-thread/src/thread.c **** 
 504:rt-thread/src/thread.c ****     /* reset the timeout of thread timer and start it */
 505:rt-thread/src/thread.c ****     rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, &tick);
 506:rt-thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 507:rt-thread/src/thread.c **** 
 508:rt-thread/src/thread.c ****     /* enable interrupt */
 509:rt-thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 510:rt-thread/src/thread.c **** 
 511:rt-thread/src/thread.c ****     rt_schedule();
 512:rt-thread/src/thread.c **** 
 513:rt-thread/src/thread.c ****     /* clear error number of this thread to RT_EOK */
 514:rt-thread/src/thread.c ****     if (thread->error == -RT_ETIMEOUT)
 515:rt-thread/src/thread.c ****         thread->error = RT_EOK;
 516:rt-thread/src/thread.c **** 
 517:rt-thread/src/thread.c ****     return RT_EOK;
 518:rt-thread/src/thread.c **** }
 519:rt-thread/src/thread.c **** 
 520:rt-thread/src/thread.c **** /**
 521:rt-thread/src/thread.c ****  * This function will let current thread delay for some ticks.
 522:rt-thread/src/thread.c ****  *
 523:rt-thread/src/thread.c ****  * @param tick the delay ticks
 524:rt-thread/src/thread.c ****  *
 525:rt-thread/src/thread.c ****  * @return RT_EOK
 526:rt-thread/src/thread.c ****  */
 527:rt-thread/src/thread.c **** rt_err_t rt_thread_delay(rt_tick_t tick)
 528:rt-thread/src/thread.c **** {
 529:rt-thread/src/thread.c ****     return rt_thread_sleep(tick);
 530:rt-thread/src/thread.c **** }
 531:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delay);
 532:rt-thread/src/thread.c **** 
 533:rt-thread/src/thread.c **** /**
 534:rt-thread/src/thread.c ****  * This function will let current thread delay until (*tick + inc_tick).
 535:rt-thread/src/thread.c ****  *
ARM GAS  /tmp/ccxK9JzO.s 			page 14


 536:rt-thread/src/thread.c ****  * @param tick the tick of last wakeup.
 537:rt-thread/src/thread.c ****  * @param inc_tick the increment tick
 538:rt-thread/src/thread.c ****  *
 539:rt-thread/src/thread.c ****  * @return RT_EOK
 540:rt-thread/src/thread.c ****  */
 541:rt-thread/src/thread.c **** rt_err_t rt_thread_delay_until(rt_tick_t *tick, rt_tick_t inc_tick)
 542:rt-thread/src/thread.c **** {
 543:rt-thread/src/thread.c ****     register rt_base_t level;
 544:rt-thread/src/thread.c ****     struct rt_thread *thread;
 545:rt-thread/src/thread.c **** 
 546:rt-thread/src/thread.c ****     RT_ASSERT(tick != RT_NULL);
 547:rt-thread/src/thread.c **** 
 548:rt-thread/src/thread.c ****     /* set to current thread */
 549:rt-thread/src/thread.c ****     thread = rt_thread_self();
 550:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 551:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 552:rt-thread/src/thread.c **** 
 553:rt-thread/src/thread.c ****     /* disable interrupt */
 554:rt-thread/src/thread.c ****     level = rt_hw_interrupt_disable();
 555:rt-thread/src/thread.c **** 
 556:rt-thread/src/thread.c ****     if (rt_tick_get() - *tick < inc_tick)
 557:rt-thread/src/thread.c ****     {
 558:rt-thread/src/thread.c ****         *tick = rt_tick_get() - *tick + inc_tick;
 559:rt-thread/src/thread.c **** 
 560:rt-thread/src/thread.c ****         /* suspend thread */
 561:rt-thread/src/thread.c ****         rt_thread_suspend(thread);
 562:rt-thread/src/thread.c **** 
 563:rt-thread/src/thread.c ****         /* reset the timeout of thread timer and start it */
 564:rt-thread/src/thread.c ****         rt_timer_control(&(thread->thread_timer), RT_TIMER_CTRL_SET_TIME, tick);
 565:rt-thread/src/thread.c ****         rt_timer_start(&(thread->thread_timer));
 566:rt-thread/src/thread.c **** 
 567:rt-thread/src/thread.c ****         /* enable interrupt */
 568:rt-thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 569:rt-thread/src/thread.c **** 
 570:rt-thread/src/thread.c ****         rt_schedule();
 571:rt-thread/src/thread.c **** 
 572:rt-thread/src/thread.c ****         /* clear error number of this thread to RT_EOK */
 573:rt-thread/src/thread.c ****         if (thread->error == -RT_ETIMEOUT)
 574:rt-thread/src/thread.c ****         {
 575:rt-thread/src/thread.c ****             thread->error = RT_EOK;
 576:rt-thread/src/thread.c ****         }
 577:rt-thread/src/thread.c ****     }
 578:rt-thread/src/thread.c ****     else
 579:rt-thread/src/thread.c ****     {
 580:rt-thread/src/thread.c ****         rt_hw_interrupt_enable(level);
 581:rt-thread/src/thread.c ****     }
 582:rt-thread/src/thread.c **** 
 583:rt-thread/src/thread.c ****     /* get the wakeup tick */
 584:rt-thread/src/thread.c ****     *tick = rt_tick_get();
 585:rt-thread/src/thread.c **** 
 586:rt-thread/src/thread.c ****     return RT_EOK;
 587:rt-thread/src/thread.c **** }
 588:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delay_util);
 589:rt-thread/src/thread.c **** 
 590:rt-thread/src/thread.c **** /**
 591:rt-thread/src/thread.c ****  * This function will let current thread delay for some milliseconds.
 592:rt-thread/src/thread.c ****  *
ARM GAS  /tmp/ccxK9JzO.s 			page 15


 593:rt-thread/src/thread.c ****  * @param tick the delay time
 594:rt-thread/src/thread.c ****  *
 595:rt-thread/src/thread.c ****  * @return RT_EOK
 596:rt-thread/src/thread.c ****  */
 597:rt-thread/src/thread.c **** rt_err_t rt_thread_mdelay(rt_int32_t ms)
 598:rt-thread/src/thread.c **** {
 599:rt-thread/src/thread.c ****     rt_tick_t tick;
 600:rt-thread/src/thread.c **** 
 601:rt-thread/src/thread.c ****     tick = rt_tick_from_millisecond(ms);
 602:rt-thread/src/thread.c **** 
 603:rt-thread/src/thread.c ****     return rt_thread_sleep(tick);
 604:rt-thread/src/thread.c **** }
 605:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_mdelay);
 606:rt-thread/src/thread.c **** 
 607:rt-thread/src/thread.c **** /**
 608:rt-thread/src/thread.c ****  * This function will control thread behaviors according to control command.
 609:rt-thread/src/thread.c ****  *
 610:rt-thread/src/thread.c ****  * @param thread the specified thread to be controlled
 611:rt-thread/src/thread.c ****  * @param cmd the control command, which includes
 612:rt-thread/src/thread.c ****  *  RT_THREAD_CTRL_CHANGE_PRIORITY for changing priority level of thread;
 613:rt-thread/src/thread.c ****  *  RT_THREAD_CTRL_STARTUP for starting a thread;
 614:rt-thread/src/thread.c ****  *  RT_THREAD_CTRL_CLOSE for delete a thread;
 615:rt-thread/src/thread.c ****  *  RT_THREAD_CTRL_BIND_CPU for bind the thread to a CPU.
 616:rt-thread/src/thread.c ****  * @param arg the argument of control command
 617:rt-thread/src/thread.c ****  *
 618:rt-thread/src/thread.c ****  * @return RT_EOK
 619:rt-thread/src/thread.c ****  */
 620:rt-thread/src/thread.c **** rt_err_t rt_thread_control(rt_thread_t thread, int cmd, void *arg)
 621:rt-thread/src/thread.c **** {
 622:rt-thread/src/thread.c ****     register rt_base_t temp;
 623:rt-thread/src/thread.c **** 
 624:rt-thread/src/thread.c ****     /* thread check */
 625:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 626:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 627:rt-thread/src/thread.c **** 
 628:rt-thread/src/thread.c ****     switch (cmd)
 629:rt-thread/src/thread.c ****     {
 630:rt-thread/src/thread.c ****     case RT_THREAD_CTRL_CHANGE_PRIORITY:
 631:rt-thread/src/thread.c ****         /* disable interrupt */
 632:rt-thread/src/thread.c ****         temp = rt_hw_interrupt_disable();
 633:rt-thread/src/thread.c **** 
 634:rt-thread/src/thread.c ****         /* for ready thread, change queue */
 635:rt-thread/src/thread.c ****         if ((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_READY)
 636:rt-thread/src/thread.c ****         {
 637:rt-thread/src/thread.c ****             /* remove thread from schedule queue first */
 638:rt-thread/src/thread.c ****             rt_schedule_remove_thread(thread);
 639:rt-thread/src/thread.c **** 
 640:rt-thread/src/thread.c ****             /* change thread priority */
 641:rt-thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 642:rt-thread/src/thread.c **** 
 643:rt-thread/src/thread.c ****             /* recalculate priority attribute */
 644:rt-thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 645:rt-thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 646:rt-thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 647:rt-thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 648:rt-thread/src/thread.c **** #else
 649:rt-thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
ARM GAS  /tmp/ccxK9JzO.s 			page 16


 650:rt-thread/src/thread.c **** #endif
 651:rt-thread/src/thread.c **** 
 652:rt-thread/src/thread.c ****             /* insert thread to schedule queue again */
 653:rt-thread/src/thread.c ****             rt_schedule_insert_thread(thread);
 654:rt-thread/src/thread.c ****         }
 655:rt-thread/src/thread.c ****         else
 656:rt-thread/src/thread.c ****         {
 657:rt-thread/src/thread.c ****             thread->current_priority = *(rt_uint8_t *)arg;
 658:rt-thread/src/thread.c **** 
 659:rt-thread/src/thread.c ****             /* recalculate priority attribute */
 660:rt-thread/src/thread.c **** #if RT_THREAD_PRIORITY_MAX > 32
 661:rt-thread/src/thread.c ****             thread->number      = thread->current_priority >> 3;            /* 5bit */
 662:rt-thread/src/thread.c ****             thread->number_mask = 1 << thread->number;
 663:rt-thread/src/thread.c ****             thread->high_mask   = 1 << (thread->current_priority & 0x07);   /* 3bit */
 664:rt-thread/src/thread.c **** #else
 665:rt-thread/src/thread.c ****             thread->number_mask = 1 << thread->current_priority;
 666:rt-thread/src/thread.c **** #endif
 667:rt-thread/src/thread.c ****         }
 668:rt-thread/src/thread.c **** 
 669:rt-thread/src/thread.c ****         /* enable interrupt */
 670:rt-thread/src/thread.c ****         rt_hw_interrupt_enable(temp);
 671:rt-thread/src/thread.c ****         break;
 672:rt-thread/src/thread.c **** 
 673:rt-thread/src/thread.c ****     case RT_THREAD_CTRL_STARTUP:
 674:rt-thread/src/thread.c ****         return rt_thread_startup(thread);
 675:rt-thread/src/thread.c **** 
 676:rt-thread/src/thread.c **** #ifdef RT_USING_HEAP
 677:rt-thread/src/thread.c ****     case RT_THREAD_CTRL_CLOSE:
 678:rt-thread/src/thread.c ****         return rt_thread_delete(thread);
 679:rt-thread/src/thread.c **** #endif
 680:rt-thread/src/thread.c **** 
 681:rt-thread/src/thread.c **** #ifdef RT_USING_SMP
 682:rt-thread/src/thread.c ****     case RT_THREAD_CTRL_BIND_CPU:
 683:rt-thread/src/thread.c ****     {
 684:rt-thread/src/thread.c ****         rt_uint8_t cpu;
 685:rt-thread/src/thread.c **** 
 686:rt-thread/src/thread.c ****         if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_INIT)
 687:rt-thread/src/thread.c ****         {
 688:rt-thread/src/thread.c ****             /* we only support bind cpu before started phase. */
 689:rt-thread/src/thread.c ****             return RT_ERROR;
 690:rt-thread/src/thread.c ****         }
 691:rt-thread/src/thread.c **** 
 692:rt-thread/src/thread.c ****         cpu = (rt_uint8_t)(size_t)arg;
 693:rt-thread/src/thread.c ****         thread->bind_cpu = cpu > RT_CPUS_NR? RT_CPUS_NR : cpu;
 694:rt-thread/src/thread.c ****         break;
 695:rt-thread/src/thread.c ****     }
 696:rt-thread/src/thread.c **** #endif /*RT_USING_SMP*/
 697:rt-thread/src/thread.c ****     default:
 698:rt-thread/src/thread.c ****         break;
 699:rt-thread/src/thread.c ****     }
 700:rt-thread/src/thread.c **** 
 701:rt-thread/src/thread.c ****     return RT_EOK;
 702:rt-thread/src/thread.c **** }
 703:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_control);
 704:rt-thread/src/thread.c **** 
 705:rt-thread/src/thread.c **** /**
 706:rt-thread/src/thread.c ****  * This function will suspend the specified thread.
ARM GAS  /tmp/ccxK9JzO.s 			page 17


 707:rt-thread/src/thread.c ****  *
 708:rt-thread/src/thread.c ****  * @param thread the thread to be suspended
 709:rt-thread/src/thread.c ****  *
 710:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 711:rt-thread/src/thread.c ****  *
 712:rt-thread/src/thread.c ****  * @note if suspend self thread, after this function call, the
 713:rt-thread/src/thread.c ****  * rt_schedule() must be invoked.
 714:rt-thread/src/thread.c ****  */
 715:rt-thread/src/thread.c **** rt_err_t rt_thread_suspend(rt_thread_t thread)
 716:rt-thread/src/thread.c **** {
 717:rt-thread/src/thread.c ****     register rt_base_t stat;
 718:rt-thread/src/thread.c ****     register rt_base_t temp;
 719:rt-thread/src/thread.c **** 
 720:rt-thread/src/thread.c ****     /* thread check */
 721:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 722:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 723:rt-thread/src/thread.c **** 
 724:rt-thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend:  %s\n", thread->name));
 725:rt-thread/src/thread.c **** 
 726:rt-thread/src/thread.c ****     stat = thread->stat & RT_THREAD_STAT_MASK;
 727:rt-thread/src/thread.c ****     if ((stat != RT_THREAD_READY) && (stat != RT_THREAD_RUNNING))
 728:rt-thread/src/thread.c ****     {
 729:rt-thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread suspend: thread disorder, 0x%2x\n",
 730:rt-thread/src/thread.c ****                                        thread->stat));
 731:rt-thread/src/thread.c ****         return -RT_ERROR;
 732:rt-thread/src/thread.c ****     }
 733:rt-thread/src/thread.c **** 
 734:rt-thread/src/thread.c ****     /* disable interrupt */
 735:rt-thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 736:rt-thread/src/thread.c ****     if (stat == RT_THREAD_RUNNING)
 737:rt-thread/src/thread.c ****     {
 738:rt-thread/src/thread.c ****         /* not suspend running status thread on other core */
 739:rt-thread/src/thread.c ****         RT_ASSERT(thread == rt_thread_self());
 740:rt-thread/src/thread.c ****     }
 741:rt-thread/src/thread.c **** 
 742:rt-thread/src/thread.c ****     /* change thread stat */
 743:rt-thread/src/thread.c ****     rt_schedule_remove_thread(thread);
 744:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 745:rt-thread/src/thread.c **** 
 746:rt-thread/src/thread.c ****     /* stop thread timer anyway */
 747:rt-thread/src/thread.c ****     rt_timer_stop(&(thread->thread_timer));
 748:rt-thread/src/thread.c **** 
 749:rt-thread/src/thread.c ****     /* enable interrupt */
 750:rt-thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 751:rt-thread/src/thread.c **** 
 752:rt-thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_suspend_hook, (thread));
 753:rt-thread/src/thread.c ****     return RT_EOK;
 754:rt-thread/src/thread.c **** }
 755:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_suspend);
 756:rt-thread/src/thread.c **** 
 757:rt-thread/src/thread.c **** /**
 758:rt-thread/src/thread.c ****  * This function will resume a thread and put it to system ready queue.
 759:rt-thread/src/thread.c ****  *
 760:rt-thread/src/thread.c ****  * @param thread the thread to be resumed
 761:rt-thread/src/thread.c ****  *
 762:rt-thread/src/thread.c ****  * @return the operation status, RT_EOK on OK, -RT_ERROR on error
 763:rt-thread/src/thread.c ****  */
ARM GAS  /tmp/ccxK9JzO.s 			page 18


 764:rt-thread/src/thread.c **** rt_err_t rt_thread_resume(rt_thread_t thread)
 765:rt-thread/src/thread.c **** {
 766:rt-thread/src/thread.c ****     register rt_base_t temp;
 767:rt-thread/src/thread.c **** 
 768:rt-thread/src/thread.c ****     /* thread check */
 769:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 770:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 771:rt-thread/src/thread.c **** 
 772:rt-thread/src/thread.c ****     RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume:  %s\n", thread->name));
 773:rt-thread/src/thread.c **** 
 774:rt-thread/src/thread.c ****     if ((thread->stat & RT_THREAD_STAT_MASK) != RT_THREAD_SUSPEND)
 775:rt-thread/src/thread.c ****     {
 776:rt-thread/src/thread.c ****         RT_DEBUG_LOG(RT_DEBUG_THREAD, ("thread resume: thread disorder, %d\n",
 777:rt-thread/src/thread.c ****                                        thread->stat));
 778:rt-thread/src/thread.c **** 
 779:rt-thread/src/thread.c ****         return -RT_ERROR;
 780:rt-thread/src/thread.c ****     }
 781:rt-thread/src/thread.c **** 
 782:rt-thread/src/thread.c ****     /* disable interrupt */
 783:rt-thread/src/thread.c ****     temp = rt_hw_interrupt_disable();
 784:rt-thread/src/thread.c **** 
 785:rt-thread/src/thread.c ****     /* remove from suspend list */
 786:rt-thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 787:rt-thread/src/thread.c **** 
 788:rt-thread/src/thread.c ****     rt_timer_stop(&thread->thread_timer);
 789:rt-thread/src/thread.c **** 
 790:rt-thread/src/thread.c ****     /* enable interrupt */
 791:rt-thread/src/thread.c ****     rt_hw_interrupt_enable(temp);
 792:rt-thread/src/thread.c **** 
 793:rt-thread/src/thread.c ****     /* insert to schedule ready list */
 794:rt-thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 795:rt-thread/src/thread.c **** 
 796:rt-thread/src/thread.c ****     RT_OBJECT_HOOK_CALL(rt_thread_resume_hook, (thread));
 797:rt-thread/src/thread.c ****     return RT_EOK;
 798:rt-thread/src/thread.c **** }
 799:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_resume);
 800:rt-thread/src/thread.c **** 
 801:rt-thread/src/thread.c **** /**
 802:rt-thread/src/thread.c ****  * This function is the timeout function for thread, normally which is invoked
 803:rt-thread/src/thread.c ****  * when thread is timeout to wait some resource.
 804:rt-thread/src/thread.c ****  *
 805:rt-thread/src/thread.c ****  * @param parameter the parameter of thread timeout function
 806:rt-thread/src/thread.c ****  */
 807:rt-thread/src/thread.c **** void rt_thread_timeout(void *parameter)
 808:rt-thread/src/thread.c **** {
 159              		.loc 1 808 0
 160              		.cfi_startproc
 161              		@ args = 0, pretend = 0, frame = 0
 162              		@ frame_needed = 0, uses_anonymous_args = 0
 163              	.LVL11:
 164 0000 10B5     		push	{r4, lr}
 165              	.LCFI4:
 166              		.cfi_def_cfa_offset 8
 167              		.cfi_offset 4, -8
 168              		.cfi_offset 14, -4
 169              	.LVL12:
 809:rt-thread/src/thread.c ****     struct rt_thread *thread;
ARM GAS  /tmp/ccxK9JzO.s 			page 19


 810:rt-thread/src/thread.c **** 
 811:rt-thread/src/thread.c ****     thread = (struct rt_thread *)parameter;
 812:rt-thread/src/thread.c **** 
 813:rt-thread/src/thread.c ****     /* thread check */
 814:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 170              		.loc 1 814 0
 171 0002 0446     		mov	r4, r0
 172 0004 48B3     		cbz	r0, .L12
 173              	.LVL13:
 174              	.L8:
 815:rt-thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
 175              		.loc 1 815 0
 176 0006 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 177 000a 03F00703 		and	r3, r3, #7
 178 000e 022B     		cmp	r3, #2
 179 0010 05D0     		beq	.L9
 180              		.loc 1 815 0 is_stmt 0 discriminator 1
 181 0012 40F22F32 		movw	r2, #815
 182 0016 1449     		ldr	r1, .L13
 183 0018 1448     		ldr	r0, .L13+4
 184 001a FFF7FEFF 		bl	rt_assert_handler
 185              	.LVL14:
 186              	.L9:
 816:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 187              		.loc 1 816 0 is_stmt 1
 188 001e 2046     		mov	r0, r4
 189 0020 FFF7FEFF 		bl	rt_object_get_type
 190              	.LVL15:
 191 0024 0128     		cmp	r0, #1
 192 0026 05D0     		beq	.L10
 193              		.loc 1 816 0 is_stmt 0 discriminator 1
 194 0028 4FF44C72 		mov	r2, #816
 195 002c 0E49     		ldr	r1, .L13
 196 002e 1048     		ldr	r0, .L13+8
 197 0030 FFF7FEFF 		bl	rt_assert_handler
 198              	.LVL16:
 199              	.L10:
 817:rt-thread/src/thread.c **** 
 818:rt-thread/src/thread.c ****     /* set error number */
 819:rt-thread/src/thread.c ****     thread->error = -RT_ETIMEOUT;
 200              		.loc 1 819 0 is_stmt 1
 201 0034 6FF00103 		mvn	r3, #1
 202 0038 2363     		str	r3, [r4, #48]
 820:rt-thread/src/thread.c **** 
 821:rt-thread/src/thread.c ****     /* remove from suspend list */
 822:rt-thread/src/thread.c ****     rt_list_remove(&(thread->tlist));
 203              		.loc 1 822 0
 204 003a 04F11403 		add	r3, r4, #20
 205              	.LVL17:
 206              	.LBB16:
 207              	.LBB17:
  50:rt-thread/include/rtservice.h **** }
  51:rt-thread/include/rtservice.h **** 
  52:rt-thread/include/rtservice.h **** /**
  53:rt-thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt-thread/include/rtservice.h ****  *
  55:rt-thread/include/rtservice.h ****  * @param l list to insert it
ARM GAS  /tmp/ccxK9JzO.s 			page 20


  56:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt-thread/include/rtservice.h ****  */
  58:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rt-thread/include/rtservice.h **** {
  60:rt-thread/include/rtservice.h ****     l->next->prev = n;
  61:rt-thread/include/rtservice.h ****     n->next = l->next;
  62:rt-thread/include/rtservice.h **** 
  63:rt-thread/include/rtservice.h ****     l->next = n;
  64:rt-thread/include/rtservice.h ****     n->prev = l;
  65:rt-thread/include/rtservice.h **** }
  66:rt-thread/include/rtservice.h **** 
  67:rt-thread/include/rtservice.h **** /**
  68:rt-thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt-thread/include/rtservice.h ****  *
  70:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt-thread/include/rtservice.h ****  * @param l list to insert it
  72:rt-thread/include/rtservice.h ****  */
  73:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt-thread/include/rtservice.h **** {
  75:rt-thread/include/rtservice.h ****     l->prev->next = n;
  76:rt-thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt-thread/include/rtservice.h **** 
  78:rt-thread/include/rtservice.h ****     l->prev = n;
  79:rt-thread/include/rtservice.h ****     n->next = l;
  80:rt-thread/include/rtservice.h **** }
  81:rt-thread/include/rtservice.h **** 
  82:rt-thread/include/rtservice.h **** /**
  83:rt-thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt-thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt-thread/include/rtservice.h ****  */
  86:rt-thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rt-thread/include/rtservice.h **** {
  88:rt-thread/include/rtservice.h ****     n->next->prev = n->prev;
 208              		.loc 2 88 0
 209 003e 6269     		ldr	r2, [r4, #20]
 210 0040 A169     		ldr	r1, [r4, #24]
 211 0042 5160     		str	r1, [r2, #4]
  89:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 212              		.loc 2 89 0
 213 0044 A269     		ldr	r2, [r4, #24]
 214 0046 6169     		ldr	r1, [r4, #20]
 215 0048 1160     		str	r1, [r2]
  90:rt-thread/include/rtservice.h **** 
  91:rt-thread/include/rtservice.h ****     n->next = n->prev = n;
 216              		.loc 2 91 0
 217 004a A361     		str	r3, [r4, #24]
 218 004c 6361     		str	r3, [r4, #20]
 219              	.LVL18:
 220              	.LBE17:
 221              	.LBE16:
 823:rt-thread/src/thread.c **** 
 824:rt-thread/src/thread.c ****     /* insert to schedule ready list */
 825:rt-thread/src/thread.c ****     rt_schedule_insert_thread(thread);
 222              		.loc 1 825 0
 223 004e 2046     		mov	r0, r4
 224 0050 FFF7FEFF 		bl	rt_schedule_insert_thread
 225              	.LVL19:
ARM GAS  /tmp/ccxK9JzO.s 			page 21


 826:rt-thread/src/thread.c **** 
 827:rt-thread/src/thread.c ****     /* do schedule */
 828:rt-thread/src/thread.c ****     rt_schedule();
 226              		.loc 1 828 0
 227 0054 FFF7FEFF 		bl	rt_schedule
 228              	.LVL20:
 229 0058 10BD     		pop	{r4, pc}
 230              	.LVL21:
 231              	.L12:
 814:rt-thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_SUSPEND);
 232              		.loc 1 814 0 discriminator 1
 233 005a 40F22E32 		movw	r2, #814
 234 005e 0249     		ldr	r1, .L13
 235 0060 0448     		ldr	r0, .L13+12
 236              	.LVL22:
 237 0062 FFF7FEFF 		bl	rt_assert_handler
 238              	.LVL23:
 239 0066 CEE7     		b	.L8
 240              	.L14:
 241              		.align	2
 242              	.L13:
 243 0068 00000000 		.word	.LANCHOR1
 244 006c 14000000 		.word	.LC2
 245 0070 50000000 		.word	.LC3
 246 0074 00000000 		.word	.LC1
 247              		.cfi_endproc
 248              	.LFE31:
 250              		.section	.text.rt_thread_init,"ax",%progbits
 251              		.align	1
 252              		.global	rt_thread_init
 253              		.syntax unified
 254              		.thumb
 255              		.thumb_func
 256              		.fpu fpv4-sp-d16
 258              	rt_thread_init:
 259              	.LFB17:
 240:rt-thread/src/thread.c ****     /* thread check */
 260              		.loc 1 240 0
 261              		.cfi_startproc
 262              		@ args = 16, pretend = 0, frame = 0
 263              		@ frame_needed = 0, uses_anonymous_args = 0
 264              	.LVL24:
 265 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 266              	.LCFI5:
 267              		.cfi_def_cfa_offset 24
 268              		.cfi_offset 4, -24
 269              		.cfi_offset 5, -20
 270              		.cfi_offset 6, -16
 271              		.cfi_offset 7, -12
 272              		.cfi_offset 8, -8
 273              		.cfi_offset 14, -4
 274 0004 84B0     		sub	sp, sp, #16
 275              	.LCFI6:
 276              		.cfi_def_cfa_offset 40
 277 0006 0D46     		mov	r5, r1
 278 0008 1746     		mov	r7, r2
 279 000a 9846     		mov	r8, r3
ARM GAS  /tmp/ccxK9JzO.s 			page 22


 280 000c 0A9E     		ldr	r6, [sp, #40]
 242:rt-thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 281              		.loc 1 242 0
 282 000e 0446     		mov	r4, r0
 283 0010 B0B1     		cbz	r0, .L19
 284              	.LVL25:
 285              	.L16:
 243:rt-thread/src/thread.c **** 
 286              		.loc 1 243 0
 287 0012 DEB1     		cbz	r6, .L20
 288              	.L17:
 246:rt-thread/src/thread.c **** 
 289              		.loc 1 246 0
 290 0014 2A46     		mov	r2, r5
 291 0016 0121     		movs	r1, #1
 292 0018 2046     		mov	r0, r4
 293 001a FFF7FEFF 		bl	rt_object_init
 294              	.LVL26:
 248:rt-thread/src/thread.c ****                            name,
 295              		.loc 1 248 0
 296 001e 0D9B     		ldr	r3, [sp, #52]
 297 0020 0393     		str	r3, [sp, #12]
 298 0022 9DF83030 		ldrb	r3, [sp, #48]	@ zero_extendqisi2
 299 0026 0293     		str	r3, [sp, #8]
 300 0028 0B9B     		ldr	r3, [sp, #44]
 301 002a 0193     		str	r3, [sp, #4]
 302 002c 0096     		str	r6, [sp]
 303 002e 4346     		mov	r3, r8
 304 0030 3A46     		mov	r2, r7
 305 0032 2946     		mov	r1, r5
 306 0034 2046     		mov	r0, r4
 307 0036 FFF7FEFF 		bl	_rt_thread_init
 308              	.LVL27:
 256:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_init);
 309              		.loc 1 256 0
 310 003a 04B0     		add	sp, sp, #16
 311              	.LCFI7:
 312              		.cfi_remember_state
 313              		.cfi_def_cfa_offset 24
 314              		@ sp needed
 315 003c BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 316              	.LVL28:
 317              	.L19:
 318              	.LCFI8:
 319              		.cfi_restore_state
 242:rt-thread/src/thread.c ****     RT_ASSERT(stack_start != RT_NULL);
 320              		.loc 1 242 0 discriminator 1
 321 0040 F222     		movs	r2, #242
 322              	.LVL29:
 323 0042 0549     		ldr	r1, .L21
 324              	.LVL30:
 325 0044 0548     		ldr	r0, .L21+4
 326              	.LVL31:
 327 0046 FFF7FEFF 		bl	rt_assert_handler
 328              	.LVL32:
 329 004a E2E7     		b	.L16
 330              	.L20:
ARM GAS  /tmp/ccxK9JzO.s 			page 23


 243:rt-thread/src/thread.c **** 
 331              		.loc 1 243 0 discriminator 1
 332 004c F322     		movs	r2, #243
 333 004e 0249     		ldr	r1, .L21
 334 0050 0348     		ldr	r0, .L21+8
 335 0052 FFF7FEFF 		bl	rt_assert_handler
 336              	.LVL33:
 337 0056 DDE7     		b	.L17
 338              	.L22:
 339              		.align	2
 340              	.L21:
 341 0058 00000000 		.word	.LANCHOR2
 342 005c 00000000 		.word	.LC1
 343 0060 00000000 		.word	.LC4
 344              		.cfi_endproc
 345              	.LFE17:
 347              		.section	.text.rt_thread_self,"ax",%progbits
 348              		.align	1
 349              		.global	rt_thread_self
 350              		.syntax unified
 351              		.thumb
 352              		.thumb_func
 353              		.fpu fpv4-sp-d16
 355              	rt_thread_self:
 356              	.LFB18:
 265:rt-thread/src/thread.c **** #ifdef RT_USING_SMP
 357              		.loc 1 265 0
 358              		.cfi_startproc
 359              		@ args = 0, pretend = 0, frame = 0
 360              		@ frame_needed = 0, uses_anonymous_args = 0
 361              		@ link register save eliminated.
 279:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_self);
 362              		.loc 1 279 0
 363 0000 014B     		ldr	r3, .L24
 364 0002 1868     		ldr	r0, [r3]
 365 0004 7047     		bx	lr
 366              	.L25:
 367 0006 00BF     		.align	2
 368              	.L24:
 369 0008 00000000 		.word	rt_current_thread
 370              		.cfi_endproc
 371              	.LFE18:
 373              		.section	.text.rt_thread_exit,"ax",%progbits
 374              		.align	1
 375              		.global	rt_thread_exit
 376              		.syntax unified
 377              		.thumb
 378              		.thumb_func
 379              		.fpu fpv4-sp-d16
 381              	rt_thread_exit:
 382              	.LFB15:
  81:rt-thread/src/thread.c ****     struct rt_thread *thread;
 383              		.loc 1 81 0
 384              		.cfi_startproc
 385              		@ args = 0, pretend = 0, frame = 0
 386              		@ frame_needed = 0, uses_anonymous_args = 0
 387 0000 38B5     		push	{r3, r4, r5, lr}
ARM GAS  /tmp/ccxK9JzO.s 			page 24


 388              	.LCFI9:
 389              		.cfi_def_cfa_offset 16
 390              		.cfi_offset 3, -16
 391              		.cfi_offset 4, -12
 392              		.cfi_offset 5, -8
 393              		.cfi_offset 14, -4
  86:rt-thread/src/thread.c **** 
 394              		.loc 1 86 0
 395 0002 FFF7FEFF 		bl	rt_thread_self
 396              	.LVL34:
 397 0006 0446     		mov	r4, r0
 398              	.LVL35:
  89:rt-thread/src/thread.c **** 
 399              		.loc 1 89 0
 400 0008 FFF7FEFF 		bl	rt_hw_interrupt_disable
 401              	.LVL36:
 402 000c 0546     		mov	r5, r0
 403              	.LVL37:
  92:rt-thread/src/thread.c ****     /* change stat */
 404              		.loc 1 92 0
 405 000e 2046     		mov	r0, r4
 406              	.LVL38:
 407 0010 FFF7FEFF 		bl	rt_schedule_remove_thread
 408              	.LVL39:
  94:rt-thread/src/thread.c **** 
 409              		.loc 1 94 0
 410 0014 0423     		movs	r3, #4
 411 0016 84F83430 		strb	r3, [r4, #52]
  97:rt-thread/src/thread.c **** 
 412              		.loc 1 97 0
 413 001a 04F14400 		add	r0, r4, #68
 414 001e FFF7FEFF 		bl	rt_timer_detach
 415              	.LVL40:
  99:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 416              		.loc 1 99 0
 417 0022 2046     		mov	r0, r4
 418 0024 FFF7FEFF 		bl	rt_object_is_systemobject
 419              	.LVL41:
 420 0028 0128     		cmp	r0, #1
 421 002a 0DD0     		beq	.L30
 422              	.L27:
 107:rt-thread/src/thread.c ****     }
 423              		.loc 1 107 0
 424 002c 04F11402 		add	r2, r4, #20
 425              	.LVL42:
 426              	.LBB18:
 427              	.LBB19:
  60:rt-thread/include/rtservice.h ****     n->next = l->next;
 428              		.loc 2 60 0
 429 0030 094B     		ldr	r3, .L31
 430 0032 1968     		ldr	r1, [r3]
 431 0034 4A60     		str	r2, [r1, #4]
  61:rt-thread/include/rtservice.h **** 
 432              		.loc 2 61 0
 433 0036 6161     		str	r1, [r4, #20]
  63:rt-thread/include/rtservice.h ****     n->prev = l;
 434              		.loc 2 63 0
ARM GAS  /tmp/ccxK9JzO.s 			page 25


 435 0038 1A60     		str	r2, [r3]
  64:rt-thread/include/rtservice.h **** }
 436              		.loc 2 64 0
 437 003a A361     		str	r3, [r4, #24]
 438              	.LVL43:
 439              	.L28:
 440              	.LBE19:
 441              	.LBE18:
 111:rt-thread/src/thread.c **** 
 442              		.loc 1 111 0
 443 003c FFF7FEFF 		bl	rt_schedule
 444              	.LVL44:
 114:rt-thread/src/thread.c **** }
 445              		.loc 1 114 0
 446 0040 2846     		mov	r0, r5
 447 0042 FFF7FEFF 		bl	rt_hw_interrupt_enable
 448              	.LVL45:
 449 0046 38BD     		pop	{r3, r4, r5, pc}
 450              	.LVL46:
 451              	.L30:
 100:rt-thread/src/thread.c ****     {
 452              		.loc 1 100 0 discriminator 1
 453 0048 236F     		ldr	r3, [r4, #112]
  99:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 454              		.loc 1 99 0 discriminator 1
 455 004a 002B     		cmp	r3, #0
 456 004c EED1     		bne	.L27
 102:rt-thread/src/thread.c ****     }
 457              		.loc 1 102 0
 458 004e 2046     		mov	r0, r4
 459 0050 FFF7FEFF 		bl	rt_object_detach
 460              	.LVL47:
 461 0054 F2E7     		b	.L28
 462              	.L32:
 463 0056 00BF     		.align	2
 464              	.L31:
 465 0058 00000000 		.word	rt_thread_defunct
 466              		.cfi_endproc
 467              	.LFE15:
 469              		.section	.text.rt_thread_detach,"ax",%progbits
 470              		.align	1
 471              		.global	rt_thread_detach
 472              		.syntax unified
 473              		.thumb
 474              		.thumb_func
 475              		.fpu fpv4-sp-d16
 477              	rt_thread_detach:
 478              	.LFB20:
 333:rt-thread/src/thread.c ****     rt_base_t lock;
 479              		.loc 1 333 0
 480              		.cfi_startproc
 481              		@ args = 0, pretend = 0, frame = 0
 482              		@ frame_needed = 0, uses_anonymous_args = 0
 483              	.LVL48:
 484 0000 10B5     		push	{r4, lr}
 485              	.LCFI10:
 486              		.cfi_def_cfa_offset 8
ARM GAS  /tmp/ccxK9JzO.s 			page 26


 487              		.cfi_offset 4, -8
 488              		.cfi_offset 14, -4
 337:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 489              		.loc 1 337 0
 490 0002 0446     		mov	r4, r0
 491 0004 68B3     		cbz	r0, .L41
 492              	.LVL49:
 493              	.L34:
 338:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 494              		.loc 1 338 0
 495 0006 2046     		mov	r0, r4
 496 0008 FFF7FEFF 		bl	rt_object_get_type
 497              	.LVL50:
 498 000c 0128     		cmp	r0, #1
 499 000e 05D0     		beq	.L35
 338:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread));
 500              		.loc 1 338 0 is_stmt 0 discriminator 1
 501 0010 4FF4A972 		mov	r2, #338
 502 0014 1F49     		ldr	r1, .L45
 503 0016 2048     		ldr	r0, .L45+4
 504 0018 FFF7FEFF 		bl	rt_assert_handler
 505              	.LVL51:
 506              	.L35:
 339:rt-thread/src/thread.c **** 
 507              		.loc 1 339 0 is_stmt 1
 508 001c 2046     		mov	r0, r4
 509 001e FFF7FEFF 		bl	rt_object_is_systemobject
 510              	.LVL52:
 511 0022 28B3     		cbz	r0, .L42
 512              	.L36:
 341:rt-thread/src/thread.c ****     {
 513              		.loc 1 341 0
 514 0024 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 515 0028 13F0070F 		tst	r3, #7
 516 002c 27D1     		bne	.L43
 517              	.L37:
 348:rt-thread/src/thread.c **** 
 518              		.loc 1 348 0
 519 002e 04F14400 		add	r0, r4, #68
 520 0032 FFF7FEFF 		bl	rt_timer_detach
 521              	.LVL53:
 351:rt-thread/src/thread.c **** 
 522              		.loc 1 351 0
 523 0036 0423     		movs	r3, #4
 524 0038 84F83430 		strb	r3, [r4, #52]
 353:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 525              		.loc 1 353 0
 526 003c 2046     		mov	r0, r4
 527 003e FFF7FEFF 		bl	rt_object_is_systemobject
 528              	.LVL54:
 529 0042 0128     		cmp	r0, #1
 530 0044 1FD0     		beq	.L44
 531              	.L38:
 361:rt-thread/src/thread.c ****         /* insert to defunct thread list */
 532              		.loc 1 361 0
 533 0046 FFF7FEFF 		bl	rt_hw_interrupt_disable
 534              	.LVL55:
ARM GAS  /tmp/ccxK9JzO.s 			page 27


 363:rt-thread/src/thread.c ****         /* enable interrupt */
 535              		.loc 1 363 0
 536 004a 04F11402 		add	r2, r4, #20
 537              	.LVL56:
 538              	.LBB20:
 539              	.LBB21:
  60:rt-thread/include/rtservice.h ****     n->next = l->next;
 540              		.loc 2 60 0
 541 004e 134B     		ldr	r3, .L45+8
 542 0050 1968     		ldr	r1, [r3]
 543 0052 4A60     		str	r2, [r1, #4]
  61:rt-thread/include/rtservice.h **** 
 544              		.loc 2 61 0
 545 0054 6161     		str	r1, [r4, #20]
  63:rt-thread/include/rtservice.h ****     n->prev = l;
 546              		.loc 2 63 0
 547 0056 1A60     		str	r2, [r3]
  64:rt-thread/include/rtservice.h **** }
 548              		.loc 2 64 0
 549 0058 A361     		str	r3, [r4, #24]
 550              	.LVL57:
 551              	.LBE21:
 552              	.LBE20:
 365:rt-thread/src/thread.c ****     }
 553              		.loc 1 365 0
 554 005a FFF7FEFF 		bl	rt_hw_interrupt_enable
 555              	.LVL58:
 556              	.L39:
 369:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_detach);
 557              		.loc 1 369 0
 558 005e 0020     		movs	r0, #0
 559 0060 10BD     		pop	{r4, pc}
 560              	.LVL59:
 561              	.L41:
 337:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 562              		.loc 1 337 0 discriminator 1
 563 0062 40F25112 		movw	r2, #337
 564 0066 0B49     		ldr	r1, .L45
 565 0068 0D48     		ldr	r0, .L45+12
 566              	.LVL60:
 567 006a FFF7FEFF 		bl	rt_assert_handler
 568              	.LVL61:
 569 006e CAE7     		b	.L34
 570              	.L42:
 339:rt-thread/src/thread.c **** 
 571              		.loc 1 339 0 discriminator 1
 572 0070 40F25312 		movw	r2, #339
 573 0074 0749     		ldr	r1, .L45
 574 0076 0B48     		ldr	r0, .L45+16
 575 0078 FFF7FEFF 		bl	rt_assert_handler
 576              	.LVL62:
 577 007c D2E7     		b	.L36
 578              	.L43:
 344:rt-thread/src/thread.c ****     }
 579              		.loc 1 344 0
 580 007e 2046     		mov	r0, r4
 581 0080 FFF7FEFF 		bl	rt_schedule_remove_thread
ARM GAS  /tmp/ccxK9JzO.s 			page 28


 582              	.LVL63:
 583 0084 D3E7     		b	.L37
 584              	.L44:
 354:rt-thread/src/thread.c ****     {
 585              		.loc 1 354 0 discriminator 1
 586 0086 236F     		ldr	r3, [r4, #112]
 353:rt-thread/src/thread.c ****         thread->cleanup == RT_NULL)
 587              		.loc 1 353 0 discriminator 1
 588 0088 002B     		cmp	r3, #0
 589 008a DCD1     		bne	.L38
 356:rt-thread/src/thread.c ****     }
 590              		.loc 1 356 0
 591 008c 2046     		mov	r0, r4
 592 008e FFF7FEFF 		bl	rt_object_detach
 593              	.LVL64:
 594 0092 E4E7     		b	.L39
 595              	.L46:
 596              		.align	2
 597              	.L45:
 598 0094 00000000 		.word	.LANCHOR3
 599 0098 50000000 		.word	.LC3
 600 009c 00000000 		.word	rt_thread_defunct
 601 00a0 00000000 		.word	.LC1
 602 00a4 00000000 		.word	.LC5
 603              		.cfi_endproc
 604              	.LFE20:
 606              		.section	.text.rt_thread_create,"ax",%progbits
 607              		.align	1
 608              		.global	rt_thread_create
 609              		.syntax unified
 610              		.thumb
 611              		.thumb_func
 612              		.fpu fpv4-sp-d16
 614              	rt_thread_create:
 615              	.LFB21:
 392:rt-thread/src/thread.c ****     struct rt_thread *thread;
 616              		.loc 1 392 0
 617              		.cfi_startproc
 618              		@ args = 8, pretend = 0, frame = 0
 619              		@ frame_needed = 0, uses_anonymous_args = 0
 620              	.LVL65:
 621 0000 2DE9F041 		push	{r4, r5, r6, r7, r8, lr}
 622              	.LCFI11:
 623              		.cfi_def_cfa_offset 24
 624              		.cfi_offset 4, -24
 625              		.cfi_offset 5, -20
 626              		.cfi_offset 6, -16
 627              		.cfi_offset 7, -12
 628              		.cfi_offset 8, -8
 629              		.cfi_offset 14, -4
 630 0004 84B0     		sub	sp, sp, #16
 631              	.LCFI12:
 632              		.cfi_def_cfa_offset 40
 633 0006 0546     		mov	r5, r0
 634 0008 0F46     		mov	r7, r1
 635 000a 9046     		mov	r8, r2
 636 000c 1E46     		mov	r6, r3
ARM GAS  /tmp/ccxK9JzO.s 			page 29


 396:rt-thread/src/thread.c ****                                                     name);
 637              		.loc 1 396 0
 638 000e 0146     		mov	r1, r0
 639              	.LVL66:
 640 0010 0120     		movs	r0, #1
 641              	.LVL67:
 642 0012 FFF7FEFF 		bl	rt_object_allocate
 643              	.LVL68:
 398:rt-thread/src/thread.c ****         return RT_NULL;
 644              		.loc 1 398 0
 645 0016 D0B1     		cbz	r0, .L50
 646 0018 0446     		mov	r4, r0
 401:rt-thread/src/thread.c ****     if (stack_start == RT_NULL)
 647              		.loc 1 401 0
 648 001a 3046     		mov	r0, r6
 649              	.LVL69:
 650 001c FFF7FEFF 		bl	rt_malloc
 651              	.LVL70:
 402:rt-thread/src/thread.c ****     {
 652              		.loc 1 402 0
 653 0020 80B1     		cbz	r0, .L52
 410:rt-thread/src/thread.c ****                     name,
 654              		.loc 1 410 0
 655 0022 0B9A     		ldr	r2, [sp, #44]
 656 0024 0392     		str	r2, [sp, #12]
 657 0026 9DF82820 		ldrb	r2, [sp, #40]	@ zero_extendqisi2
 658 002a 0292     		str	r2, [sp, #8]
 659 002c 0196     		str	r6, [sp, #4]
 660 002e 0090     		str	r0, [sp]
 661 0030 4346     		mov	r3, r8
 662 0032 3A46     		mov	r2, r7
 663 0034 2946     		mov	r1, r5
 664 0036 2046     		mov	r0, r4
 665              	.LVL71:
 666 0038 FFF7FEFF 		bl	_rt_thread_init
 667              	.LVL72:
 668              	.L47:
 420:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_create);
 669              		.loc 1 420 0
 670 003c 2046     		mov	r0, r4
 671 003e 04B0     		add	sp, sp, #16
 672              	.LCFI13:
 673              		.cfi_remember_state
 674              		.cfi_def_cfa_offset 24
 675              		@ sp needed
 676 0040 BDE8F081 		pop	{r4, r5, r6, r7, r8, pc}
 677              	.LVL73:
 678              	.L52:
 679              	.LCFI14:
 680              		.cfi_restore_state
 405:rt-thread/src/thread.c **** 
 681              		.loc 1 405 0
 682 0044 2046     		mov	r0, r4
 683              	.LVL74:
 684 0046 FFF7FEFF 		bl	rt_object_delete
 685              	.LVL75:
 407:rt-thread/src/thread.c ****     }
ARM GAS  /tmp/ccxK9JzO.s 			page 30


 686              		.loc 1 407 0
 687 004a 0024     		movs	r4, #0
 688              	.LVL76:
 689 004c F6E7     		b	.L47
 690              	.LVL77:
 691              	.L50:
 399:rt-thread/src/thread.c **** 
 692              		.loc 1 399 0
 693 004e 0024     		movs	r4, #0
 694 0050 F4E7     		b	.L47
 695              		.cfi_endproc
 696              	.LFE21:
 698              		.section	.text.rt_thread_delete,"ax",%progbits
 699              		.align	1
 700              		.global	rt_thread_delete
 701              		.syntax unified
 702              		.thumb
 703              		.thumb_func
 704              		.fpu fpv4-sp-d16
 706              	rt_thread_delete:
 707              	.LFB22:
 432:rt-thread/src/thread.c ****     rt_base_t lock;
 708              		.loc 1 432 0
 709              		.cfi_startproc
 710              		@ args = 0, pretend = 0, frame = 0
 711              		@ frame_needed = 0, uses_anonymous_args = 0
 712              	.LVL78:
 713 0000 10B5     		push	{r4, lr}
 714              	.LCFI15:
 715              		.cfi_def_cfa_offset 8
 716              		.cfi_offset 4, -8
 717              		.cfi_offset 14, -4
 436:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 718              		.loc 1 436 0
 719 0002 0446     		mov	r4, r0
 720 0004 40B3     		cbz	r0, .L59
 721              	.LVL79:
 722              	.L54:
 437:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 723              		.loc 1 437 0
 724 0006 2046     		mov	r0, r4
 725 0008 FFF7FEFF 		bl	rt_object_get_type
 726              	.LVL80:
 727 000c 0128     		cmp	r0, #1
 728 000e 05D0     		beq	.L55
 437:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_is_systemobject((rt_object_t)thread) == RT_FALSE);
 729              		.loc 1 437 0 is_stmt 0 discriminator 1
 730 0010 40F2B512 		movw	r2, #437
 731 0014 1949     		ldr	r1, .L62
 732 0016 1A48     		ldr	r0, .L62+4
 733 0018 FFF7FEFF 		bl	rt_assert_handler
 734              	.LVL81:
 735              	.L55:
 438:rt-thread/src/thread.c **** 
 736              		.loc 1 438 0 is_stmt 1
 737 001c 2046     		mov	r0, r4
 738 001e FFF7FEFF 		bl	rt_object_is_systemobject
ARM GAS  /tmp/ccxK9JzO.s 			page 31


 739              	.LVL82:
 740 0022 00BB     		cbnz	r0, .L60
 741              	.L56:
 440:rt-thread/src/thread.c ****     {
 742              		.loc 1 440 0
 743 0024 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 744 0028 13F0070F 		tst	r3, #7
 745 002c 22D1     		bne	.L61
 746              	.L57:
 447:rt-thread/src/thread.c **** 
 747              		.loc 1 447 0
 748 002e 04F14400 		add	r0, r4, #68
 749 0032 FFF7FEFF 		bl	rt_timer_detach
 750              	.LVL83:
 450:rt-thread/src/thread.c **** 
 751              		.loc 1 450 0
 752 0036 FFF7FEFF 		bl	rt_hw_interrupt_disable
 753              	.LVL84:
 453:rt-thread/src/thread.c **** 
 754              		.loc 1 453 0
 755 003a 0423     		movs	r3, #4
 756 003c 84F83430 		strb	r3, [r4, #52]
 456:rt-thread/src/thread.c **** 
 757              		.loc 1 456 0
 758 0040 04F11402 		add	r2, r4, #20
 759              	.LVL85:
 760              	.LBB22:
 761              	.LBB23:
  60:rt-thread/include/rtservice.h ****     n->next = l->next;
 762              		.loc 2 60 0
 763 0044 0F4B     		ldr	r3, .L62+8
 764 0046 1968     		ldr	r1, [r3]
 765 0048 4A60     		str	r2, [r1, #4]
  61:rt-thread/include/rtservice.h **** 
 766              		.loc 2 61 0
 767 004a 6161     		str	r1, [r4, #20]
  63:rt-thread/include/rtservice.h ****     n->prev = l;
 768              		.loc 2 63 0
 769 004c 1A60     		str	r2, [r3]
  64:rt-thread/include/rtservice.h **** }
 770              		.loc 2 64 0
 771 004e A361     		str	r3, [r4, #24]
 772              	.LVL86:
 773              	.LBE23:
 774              	.LBE22:
 459:rt-thread/src/thread.c **** 
 775              		.loc 1 459 0
 776 0050 FFF7FEFF 		bl	rt_hw_interrupt_enable
 777              	.LVL87:
 462:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delete);
 778              		.loc 1 462 0
 779 0054 0020     		movs	r0, #0
 780 0056 10BD     		pop	{r4, pc}
 781              	.LVL88:
 782              	.L59:
 436:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 783              		.loc 1 436 0 discriminator 1
ARM GAS  /tmp/ccxK9JzO.s 			page 32


 784 0058 4FF4DA72 		mov	r2, #436
 785 005c 0749     		ldr	r1, .L62
 786 005e 0A48     		ldr	r0, .L62+12
 787              	.LVL89:
 788 0060 FFF7FEFF 		bl	rt_assert_handler
 789              	.LVL90:
 790 0064 CFE7     		b	.L54
 791              	.L60:
 438:rt-thread/src/thread.c **** 
 792              		.loc 1 438 0 discriminator 1
 793 0066 4FF4DB72 		mov	r2, #438
 794 006a 0449     		ldr	r1, .L62
 795 006c 0748     		ldr	r0, .L62+16
 796 006e FFF7FEFF 		bl	rt_assert_handler
 797              	.LVL91:
 798 0072 D7E7     		b	.L56
 799              	.L61:
 443:rt-thread/src/thread.c ****     }
 800              		.loc 1 443 0
 801 0074 2046     		mov	r0, r4
 802 0076 FFF7FEFF 		bl	rt_schedule_remove_thread
 803              	.LVL92:
 804 007a D8E7     		b	.L57
 805              	.L63:
 806              		.align	2
 807              	.L62:
 808 007c 00000000 		.word	.LANCHOR4
 809 0080 50000000 		.word	.LC3
 810 0084 00000000 		.word	rt_thread_defunct
 811 0088 00000000 		.word	.LC1
 812 008c 00000000 		.word	.LC6
 813              		.cfi_endproc
 814              	.LFE22:
 816              		.section	.text.rt_thread_yield,"ax",%progbits
 817              		.align	1
 818              		.global	rt_thread_yield
 819              		.syntax unified
 820              		.thumb
 821              		.thumb_func
 822              		.fpu fpv4-sp-d16
 824              	rt_thread_yield:
 825              	.LFB23:
 474:rt-thread/src/thread.c ****     rt_schedule();
 826              		.loc 1 474 0
 827              		.cfi_startproc
 828              		@ args = 0, pretend = 0, frame = 0
 829              		@ frame_needed = 0, uses_anonymous_args = 0
 830 0000 08B5     		push	{r3, lr}
 831              	.LCFI16:
 832              		.cfi_def_cfa_offset 8
 833              		.cfi_offset 3, -8
 834              		.cfi_offset 14, -4
 475:rt-thread/src/thread.c **** 
 835              		.loc 1 475 0
 836 0002 FFF7FEFF 		bl	rt_schedule
 837              	.LVL93:
 478:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_yield);
ARM GAS  /tmp/ccxK9JzO.s 			page 33


 838              		.loc 1 478 0
 839 0006 0020     		movs	r0, #0
 840 0008 08BD     		pop	{r3, pc}
 841              		.cfi_endproc
 842              	.LFE23:
 844              		.section	.text.rt_thread_suspend,"ax",%progbits
 845              		.align	1
 846              		.global	rt_thread_suspend
 847              		.syntax unified
 848              		.thumb
 849              		.thumb_func
 850              		.fpu fpv4-sp-d16
 852              	rt_thread_suspend:
 853              	.LFB29:
 716:rt-thread/src/thread.c ****     register rt_base_t stat;
 854              		.loc 1 716 0
 855              		.cfi_startproc
 856              		@ args = 0, pretend = 0, frame = 0
 857              		@ frame_needed = 0, uses_anonymous_args = 0
 858              	.LVL94:
 859 0000 70B5     		push	{r4, r5, r6, lr}
 860              	.LCFI17:
 861              		.cfi_def_cfa_offset 16
 862              		.cfi_offset 4, -16
 863              		.cfi_offset 5, -12
 864              		.cfi_offset 6, -8
 865              		.cfi_offset 14, -4
 721:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 866              		.loc 1 721 0
 867 0002 0446     		mov	r4, r0
 868 0004 58B3     		cbz	r0, .L74
 869              	.LVL95:
 870              	.L67:
 722:rt-thread/src/thread.c **** 
 871              		.loc 1 722 0
 872 0006 2046     		mov	r0, r4
 873 0008 FFF7FEFF 		bl	rt_object_get_type
 874              	.LVL96:
 875 000c 0128     		cmp	r0, #1
 876 000e 05D0     		beq	.L68
 722:rt-thread/src/thread.c **** 
 877              		.loc 1 722 0 is_stmt 0 discriminator 1
 878 0010 40F2D222 		movw	r2, #722
 879 0014 1C49     		ldr	r1, .L76
 880 0016 1D48     		ldr	r0, .L76+4
 881 0018 FFF7FEFF 		bl	rt_assert_handler
 882              	.LVL97:
 883              	.L68:
 726:rt-thread/src/thread.c ****     if ((stat != RT_THREAD_READY) && (stat != RT_THREAD_RUNNING))
 884              		.loc 1 726 0 is_stmt 1
 885 001c 94F83450 		ldrb	r5, [r4, #52]	@ zero_extendqisi2
 886 0020 05F00705 		and	r5, r5, #7
 887              	.LVL98:
 727:rt-thread/src/thread.c ****     {
 888              		.loc 1 727 0
 889 0024 012D     		cmp	r5, #1
 890 0026 01D0     		beq	.L69
ARM GAS  /tmp/ccxK9JzO.s 			page 34


 727:rt-thread/src/thread.c ****     {
 891              		.loc 1 727 0 is_stmt 0 discriminator 1
 892 0028 032D     		cmp	r5, #3
 893 002a 2AD1     		bne	.L72
 894              	.L69:
 735:rt-thread/src/thread.c ****     if (stat == RT_THREAD_RUNNING)
 895              		.loc 1 735 0 is_stmt 1
 896 002c FFF7FEFF 		bl	rt_hw_interrupt_disable
 897              	.LVL99:
 898 0030 0646     		mov	r6, r0
 899              	.LVL100:
 736:rt-thread/src/thread.c ****     {
 900              		.loc 1 736 0
 901 0032 032D     		cmp	r5, #3
 902 0034 1AD0     		beq	.L75
 903              	.LVL101:
 904              	.L71:
 743:rt-thread/src/thread.c ****     thread->stat = RT_THREAD_SUSPEND | (thread->stat & ~RT_THREAD_STAT_MASK);
 905              		.loc 1 743 0
 906 0036 2046     		mov	r0, r4
 907 0038 FFF7FEFF 		bl	rt_schedule_remove_thread
 908              	.LVL102:
 744:rt-thread/src/thread.c **** 
 909              		.loc 1 744 0
 910 003c 94F93430 		ldrsb	r3, [r4, #52]
 911 0040 23F00703 		bic	r3, r3, #7
 912 0044 43F00203 		orr	r3, r3, #2
 913 0048 84F83430 		strb	r3, [r4, #52]
 747:rt-thread/src/thread.c **** 
 914              		.loc 1 747 0
 915 004c 04F14400 		add	r0, r4, #68
 916 0050 FFF7FEFF 		bl	rt_timer_stop
 917              	.LVL103:
 750:rt-thread/src/thread.c **** 
 918              		.loc 1 750 0
 919 0054 3046     		mov	r0, r6
 920 0056 FFF7FEFF 		bl	rt_hw_interrupt_enable
 921              	.LVL104:
 753:rt-thread/src/thread.c **** }
 922              		.loc 1 753 0
 923 005a 0020     		movs	r0, #0
 924 005c 70BD     		pop	{r4, r5, r6, pc}
 925              	.LVL105:
 926              	.L74:
 721:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 927              		.loc 1 721 0 discriminator 1
 928 005e 40F2D122 		movw	r2, #721
 929 0062 0949     		ldr	r1, .L76
 930 0064 0A48     		ldr	r0, .L76+8
 931              	.LVL106:
 932 0066 FFF7FEFF 		bl	rt_assert_handler
 933              	.LVL107:
 934 006a CCE7     		b	.L67
 935              	.LVL108:
 936              	.L75:
 739:rt-thread/src/thread.c ****     }
 937              		.loc 1 739 0
ARM GAS  /tmp/ccxK9JzO.s 			page 35


 938 006c FFF7FEFF 		bl	rt_thread_self
 939              	.LVL109:
 940 0070 8442     		cmp	r4, r0
 941 0072 E0D0     		beq	.L71
 739:rt-thread/src/thread.c ****     }
 942              		.loc 1 739 0 is_stmt 0 discriminator 1
 943 0074 40F2E322 		movw	r2, #739
 944 0078 0349     		ldr	r1, .L76
 945 007a 0648     		ldr	r0, .L76+12
 946 007c FFF7FEFF 		bl	rt_assert_handler
 947              	.LVL110:
 948 0080 D9E7     		b	.L71
 949              	.LVL111:
 950              	.L72:
 731:rt-thread/src/thread.c ****     }
 951              		.loc 1 731 0 is_stmt 1
 952 0082 4FF0FF30 		mov	r0, #-1
 754:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_suspend);
 953              		.loc 1 754 0
 954 0086 70BD     		pop	{r4, r5, r6, pc}
 955              	.LVL112:
 956              	.L77:
 957              		.align	2
 958              	.L76:
 959 0088 00000000 		.word	.LANCHOR5
 960 008c 50000000 		.word	.LC3
 961 0090 00000000 		.word	.LC1
 962 0094 00000000 		.word	.LC7
 963              		.cfi_endproc
 964              	.LFE29:
 966              		.section	.text.rt_thread_sleep,"ax",%progbits
 967              		.align	1
 968              		.global	rt_thread_sleep
 969              		.syntax unified
 970              		.thumb
 971              		.thumb_func
 972              		.fpu fpv4-sp-d16
 974              	rt_thread_sleep:
 975              	.LFB24:
 489:rt-thread/src/thread.c ****     register rt_base_t temp;
 976              		.loc 1 489 0
 977              		.cfi_startproc
 978              		@ args = 0, pretend = 0, frame = 8
 979              		@ frame_needed = 0, uses_anonymous_args = 0
 980              	.LVL113:
 981 0000 70B5     		push	{r4, r5, r6, lr}
 982              	.LCFI18:
 983              		.cfi_def_cfa_offset 16
 984              		.cfi_offset 4, -16
 985              		.cfi_offset 5, -12
 986              		.cfi_offset 6, -8
 987              		.cfi_offset 14, -4
 988 0002 82B0     		sub	sp, sp, #8
 989              	.LCFI19:
 990              		.cfi_def_cfa_offset 24
 991 0004 0190     		str	r0, [sp, #4]
 494:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
ARM GAS  /tmp/ccxK9JzO.s 			page 36


 992              		.loc 1 494 0
 993 0006 FFF7FEFF 		bl	rt_thread_self
 994              	.LVL114:
 495:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 995              		.loc 1 495 0
 996 000a 0446     		mov	r4, r0
 997 000c 30B3     		cbz	r0, .L83
 998              	.LVL115:
 999              	.L79:
 496:rt-thread/src/thread.c **** 
 1000              		.loc 1 496 0
 1001 000e 2046     		mov	r0, r4
 1002 0010 FFF7FEFF 		bl	rt_object_get_type
 1003              	.LVL116:
 1004 0014 0128     		cmp	r0, #1
 1005 0016 05D0     		beq	.L80
 496:rt-thread/src/thread.c **** 
 1006              		.loc 1 496 0 is_stmt 0 discriminator 1
 1007 0018 4FF4F872 		mov	r2, #496
 1008 001c 1449     		ldr	r1, .L85
 1009 001e 1548     		ldr	r0, .L85+4
 1010 0020 FFF7FEFF 		bl	rt_assert_handler
 1011              	.LVL117:
 1012              	.L80:
 499:rt-thread/src/thread.c **** 
 1013              		.loc 1 499 0 is_stmt 1
 1014 0024 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1015              	.LVL118:
 1016 0028 0646     		mov	r6, r0
 1017              	.LVL119:
 502:rt-thread/src/thread.c **** 
 1018              		.loc 1 502 0
 1019 002a 2046     		mov	r0, r4
 1020              	.LVL120:
 1021 002c FFF7FEFF 		bl	rt_thread_suspend
 1022              	.LVL121:
 505:rt-thread/src/thread.c ****     rt_timer_start(&(thread->thread_timer));
 1023              		.loc 1 505 0
 1024 0030 04F14405 		add	r5, r4, #68
 1025 0034 01AA     		add	r2, sp, #4
 1026 0036 0021     		movs	r1, #0
 1027 0038 2846     		mov	r0, r5
 1028 003a FFF7FEFF 		bl	rt_timer_control
 1029              	.LVL122:
 506:rt-thread/src/thread.c **** 
 1030              		.loc 1 506 0
 1031 003e 2846     		mov	r0, r5
 1032 0040 FFF7FEFF 		bl	rt_timer_start
 1033              	.LVL123:
 509:rt-thread/src/thread.c **** 
 1034              		.loc 1 509 0
 1035 0044 3046     		mov	r0, r6
 1036 0046 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1037              	.LVL124:
 511:rt-thread/src/thread.c **** 
 1038              		.loc 1 511 0
 1039 004a FFF7FEFF 		bl	rt_schedule
ARM GAS  /tmp/ccxK9JzO.s 			page 37


 1040              	.LVL125:
 514:rt-thread/src/thread.c ****         thread->error = RT_EOK;
 1041              		.loc 1 514 0
 1042 004e 236B     		ldr	r3, [r4, #48]
 1043 0050 13F1020F 		cmn	r3, #2
 1044 0054 09D0     		beq	.L84
 1045              	.L81:
 518:rt-thread/src/thread.c **** 
 1046              		.loc 1 518 0
 1047 0056 0020     		movs	r0, #0
 1048 0058 02B0     		add	sp, sp, #8
 1049              	.LCFI20:
 1050              		.cfi_remember_state
 1051              		.cfi_def_cfa_offset 16
 1052              		@ sp needed
 1053 005a 70BD     		pop	{r4, r5, r6, pc}
 1054              	.LVL126:
 1055              	.L83:
 1056              	.LCFI21:
 1057              		.cfi_restore_state
 495:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1058              		.loc 1 495 0 discriminator 1
 1059 005c 40F2EF12 		movw	r2, #495
 1060 0060 0349     		ldr	r1, .L85
 1061 0062 0548     		ldr	r0, .L85+8
 1062              	.LVL127:
 1063 0064 FFF7FEFF 		bl	rt_assert_handler
 1064              	.LVL128:
 1065 0068 D1E7     		b	.L79
 1066              	.LVL129:
 1067              	.L84:
 515:rt-thread/src/thread.c **** 
 1068              		.loc 1 515 0
 1069 006a 0023     		movs	r3, #0
 1070 006c 2363     		str	r3, [r4, #48]
 1071 006e F2E7     		b	.L81
 1072              	.L86:
 1073              		.align	2
 1074              	.L85:
 1075 0070 00000000 		.word	.LANCHOR6
 1076 0074 50000000 		.word	.LC3
 1077 0078 00000000 		.word	.LC1
 1078              		.cfi_endproc
 1079              	.LFE24:
 1081              		.section	.text.rt_thread_delay,"ax",%progbits
 1082              		.align	1
 1083              		.global	rt_thread_delay
 1084              		.syntax unified
 1085              		.thumb
 1086              		.thumb_func
 1087              		.fpu fpv4-sp-d16
 1089              	rt_thread_delay:
 1090              	.LFB25:
 528:rt-thread/src/thread.c ****     return rt_thread_sleep(tick);
 1091              		.loc 1 528 0
 1092              		.cfi_startproc
 1093              		@ args = 0, pretend = 0, frame = 0
ARM GAS  /tmp/ccxK9JzO.s 			page 38


 1094              		@ frame_needed = 0, uses_anonymous_args = 0
 1095              	.LVL130:
 1096 0000 08B5     		push	{r3, lr}
 1097              	.LCFI22:
 1098              		.cfi_def_cfa_offset 8
 1099              		.cfi_offset 3, -8
 1100              		.cfi_offset 14, -4
 529:rt-thread/src/thread.c **** }
 1101              		.loc 1 529 0
 1102 0002 FFF7FEFF 		bl	rt_thread_sleep
 1103              	.LVL131:
 530:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delay);
 1104              		.loc 1 530 0
 1105 0006 08BD     		pop	{r3, pc}
 1106              		.cfi_endproc
 1107              	.LFE25:
 1109              		.section	.text.rt_thread_mdelay,"ax",%progbits
 1110              		.align	1
 1111              		.global	rt_thread_mdelay
 1112              		.syntax unified
 1113              		.thumb
 1114              		.thumb_func
 1115              		.fpu fpv4-sp-d16
 1117              	rt_thread_mdelay:
 1118              	.LFB27:
 598:rt-thread/src/thread.c ****     rt_tick_t tick;
 1119              		.loc 1 598 0
 1120              		.cfi_startproc
 1121              		@ args = 0, pretend = 0, frame = 0
 1122              		@ frame_needed = 0, uses_anonymous_args = 0
 1123              	.LVL132:
 1124 0000 08B5     		push	{r3, lr}
 1125              	.LCFI23:
 1126              		.cfi_def_cfa_offset 8
 1127              		.cfi_offset 3, -8
 1128              		.cfi_offset 14, -4
 601:rt-thread/src/thread.c **** 
 1129              		.loc 1 601 0
 1130 0002 FFF7FEFF 		bl	rt_tick_from_millisecond
 1131              	.LVL133:
 603:rt-thread/src/thread.c **** }
 1132              		.loc 1 603 0
 1133 0006 FFF7FEFF 		bl	rt_thread_sleep
 1134              	.LVL134:
 604:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_mdelay);
 1135              		.loc 1 604 0
 1136 000a 08BD     		pop	{r3, pc}
 1137              		.cfi_endproc
 1138              	.LFE27:
 1140              		.section	.text.rt_thread_delay_until,"ax",%progbits
 1141              		.align	1
 1142              		.global	rt_thread_delay_until
 1143              		.syntax unified
 1144              		.thumb
 1145              		.thumb_func
 1146              		.fpu fpv4-sp-d16
 1148              	rt_thread_delay_until:
ARM GAS  /tmp/ccxK9JzO.s 			page 39


 1149              	.LFB26:
 542:rt-thread/src/thread.c ****     register rt_base_t level;
 1150              		.loc 1 542 0
 1151              		.cfi_startproc
 1152              		@ args = 0, pretend = 0, frame = 0
 1153              		@ frame_needed = 0, uses_anonymous_args = 0
 1154              	.LVL135:
 1155 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1156              	.LCFI24:
 1157              		.cfi_def_cfa_offset 24
 1158              		.cfi_offset 3, -24
 1159              		.cfi_offset 4, -20
 1160              		.cfi_offset 5, -16
 1161              		.cfi_offset 6, -12
 1162              		.cfi_offset 7, -8
 1163              		.cfi_offset 14, -4
 1164 0002 0E46     		mov	r6, r1
 546:rt-thread/src/thread.c **** 
 1165              		.loc 1 546 0
 1166 0004 0446     		mov	r4, r0
 1167 0006 0028     		cmp	r0, #0
 1168 0008 37D0     		beq	.L98
 1169              	.LVL136:
 1170              	.L92:
 549:rt-thread/src/thread.c ****     RT_ASSERT(thread != RT_NULL);
 1171              		.loc 1 549 0
 1172 000a FFF7FEFF 		bl	rt_thread_self
 1173              	.LVL137:
 550:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1174              		.loc 1 550 0
 1175 000e 0546     		mov	r5, r0
 1176 0010 0028     		cmp	r0, #0
 1177 0012 39D0     		beq	.L99
 1178              	.LVL138:
 1179              	.L93:
 551:rt-thread/src/thread.c **** 
 1180              		.loc 1 551 0
 1181 0014 2846     		mov	r0, r5
 1182 0016 FFF7FEFF 		bl	rt_object_get_type
 1183              	.LVL139:
 1184 001a 0128     		cmp	r0, #1
 1185 001c 05D0     		beq	.L94
 551:rt-thread/src/thread.c **** 
 1186              		.loc 1 551 0 is_stmt 0 discriminator 1
 1187 001e 40F22722 		movw	r2, #551
 1188 0022 2149     		ldr	r1, .L100
 1189 0024 2148     		ldr	r0, .L100+4
 1190 0026 FFF7FEFF 		bl	rt_assert_handler
 1191              	.LVL140:
 1192              	.L94:
 554:rt-thread/src/thread.c **** 
 1193              		.loc 1 554 0 is_stmt 1
 1194 002a FFF7FEFF 		bl	rt_hw_interrupt_disable
 1195              	.LVL141:
 1196 002e 0746     		mov	r7, r0
 1197              	.LVL142:
 556:rt-thread/src/thread.c ****     {
ARM GAS  /tmp/ccxK9JzO.s 			page 40


 1198              		.loc 1 556 0
 1199 0030 FFF7FEFF 		bl	rt_tick_get
 1200              	.LVL143:
 1201 0034 2368     		ldr	r3, [r4]
 1202 0036 C01A     		subs	r0, r0, r3
 1203 0038 B042     		cmp	r0, r6
 1204 003a 2CD2     		bcs	.L95
 558:rt-thread/src/thread.c **** 
 1205              		.loc 1 558 0
 1206 003c FFF7FEFF 		bl	rt_tick_get
 1207              	.LVL144:
 1208 0040 2368     		ldr	r3, [r4]
 1209 0042 C01A     		subs	r0, r0, r3
 1210 0044 0644     		add	r6, r6, r0
 1211              	.LVL145:
 1212 0046 2660     		str	r6, [r4]
 561:rt-thread/src/thread.c **** 
 1213              		.loc 1 561 0
 1214 0048 2846     		mov	r0, r5
 1215 004a FFF7FEFF 		bl	rt_thread_suspend
 1216              	.LVL146:
 564:rt-thread/src/thread.c ****         rt_timer_start(&(thread->thread_timer));
 1217              		.loc 1 564 0
 1218 004e 05F14406 		add	r6, r5, #68
 1219 0052 2246     		mov	r2, r4
 1220 0054 0021     		movs	r1, #0
 1221 0056 3046     		mov	r0, r6
 1222 0058 FFF7FEFF 		bl	rt_timer_control
 1223              	.LVL147:
 565:rt-thread/src/thread.c **** 
 1224              		.loc 1 565 0
 1225 005c 3046     		mov	r0, r6
 1226 005e FFF7FEFF 		bl	rt_timer_start
 1227              	.LVL148:
 568:rt-thread/src/thread.c **** 
 1228              		.loc 1 568 0
 1229 0062 3846     		mov	r0, r7
 1230 0064 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1231              	.LVL149:
 570:rt-thread/src/thread.c **** 
 1232              		.loc 1 570 0
 1233 0068 FFF7FEFF 		bl	rt_schedule
 1234              	.LVL150:
 573:rt-thread/src/thread.c ****         {
 1235              		.loc 1 573 0
 1236 006c 2B6B     		ldr	r3, [r5, #48]
 1237 006e 13F1020F 		cmn	r3, #2
 1238 0072 13D1     		bne	.L96
 575:rt-thread/src/thread.c ****         }
 1239              		.loc 1 575 0
 1240 0074 0023     		movs	r3, #0
 1241 0076 2B63     		str	r3, [r5, #48]
 1242 0078 10E0     		b	.L96
 1243              	.LVL151:
 1244              	.L98:
 546:rt-thread/src/thread.c **** 
 1245              		.loc 1 546 0 discriminator 1
ARM GAS  /tmp/ccxK9JzO.s 			page 41


 1246 007a 40F22222 		movw	r2, #546
 1247 007e 0A49     		ldr	r1, .L100
 1248              	.LVL152:
 1249 0080 0B48     		ldr	r0, .L100+8
 1250              	.LVL153:
 1251 0082 FFF7FEFF 		bl	rt_assert_handler
 1252              	.LVL154:
 1253 0086 C0E7     		b	.L92
 1254              	.LVL155:
 1255              	.L99:
 550:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1256              		.loc 1 550 0 discriminator 1
 1257 0088 40F22622 		movw	r2, #550
 1258 008c 0649     		ldr	r1, .L100
 1259 008e 0948     		ldr	r0, .L100+12
 1260              	.LVL156:
 1261 0090 FFF7FEFF 		bl	rt_assert_handler
 1262              	.LVL157:
 1263 0094 BEE7     		b	.L93
 1264              	.LVL158:
 1265              	.L95:
 580:rt-thread/src/thread.c ****     }
 1266              		.loc 1 580 0
 1267 0096 3846     		mov	r0, r7
 1268 0098 FFF7FEFF 		bl	rt_hw_interrupt_enable
 1269              	.LVL159:
 1270              	.L96:
 584:rt-thread/src/thread.c **** 
 1271              		.loc 1 584 0
 1272 009c FFF7FEFF 		bl	rt_tick_get
 1273              	.LVL160:
 1274 00a0 2060     		str	r0, [r4]
 587:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_delay_util);
 1275              		.loc 1 587 0
 1276 00a2 0020     		movs	r0, #0
 1277 00a4 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1278              	.LVL161:
 1279              	.L101:
 1280 00a6 00BF     		.align	2
 1281              	.L100:
 1282 00a8 00000000 		.word	.LANCHOR7
 1283 00ac 50000000 		.word	.LC3
 1284 00b0 00000000 		.word	.LC8
 1285 00b4 00000000 		.word	.LC1
 1286              		.cfi_endproc
 1287              	.LFE26:
 1289              		.section	.text.rt_thread_resume,"ax",%progbits
 1290              		.align	1
 1291              		.global	rt_thread_resume
 1292              		.syntax unified
 1293              		.thumb
 1294              		.thumb_func
 1295              		.fpu fpv4-sp-d16
 1297              	rt_thread_resume:
 1298              	.LFB30:
 765:rt-thread/src/thread.c ****     register rt_base_t temp;
 1299              		.loc 1 765 0
ARM GAS  /tmp/ccxK9JzO.s 			page 42


 1300              		.cfi_startproc
 1301              		@ args = 0, pretend = 0, frame = 0
 1302              		@ frame_needed = 0, uses_anonymous_args = 0
 1303              	.LVL162:
 1304 0000 38B5     		push	{r3, r4, r5, lr}
 1305              	.LCFI25:
 1306              		.cfi_def_cfa_offset 16
 1307              		.cfi_offset 3, -16
 1308              		.cfi_offset 4, -12
 1309              		.cfi_offset 5, -8
 1310              		.cfi_offset 14, -4
 769:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1311              		.loc 1 769 0
 1312 0002 0446     		mov	r4, r0
 1313 0004 48B3     		cbz	r0, .L108
 1314              	.LVL163:
 1315              	.L103:
 770:rt-thread/src/thread.c **** 
 1316              		.loc 1 770 0
 1317 0006 2046     		mov	r0, r4
 1318 0008 FFF7FEFF 		bl	rt_object_get_type
 1319              	.LVL164:
 1320 000c 0128     		cmp	r0, #1
 1321 000e 05D0     		beq	.L104
 770:rt-thread/src/thread.c **** 
 1322              		.loc 1 770 0 is_stmt 0 discriminator 1
 1323 0010 40F20232 		movw	r2, #770
 1324 0014 1649     		ldr	r1, .L109
 1325 0016 1748     		ldr	r0, .L109+4
 1326 0018 FFF7FEFF 		bl	rt_assert_handler
 1327              	.LVL165:
 1328              	.L104:
 774:rt-thread/src/thread.c ****     {
 1329              		.loc 1 774 0 is_stmt 1
 1330 001c 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1331 0020 03F00703 		and	r3, r3, #7
 1332 0024 022B     		cmp	r3, #2
 1333 0026 1FD1     		bne	.L106
 783:rt-thread/src/thread.c **** 
 1334              		.loc 1 783 0
 1335 0028 FFF7FEFF 		bl	rt_hw_interrupt_disable
 1336              	.LVL166:
 1337 002c 0546     		mov	r5, r0
 1338              	.LVL167:
 786:rt-thread/src/thread.c **** 
 1339              		.loc 1 786 0
 1340 002e 04F11403 		add	r3, r4, #20
 1341              	.LVL168:
 1342              	.LBB24:
 1343              	.LBB25:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 1344              		.loc 2 88 0
 1345 0032 6269     		ldr	r2, [r4, #20]
 1346 0034 A169     		ldr	r1, [r4, #24]
 1347 0036 5160     		str	r1, [r2, #4]
  89:rt-thread/include/rtservice.h **** 
 1348              		.loc 2 89 0
ARM GAS  /tmp/ccxK9JzO.s 			page 43


 1349 0038 A269     		ldr	r2, [r4, #24]
 1350 003a 6169     		ldr	r1, [r4, #20]
 1351 003c 1160     		str	r1, [r2]
 1352              		.loc 2 91 0
 1353 003e A361     		str	r3, [r4, #24]
 1354 0040 6361     		str	r3, [r4, #20]
 1355              	.LVL169:
 1356              	.LBE25:
 1357              	.LBE24:
 788:rt-thread/src/thread.c **** 
 1358              		.loc 1 788 0
 1359 0042 04F14400 		add	r0, r4, #68
 1360              	.LVL170:
 1361 0046 FFF7FEFF 		bl	rt_timer_stop
 1362              	.LVL171:
 791:rt-thread/src/thread.c **** 
 1363              		.loc 1 791 0
 1364 004a 2846     		mov	r0, r5
 1365 004c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1366              	.LVL172:
 794:rt-thread/src/thread.c **** 
 1367              		.loc 1 794 0
 1368 0050 2046     		mov	r0, r4
 1369 0052 FFF7FEFF 		bl	rt_schedule_insert_thread
 1370              	.LVL173:
 797:rt-thread/src/thread.c **** }
 1371              		.loc 1 797 0
 1372 0056 0020     		movs	r0, #0
 1373 0058 38BD     		pop	{r3, r4, r5, pc}
 1374              	.LVL174:
 1375              	.L108:
 769:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1376              		.loc 1 769 0 discriminator 1
 1377 005a 40F20132 		movw	r2, #769
 1378 005e 0449     		ldr	r1, .L109
 1379 0060 0548     		ldr	r0, .L109+8
 1380              	.LVL175:
 1381 0062 FFF7FEFF 		bl	rt_assert_handler
 1382              	.LVL176:
 1383 0066 CEE7     		b	.L103
 1384              	.L106:
 779:rt-thread/src/thread.c ****     }
 1385              		.loc 1 779 0
 1386 0068 4FF0FF30 		mov	r0, #-1
 798:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_resume);
 1387              		.loc 1 798 0
 1388 006c 38BD     		pop	{r3, r4, r5, pc}
 1389              	.LVL177:
 1390              	.L110:
 1391 006e 00BF     		.align	2
 1392              	.L109:
 1393 0070 00000000 		.word	.LANCHOR8
 1394 0074 50000000 		.word	.LC3
 1395 0078 00000000 		.word	.LC1
 1396              		.cfi_endproc
 1397              	.LFE30:
 1399              		.section	.text.rt_thread_startup,"ax",%progbits
ARM GAS  /tmp/ccxK9JzO.s 			page 44


 1400              		.align	1
 1401              		.global	rt_thread_startup
 1402              		.syntax unified
 1403              		.thumb
 1404              		.thumb_func
 1405              		.fpu fpv4-sp-d16
 1407              	rt_thread_startup:
 1408              	.LFB19:
 290:rt-thread/src/thread.c ****     /* thread check */
 1409              		.loc 1 290 0
 1410              		.cfi_startproc
 1411              		@ args = 0, pretend = 0, frame = 0
 1412              		@ frame_needed = 0, uses_anonymous_args = 0
 1413              	.LVL178:
 1414 0000 10B5     		push	{r4, lr}
 1415              	.LCFI26:
 1416              		.cfi_def_cfa_offset 8
 1417              		.cfi_offset 4, -8
 1418              		.cfi_offset 14, -4
 292:rt-thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 1419              		.loc 1 292 0
 1420 0002 0446     		mov	r4, r0
 1421 0004 18B3     		cbz	r0, .L117
 1422              	.LVL179:
 1423              	.L112:
 293:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1424              		.loc 1 293 0
 1425 0006 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1426 000a 13F0070F 		tst	r3, #7
 1427 000e 25D1     		bne	.L118
 1428              	.L113:
 294:rt-thread/src/thread.c **** 
 1429              		.loc 1 294 0
 1430 0010 2046     		mov	r0, r4
 1431 0012 FFF7FEFF 		bl	rt_object_get_type
 1432              	.LVL180:
 1433 0016 0128     		cmp	r0, #1
 1434 0018 05D0     		beq	.L114
 294:rt-thread/src/thread.c **** 
 1435              		.loc 1 294 0 is_stmt 0 discriminator 1
 1436 001a 4FF49372 		mov	r2, #294
 1437 001e 1349     		ldr	r1, .L119
 1438 0020 1348     		ldr	r0, .L119+4
 1439 0022 FFF7FEFF 		bl	rt_assert_handler
 1440              	.LVL181:
 1441              	.L114:
 297:rt-thread/src/thread.c **** 
 1442              		.loc 1 297 0 is_stmt 1
 1443 0026 94F83620 		ldrb	r2, [r4, #54]	@ zero_extendqisi2
 1444 002a 84F83520 		strb	r2, [r4, #53]
 305:rt-thread/src/thread.c **** #endif
 1445              		.loc 1 305 0
 1446 002e 0123     		movs	r3, #1
 1447 0030 9340     		lsls	r3, r3, r2
 1448 0032 A363     		str	r3, [r4, #56]
 311:rt-thread/src/thread.c ****     /* then resume it */
 1449              		.loc 1 311 0
ARM GAS  /tmp/ccxK9JzO.s 			page 45


 1450 0034 0223     		movs	r3, #2
 1451 0036 84F83430 		strb	r3, [r4, #52]
 313:rt-thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1452              		.loc 1 313 0
 1453 003a 2046     		mov	r0, r4
 1454 003c FFF7FEFF 		bl	rt_thread_resume
 1455              	.LVL182:
 314:rt-thread/src/thread.c ****     {
 1456              		.loc 1 314 0
 1457 0040 FFF7FEFF 		bl	rt_thread_self
 1458              	.LVL183:
 1459 0044 08B1     		cbz	r0, .L115
 317:rt-thread/src/thread.c ****     }
 1460              		.loc 1 317 0
 1461 0046 FFF7FEFF 		bl	rt_schedule
 1462              	.LVL184:
 1463              	.L115:
 321:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_startup);
 1464              		.loc 1 321 0
 1465 004a 0020     		movs	r0, #0
 1466 004c 10BD     		pop	{r4, pc}
 1467              	.LVL185:
 1468              	.L117:
 292:rt-thread/src/thread.c ****     RT_ASSERT((thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_INIT);
 1469              		.loc 1 292 0 discriminator 1
 1470 004e 4FF49272 		mov	r2, #292
 1471 0052 0649     		ldr	r1, .L119
 1472 0054 0748     		ldr	r0, .L119+8
 1473              	.LVL186:
 1474 0056 FFF7FEFF 		bl	rt_assert_handler
 1475              	.LVL187:
 1476 005a D4E7     		b	.L112
 1477              	.L118:
 293:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1478              		.loc 1 293 0 discriminator 1
 1479 005c 40F22512 		movw	r2, #293
 1480 0060 0249     		ldr	r1, .L119
 1481 0062 0548     		ldr	r0, .L119+12
 1482 0064 FFF7FEFF 		bl	rt_assert_handler
 1483              	.LVL188:
 1484 0068 D2E7     		b	.L113
 1485              	.L120:
 1486 006a 00BF     		.align	2
 1487              	.L119:
 1488 006c 00000000 		.word	.LANCHOR9
 1489 0070 50000000 		.word	.LC3
 1490 0074 00000000 		.word	.LC1
 1491 0078 00000000 		.word	.LC9
 1492              		.cfi_endproc
 1493              	.LFE19:
 1495              		.section	.text.rt_thread_control,"ax",%progbits
 1496              		.align	1
 1497              		.global	rt_thread_control
 1498              		.syntax unified
 1499              		.thumb
 1500              		.thumb_func
 1501              		.fpu fpv4-sp-d16
ARM GAS  /tmp/ccxK9JzO.s 			page 46


 1503              	rt_thread_control:
 1504              	.LFB28:
 621:rt-thread/src/thread.c ****     register rt_base_t temp;
 1505              		.loc 1 621 0
 1506              		.cfi_startproc
 1507              		@ args = 0, pretend = 0, frame = 0
 1508              		@ frame_needed = 0, uses_anonymous_args = 0
 1509              	.LVL189:
 1510 0000 70B5     		push	{r4, r5, r6, lr}
 1511              	.LCFI27:
 1512              		.cfi_def_cfa_offset 16
 1513              		.cfi_offset 4, -16
 1514              		.cfi_offset 5, -12
 1515              		.cfi_offset 6, -8
 1516              		.cfi_offset 14, -4
 1517 0002 0D46     		mov	r5, r1
 1518 0004 1646     		mov	r6, r2
 625:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1519              		.loc 1 625 0
 1520 0006 0446     		mov	r4, r0
 1521 0008 88B1     		cbz	r0, .L133
 1522              	.LVL190:
 1523              	.L122:
 626:rt-thread/src/thread.c **** 
 1524              		.loc 1 626 0
 1525 000a 2046     		mov	r0, r4
 1526 000c FFF7FEFF 		bl	rt_object_get_type
 1527              	.LVL191:
 1528 0010 0128     		cmp	r0, #1
 1529 0012 05D0     		beq	.L123
 626:rt-thread/src/thread.c **** 
 1530              		.loc 1 626 0 is_stmt 0 discriminator 1
 1531 0014 40F27222 		movw	r2, #626
 1532 0018 1D49     		ldr	r1, .L136
 1533 001a 1E48     		ldr	r0, .L136+4
 1534 001c FFF7FEFF 		bl	rt_assert_handler
 1535              	.LVL192:
 1536              	.L123:
 628:rt-thread/src/thread.c ****     {
 1537              		.loc 1 628 0 is_stmt 1
 1538 0020 012D     		cmp	r5, #1
 1539 0022 30D0     		beq	.L125
 1540 0024 022D     		cmp	r5, #2
 1541 0026 09D0     		beq	.L126
 1542 0028 4DB3     		cbz	r5, .L134
 701:rt-thread/src/thread.c **** }
 1543              		.loc 1 701 0
 1544 002a 0020     		movs	r0, #0
 702:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_control);
 1545              		.loc 1 702 0
 1546 002c 70BD     		pop	{r4, r5, r6, pc}
 1547              	.LVL193:
 1548              	.L133:
 625:rt-thread/src/thread.c ****     RT_ASSERT(rt_object_get_type((rt_object_t)thread) == RT_Object_Class_Thread);
 1549              		.loc 1 625 0 discriminator 1
 1550 002e 40F27122 		movw	r2, #625
 1551              	.LVL194:
ARM GAS  /tmp/ccxK9JzO.s 			page 47


 1552 0032 1749     		ldr	r1, .L136
 1553              	.LVL195:
 1554 0034 1848     		ldr	r0, .L136+8
 1555              	.LVL196:
 1556 0036 FFF7FEFF 		bl	rt_assert_handler
 1557              	.LVL197:
 1558 003a E6E7     		b	.L122
 1559              	.L126:
 632:rt-thread/src/thread.c **** 
 1560              		.loc 1 632 0
 1561 003c FFF7FEFF 		bl	rt_hw_interrupt_disable
 1562              	.LVL198:
 1563 0040 0546     		mov	r5, r0
 1564              	.LVL199:
 635:rt-thread/src/thread.c ****         {
 1565              		.loc 1 635 0
 1566 0042 94F83430 		ldrb	r3, [r4, #52]	@ zero_extendqisi2
 1567 0046 03F00703 		and	r3, r3, #7
 1568 004a 012B     		cmp	r3, #1
 1569 004c 0AD0     		beq	.L135
 657:rt-thread/src/thread.c **** 
 1570              		.loc 1 657 0
 1571 004e 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1572 0050 84F83520 		strb	r2, [r4, #53]
 665:rt-thread/src/thread.c **** #endif
 1573              		.loc 1 665 0
 1574 0054 0123     		movs	r3, #1
 1575 0056 9340     		lsls	r3, r3, r2
 1576 0058 A363     		str	r3, [r4, #56]
 1577              	.LVL200:
 1578              	.L129:
 670:rt-thread/src/thread.c ****         break;
 1579              		.loc 1 670 0
 1580 005a 2846     		mov	r0, r5
 1581 005c FFF7FEFF 		bl	rt_hw_interrupt_enable
 1582              	.LVL201:
 701:rt-thread/src/thread.c **** }
 1583              		.loc 1 701 0
 1584 0060 0020     		movs	r0, #0
 671:rt-thread/src/thread.c **** 
 1585              		.loc 1 671 0
 1586 0062 70BD     		pop	{r4, r5, r6, pc}
 1587              	.LVL202:
 1588              	.L135:
 638:rt-thread/src/thread.c **** 
 1589              		.loc 1 638 0
 1590 0064 2046     		mov	r0, r4
 1591              	.LVL203:
 1592 0066 FFF7FEFF 		bl	rt_schedule_remove_thread
 1593              	.LVL204:
 641:rt-thread/src/thread.c **** 
 1594              		.loc 1 641 0
 1595 006a 3278     		ldrb	r2, [r6]	@ zero_extendqisi2
 1596 006c 84F83520 		strb	r2, [r4, #53]
 649:rt-thread/src/thread.c **** #endif
 1597              		.loc 1 649 0
 1598 0070 0123     		movs	r3, #1
ARM GAS  /tmp/ccxK9JzO.s 			page 48


 1599 0072 9340     		lsls	r3, r3, r2
 1600 0074 A363     		str	r3, [r4, #56]
 653:rt-thread/src/thread.c ****         }
 1601              		.loc 1 653 0
 1602 0076 2046     		mov	r0, r4
 1603 0078 FFF7FEFF 		bl	rt_schedule_insert_thread
 1604              	.LVL205:
 1605 007c EDE7     		b	.L129
 1606              	.LVL206:
 1607              	.L134:
 674:rt-thread/src/thread.c **** 
 1608              		.loc 1 674 0
 1609 007e 2046     		mov	r0, r4
 1610 0080 FFF7FEFF 		bl	rt_thread_startup
 1611              	.LVL207:
 1612 0084 70BD     		pop	{r4, r5, r6, pc}
 1613              	.LVL208:
 1614              	.L125:
 678:rt-thread/src/thread.c **** #endif
 1615              		.loc 1 678 0
 1616 0086 2046     		mov	r0, r4
 1617 0088 FFF7FEFF 		bl	rt_thread_delete
 1618              	.LVL209:
 1619 008c 70BD     		pop	{r4, r5, r6, pc}
 1620              	.LVL210:
 1621              	.L137:
 1622 008e 00BF     		.align	2
 1623              	.L136:
 1624 0090 00000000 		.word	.LANCHOR10
 1625 0094 50000000 		.word	.LC3
 1626 0098 00000000 		.word	.LC1
 1627              		.cfi_endproc
 1628              	.LFE28:
 1630              		.section	.text.rt_thread_find,"ax",%progbits
 1631              		.align	1
 1632              		.global	rt_thread_find
 1633              		.syntax unified
 1634              		.thumb
 1635              		.thumb_func
 1636              		.fpu fpv4-sp-d16
 1638              	rt_thread_find:
 1639              	.LFB32:
 829:rt-thread/src/thread.c **** }
 830:rt-thread/src/thread.c **** RTM_EXPORT(rt_thread_timeout);
 831:rt-thread/src/thread.c **** 
 832:rt-thread/src/thread.c **** /**
 833:rt-thread/src/thread.c ****  * This function will find the specified thread.
 834:rt-thread/src/thread.c ****  *
 835:rt-thread/src/thread.c ****  * @param name the name of thread finding
 836:rt-thread/src/thread.c ****  *
 837:rt-thread/src/thread.c ****  * @return the found thread
 838:rt-thread/src/thread.c ****  *
 839:rt-thread/src/thread.c ****  * @note please don't invoke this function in interrupt status.
 840:rt-thread/src/thread.c ****  */
 841:rt-thread/src/thread.c **** rt_thread_t rt_thread_find(char *name)
 842:rt-thread/src/thread.c **** {
 1640              		.loc 1 842 0
ARM GAS  /tmp/ccxK9JzO.s 			page 49


 1641              		.cfi_startproc
 1642              		@ args = 0, pretend = 0, frame = 0
 1643              		@ frame_needed = 0, uses_anonymous_args = 0
 1644              	.LVL211:
 1645 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 1646              	.LCFI28:
 1647              		.cfi_def_cfa_offset 24
 1648              		.cfi_offset 3, -24
 1649              		.cfi_offset 4, -20
 1650              		.cfi_offset 5, -16
 1651              		.cfi_offset 6, -12
 1652              		.cfi_offset 7, -8
 1653              		.cfi_offset 14, -4
 1654 0002 0746     		mov	r7, r0
 843:rt-thread/src/thread.c ****     struct rt_object_information *information;
 844:rt-thread/src/thread.c ****     struct rt_object *object;
 845:rt-thread/src/thread.c ****     struct rt_list_node *node;
 846:rt-thread/src/thread.c **** 
 847:rt-thread/src/thread.c ****     /* enter critical */
 848:rt-thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1655              		.loc 1 848 0
 1656 0004 FFF7FEFF 		bl	rt_thread_self
 1657              	.LVL212:
 1658 0008 08B1     		cbz	r0, .L139
 849:rt-thread/src/thread.c ****         rt_enter_critical();
 1659              		.loc 1 849 0
 1660 000a FFF7FEFF 		bl	rt_enter_critical
 1661              	.LVL213:
 1662              	.L139:
 850:rt-thread/src/thread.c **** 
 851:rt-thread/src/thread.c ****     /* try to find device object */
 852:rt-thread/src/thread.c ****     information = rt_object_get_information(RT_Object_Class_Thread);
 1663              		.loc 1 852 0
 1664 000e 0120     		movs	r0, #1
 1665 0010 FFF7FEFF 		bl	rt_object_get_information
 1666              	.LVL214:
 853:rt-thread/src/thread.c ****     RT_ASSERT(information != RT_NULL);
 1667              		.loc 1 853 0
 1668 0014 0646     		mov	r6, r0
 1669 0016 68B1     		cbz	r0, .L147
 1670              	.LVL215:
 1671              	.L140:
 854:rt-thread/src/thread.c ****     for (node  = information->object_list.next;
 1672              		.loc 1 854 0
 1673 0018 7468     		ldr	r4, [r6, #4]
 1674              	.LVL216:
 1675              	.L141:
 855:rt-thread/src/thread.c ****          node != &(information->object_list);
 1676              		.loc 1 855 0 discriminator 1
 1677 001a 331D     		adds	r3, r6, #4
 854:rt-thread/src/thread.c ****     for (node  = information->object_list.next;
 1678              		.loc 1 854 0 discriminator 1
 1679 001c 9C42     		cmp	r4, r3
 1680 001e 16D0     		beq	.L148
 856:rt-thread/src/thread.c ****          node  = node->next)
 857:rt-thread/src/thread.c ****     {
 858:rt-thread/src/thread.c ****         object = rt_list_entry(node, struct rt_object, list);
ARM GAS  /tmp/ccxK9JzO.s 			page 50


 1681              		.loc 1 858 0
 1682 0020 A4F10C05 		sub	r5, r4, #12
 1683              	.LVL217:
 859:rt-thread/src/thread.c ****         if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
 1684              		.loc 1 859 0
 1685 0024 0822     		movs	r2, #8
 1686 0026 3946     		mov	r1, r7
 1687 0028 2846     		mov	r0, r5
 1688 002a FFF7FEFF 		bl	rt_strncmp
 1689              	.LVL218:
 1690 002e 40B1     		cbz	r0, .L149
 856:rt-thread/src/thread.c ****          node  = node->next)
 1691              		.loc 1 856 0
 1692 0030 2468     		ldr	r4, [r4]
 1693              	.LVL219:
 1694 0032 F2E7     		b	.L141
 1695              	.LVL220:
 1696              	.L147:
 853:rt-thread/src/thread.c ****     for (node  = information->object_list.next;
 1697              		.loc 1 853 0 discriminator 1
 1698 0034 40F25532 		movw	r2, #853
 1699 0038 0949     		ldr	r1, .L150
 1700 003a 0A48     		ldr	r0, .L150+4
 1701              	.LVL221:
 1702 003c FFF7FEFF 		bl	rt_assert_handler
 1703              	.LVL222:
 1704 0040 EAE7     		b	.L140
 1705              	.LVL223:
 1706              	.L149:
 860:rt-thread/src/thread.c ****         {
 861:rt-thread/src/thread.c ****             /* leave critical */
 862:rt-thread/src/thread.c ****             if (rt_thread_self() != RT_NULL)
 1707              		.loc 1 862 0
 1708 0042 FFF7FEFF 		bl	rt_thread_self
 1709              	.LVL224:
 1710 0046 48B1     		cbz	r0, .L138
 863:rt-thread/src/thread.c ****                 rt_exit_critical();
 1711              		.loc 1 863 0
 1712 0048 FFF7FEFF 		bl	rt_exit_critical
 1713              	.LVL225:
 1714 004c 06E0     		b	.L138
 1715              	.LVL226:
 1716              	.L148:
 864:rt-thread/src/thread.c **** 
 865:rt-thread/src/thread.c ****             return (rt_thread_t)object;
 866:rt-thread/src/thread.c ****         }
 867:rt-thread/src/thread.c ****     }
 868:rt-thread/src/thread.c **** 
 869:rt-thread/src/thread.c ****     /* leave critical */
 870:rt-thread/src/thread.c ****     if (rt_thread_self() != RT_NULL)
 1717              		.loc 1 870 0
 1718 004e FFF7FEFF 		bl	rt_thread_self
 1719              	.LVL227:
 1720 0052 0546     		mov	r5, r0
 1721 0054 10B1     		cbz	r0, .L138
 871:rt-thread/src/thread.c ****         rt_exit_critical();
 1722              		.loc 1 871 0
ARM GAS  /tmp/ccxK9JzO.s 			page 51


 1723 0056 FFF7FEFF 		bl	rt_exit_critical
 1724              	.LVL228:
 872:rt-thread/src/thread.c **** 
 873:rt-thread/src/thread.c ****     /* not found */
 874:rt-thread/src/thread.c ****     return RT_NULL;
 1725              		.loc 1 874 0
 1726 005a 0025     		movs	r5, #0
 1727              	.L138:
 875:rt-thread/src/thread.c **** }
 1728              		.loc 1 875 0
 1729 005c 2846     		mov	r0, r5
 1730 005e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 1731              	.LVL229:
 1732              	.L151:
 1733              		.align	2
 1734              	.L150:
 1735 0060 00000000 		.word	.LANCHOR11
 1736 0064 00000000 		.word	.LC10
 1737              		.cfi_endproc
 1738              	.LFE32:
 1740              		.section	.rodata.__FUNCTION__.6530,"a",%progbits
 1741              		.align	2
 1742              		.set	.LANCHOR0,. + 0
 1745              	__FUNCTION__.6530:
 1746 0000 5F72745F 		.ascii	"_rt_thread_init\000"
 1746      74687265 
 1746      61645F69 
 1746      6E697400 
 1747              		.section	.rodata.__FUNCTION__.6542,"a",%progbits
 1748              		.align	2
 1749              		.set	.LANCHOR2,. + 0
 1752              	__FUNCTION__.6542:
 1753 0000 72745F74 		.ascii	"rt_thread_init\000"
 1753      68726561 
 1753      645F696E 
 1753      697400
 1754              		.section	.rodata.__FUNCTION__.6551,"a",%progbits
 1755              		.align	2
 1756              		.set	.LANCHOR9,. + 0
 1759              	__FUNCTION__.6551:
 1760 0000 72745F74 		.ascii	"rt_thread_startup\000"
 1760      68726561 
 1760      645F7374 
 1760      61727475 
 1760      7000
 1761              		.section	.rodata.__FUNCTION__.6556,"a",%progbits
 1762              		.align	2
 1763              		.set	.LANCHOR3,. + 0
 1766              	__FUNCTION__.6556:
 1767 0000 72745F74 		.ascii	"rt_thread_detach\000"
 1767      68726561 
 1767      645F6465 
 1767      74616368 
 1767      00
 1768              		.section	.rodata.__FUNCTION__.6572,"a",%progbits
 1769              		.align	2
 1770              		.set	.LANCHOR4,. + 0
ARM GAS  /tmp/ccxK9JzO.s 			page 52


 1773              	__FUNCTION__.6572:
 1774 0000 72745F74 		.ascii	"rt_thread_delete\000"
 1774      68726561 
 1774      645F6465 
 1774      6C657465 
 1774      00
 1775              		.section	.rodata.__FUNCTION__.6581,"a",%progbits
 1776              		.align	2
 1777              		.set	.LANCHOR6,. + 0
 1780              	__FUNCTION__.6581:
 1781 0000 72745F74 		.ascii	"rt_thread_sleep\000"
 1781      68726561 
 1781      645F736C 
 1781      65657000 
 1782              		.section	.rodata.__FUNCTION__.6591,"a",%progbits
 1783              		.align	2
 1784              		.set	.LANCHOR7,. + 0
 1787              	__FUNCTION__.6591:
 1788 0000 72745F74 		.ascii	"rt_thread_delay_until\000"
 1788      68726561 
 1788      645F6465 
 1788      6C61795F 
 1788      756E7469 
 1789              		.section	.rodata.__FUNCTION__.6602,"a",%progbits
 1790              		.align	2
 1791              		.set	.LANCHOR10,. + 0
 1794              	__FUNCTION__.6602:
 1795 0000 72745F74 		.ascii	"rt_thread_control\000"
 1795      68726561 
 1795      645F636F 
 1795      6E74726F 
 1795      6C00
 1796              		.section	.rodata.__FUNCTION__.6613,"a",%progbits
 1797              		.align	2
 1798              		.set	.LANCHOR5,. + 0
 1801              	__FUNCTION__.6613:
 1802 0000 72745F74 		.ascii	"rt_thread_suspend\000"
 1802      68726561 
 1802      645F7375 
 1802      7370656E 
 1802      6400
 1803              		.section	.rodata.__FUNCTION__.6618,"a",%progbits
 1804              		.align	2
 1805              		.set	.LANCHOR8,. + 0
 1808              	__FUNCTION__.6618:
 1809 0000 72745F74 		.ascii	"rt_thread_resume\000"
 1809      68726561 
 1809      645F7265 
 1809      73756D65 
 1809      00
 1810              		.section	.rodata.__FUNCTION__.6623,"a",%progbits
 1811              		.align	2
 1812              		.set	.LANCHOR1,. + 0
 1815              	__FUNCTION__.6623:
 1816 0000 72745F74 		.ascii	"rt_thread_timeout\000"
 1816      68726561 
 1816      645F7469 
ARM GAS  /tmp/ccxK9JzO.s 			page 53


 1816      6D656F75 
 1816      7400
 1817              		.section	.rodata.__FUNCTION__.6630,"a",%progbits
 1818              		.align	2
 1819              		.set	.LANCHOR11,. + 0
 1822              	__FUNCTION__.6630:
 1823 0000 72745F74 		.ascii	"rt_thread_find\000"
 1823      68726561 
 1823      645F6669 
 1823      6E6400
 1824              		.section	.rodata._rt_thread_init.str1.4,"aMS",%progbits,1
 1825              		.align	2
 1826              	.LC0:
 1827 0000 7072696F 		.ascii	"priority < RT_THREAD_PRIORITY_MAX\000"
 1827      72697479 
 1827      203C2052 
 1827      545F5448 
 1827      52454144 
 1828              		.section	.rodata.rt_thread_delay_until.str1.4,"aMS",%progbits,1
 1829              		.align	2
 1830              	.LC8:
 1831 0000 7469636B 		.ascii	"tick != RT_NULL\000"
 1831      20213D20 
 1831      52545F4E 
 1831      554C4C00 
 1832              		.section	.rodata.rt_thread_delete.str1.4,"aMS",%progbits,1
 1833              		.align	2
 1834              	.LC6:
 1835 0000 72745F6F 		.ascii	"rt_object_is_systemobject((rt_object_t)thread) == R"
 1835      626A6563 
 1835      745F6973 
 1835      5F737973 
 1835      74656D6F 
 1836 0033 545F4641 		.ascii	"T_FALSE\000"
 1836      4C534500 
 1837              		.section	.rodata.rt_thread_detach.str1.4,"aMS",%progbits,1
 1838              		.align	2
 1839              	.LC5:
 1840 0000 72745F6F 		.ascii	"rt_object_is_systemobject((rt_object_t)thread)\000"
 1840      626A6563 
 1840      745F6973 
 1840      5F737973 
 1840      74656D6F 
 1841              		.section	.rodata.rt_thread_find.str1.4,"aMS",%progbits,1
 1842              		.align	2
 1843              	.LC10:
 1844 0000 696E666F 		.ascii	"information != RT_NULL\000"
 1844      726D6174 
 1844      696F6E20 
 1844      213D2052 
 1844      545F4E55 
 1845              		.section	.rodata.rt_thread_init.str1.4,"aMS",%progbits,1
 1846              		.align	2
 1847              	.LC4:
 1848 0000 73746163 		.ascii	"stack_start != RT_NULL\000"
 1848      6B5F7374 
 1848      61727420 
ARM GAS  /tmp/ccxK9JzO.s 			page 54


 1848      213D2052 
 1848      545F4E55 
 1849              		.section	.rodata.rt_thread_startup.str1.4,"aMS",%progbits,1
 1850              		.align	2
 1851              	.LC9:
 1852 0000 28746872 		.ascii	"(thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_I"
 1852      6561642D 
 1852      3E737461 
 1852      74202620 
 1852      52545F54 
 1853 0033 4E495400 		.ascii	"NIT\000"
 1854              		.section	.rodata.rt_thread_suspend.str1.4,"aMS",%progbits,1
 1855              		.align	2
 1856              	.LC7:
 1857 0000 74687265 		.ascii	"thread == rt_thread_self()\000"
 1857      6164203D 
 1857      3D207274 
 1857      5F746872 
 1857      6561645F 
 1858              		.section	.rodata.rt_thread_timeout.str1.4,"aMS",%progbits,1
 1859              		.align	2
 1860              	.LC1:
 1861 0000 74687265 		.ascii	"thread != RT_NULL\000"
 1861      61642021 
 1861      3D205254 
 1861      5F4E554C 
 1861      4C00
 1862 0012 0000     		.space	2
 1863              	.LC2:
 1864 0014 28746872 		.ascii	"(thread->stat & RT_THREAD_STAT_MASK) == RT_THREAD_S"
 1864      6561642D 
 1864      3E737461 
 1864      74202620 
 1864      52545F54 
 1865 0047 55535045 		.ascii	"USPEND\000"
 1865      4E4400
 1866 004e 0000     		.space	2
 1867              	.LC3:
 1868 0050 72745F6F 		.ascii	"rt_object_get_type((rt_object_t)thread) == RT_Objec"
 1868      626A6563 
 1868      745F6765 
 1868      745F7479 
 1868      70652828 
 1869 0083 745F436C 		.ascii	"t_Class_Thread\000"
 1869      6173735F 
 1869      54687265 
 1869      616400
 1870              		.text
 1871              	.Letext0:
 1872              		.file 3 "rt-thread/include/rtdef.h"
 1873              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 1874              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 1875              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 1876              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 1877              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 1878              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 1879              		.file 10 "rt-thread/include/rtthread.h"
ARM GAS  /tmp/ccxK9JzO.s 			page 55


 1880              		.file 11 "rt-thread/include/rthw.h"
ARM GAS  /tmp/ccxK9JzO.s 			page 56


DEFINED SYMBOLS
                            *ABS*:0000000000000000 thread.c
     /tmp/ccxK9JzO.s:18     .text._rt_thread_init:0000000000000000 $t
     /tmp/ccxK9JzO.s:24     .text._rt_thread_init:0000000000000000 _rt_thread_init
     /tmp/ccxK9JzO.s:142    .text._rt_thread_init:0000000000000080 $d
     /tmp/ccxK9JzO.s:381    .text.rt_thread_exit:0000000000000000 rt_thread_exit
     /tmp/ccxK9JzO.s:157    .text.rt_thread_timeout:0000000000000000 rt_thread_timeout
     /tmp/ccxK9JzO.s:150    .text.rt_thread_timeout:0000000000000000 $t
     /tmp/ccxK9JzO.s:243    .text.rt_thread_timeout:0000000000000068 $d
     /tmp/ccxK9JzO.s:251    .text.rt_thread_init:0000000000000000 $t
     /tmp/ccxK9JzO.s:258    .text.rt_thread_init:0000000000000000 rt_thread_init
     /tmp/ccxK9JzO.s:341    .text.rt_thread_init:0000000000000058 $d
     /tmp/ccxK9JzO.s:348    .text.rt_thread_self:0000000000000000 $t
     /tmp/ccxK9JzO.s:355    .text.rt_thread_self:0000000000000000 rt_thread_self
     /tmp/ccxK9JzO.s:369    .text.rt_thread_self:0000000000000008 $d
     /tmp/ccxK9JzO.s:374    .text.rt_thread_exit:0000000000000000 $t
     /tmp/ccxK9JzO.s:465    .text.rt_thread_exit:0000000000000058 $d
     /tmp/ccxK9JzO.s:470    .text.rt_thread_detach:0000000000000000 $t
     /tmp/ccxK9JzO.s:477    .text.rt_thread_detach:0000000000000000 rt_thread_detach
     /tmp/ccxK9JzO.s:598    .text.rt_thread_detach:0000000000000094 $d
     /tmp/ccxK9JzO.s:607    .text.rt_thread_create:0000000000000000 $t
     /tmp/ccxK9JzO.s:614    .text.rt_thread_create:0000000000000000 rt_thread_create
     /tmp/ccxK9JzO.s:699    .text.rt_thread_delete:0000000000000000 $t
     /tmp/ccxK9JzO.s:706    .text.rt_thread_delete:0000000000000000 rt_thread_delete
     /tmp/ccxK9JzO.s:808    .text.rt_thread_delete:000000000000007c $d
     /tmp/ccxK9JzO.s:817    .text.rt_thread_yield:0000000000000000 $t
     /tmp/ccxK9JzO.s:824    .text.rt_thread_yield:0000000000000000 rt_thread_yield
     /tmp/ccxK9JzO.s:845    .text.rt_thread_suspend:0000000000000000 $t
     /tmp/ccxK9JzO.s:852    .text.rt_thread_suspend:0000000000000000 rt_thread_suspend
     /tmp/ccxK9JzO.s:959    .text.rt_thread_suspend:0000000000000088 $d
     /tmp/ccxK9JzO.s:967    .text.rt_thread_sleep:0000000000000000 $t
     /tmp/ccxK9JzO.s:974    .text.rt_thread_sleep:0000000000000000 rt_thread_sleep
     /tmp/ccxK9JzO.s:1075   .text.rt_thread_sleep:0000000000000070 $d
     /tmp/ccxK9JzO.s:1082   .text.rt_thread_delay:0000000000000000 $t
     /tmp/ccxK9JzO.s:1089   .text.rt_thread_delay:0000000000000000 rt_thread_delay
     /tmp/ccxK9JzO.s:1110   .text.rt_thread_mdelay:0000000000000000 $t
     /tmp/ccxK9JzO.s:1117   .text.rt_thread_mdelay:0000000000000000 rt_thread_mdelay
     /tmp/ccxK9JzO.s:1141   .text.rt_thread_delay_until:0000000000000000 $t
     /tmp/ccxK9JzO.s:1148   .text.rt_thread_delay_until:0000000000000000 rt_thread_delay_until
     /tmp/ccxK9JzO.s:1282   .text.rt_thread_delay_until:00000000000000a8 $d
     /tmp/ccxK9JzO.s:1290   .text.rt_thread_resume:0000000000000000 $t
     /tmp/ccxK9JzO.s:1297   .text.rt_thread_resume:0000000000000000 rt_thread_resume
     /tmp/ccxK9JzO.s:1393   .text.rt_thread_resume:0000000000000070 $d
     /tmp/ccxK9JzO.s:1400   .text.rt_thread_startup:0000000000000000 $t
     /tmp/ccxK9JzO.s:1407   .text.rt_thread_startup:0000000000000000 rt_thread_startup
     /tmp/ccxK9JzO.s:1488   .text.rt_thread_startup:000000000000006c $d
     /tmp/ccxK9JzO.s:1496   .text.rt_thread_control:0000000000000000 $t
     /tmp/ccxK9JzO.s:1503   .text.rt_thread_control:0000000000000000 rt_thread_control
     /tmp/ccxK9JzO.s:1624   .text.rt_thread_control:0000000000000090 $d
     /tmp/ccxK9JzO.s:1631   .text.rt_thread_find:0000000000000000 $t
     /tmp/ccxK9JzO.s:1638   .text.rt_thread_find:0000000000000000 rt_thread_find
     /tmp/ccxK9JzO.s:1735   .text.rt_thread_find:0000000000000060 $d
     /tmp/ccxK9JzO.s:1741   .rodata.__FUNCTION__.6530:0000000000000000 $d
     /tmp/ccxK9JzO.s:1745   .rodata.__FUNCTION__.6530:0000000000000000 __FUNCTION__.6530
     /tmp/ccxK9JzO.s:1748   .rodata.__FUNCTION__.6542:0000000000000000 $d
     /tmp/ccxK9JzO.s:1752   .rodata.__FUNCTION__.6542:0000000000000000 __FUNCTION__.6542
     /tmp/ccxK9JzO.s:1755   .rodata.__FUNCTION__.6551:0000000000000000 $d
ARM GAS  /tmp/ccxK9JzO.s 			page 57


     /tmp/ccxK9JzO.s:1759   .rodata.__FUNCTION__.6551:0000000000000000 __FUNCTION__.6551
     /tmp/ccxK9JzO.s:1762   .rodata.__FUNCTION__.6556:0000000000000000 $d
     /tmp/ccxK9JzO.s:1766   .rodata.__FUNCTION__.6556:0000000000000000 __FUNCTION__.6556
     /tmp/ccxK9JzO.s:1769   .rodata.__FUNCTION__.6572:0000000000000000 $d
     /tmp/ccxK9JzO.s:1773   .rodata.__FUNCTION__.6572:0000000000000000 __FUNCTION__.6572
     /tmp/ccxK9JzO.s:1776   .rodata.__FUNCTION__.6581:0000000000000000 $d
     /tmp/ccxK9JzO.s:1780   .rodata.__FUNCTION__.6581:0000000000000000 __FUNCTION__.6581
     /tmp/ccxK9JzO.s:1783   .rodata.__FUNCTION__.6591:0000000000000000 $d
     /tmp/ccxK9JzO.s:1787   .rodata.__FUNCTION__.6591:0000000000000000 __FUNCTION__.6591
     /tmp/ccxK9JzO.s:1790   .rodata.__FUNCTION__.6602:0000000000000000 $d
     /tmp/ccxK9JzO.s:1794   .rodata.__FUNCTION__.6602:0000000000000000 __FUNCTION__.6602
     /tmp/ccxK9JzO.s:1797   .rodata.__FUNCTION__.6613:0000000000000000 $d
     /tmp/ccxK9JzO.s:1801   .rodata.__FUNCTION__.6613:0000000000000000 __FUNCTION__.6613
     /tmp/ccxK9JzO.s:1804   .rodata.__FUNCTION__.6618:0000000000000000 $d
     /tmp/ccxK9JzO.s:1808   .rodata.__FUNCTION__.6618:0000000000000000 __FUNCTION__.6618
     /tmp/ccxK9JzO.s:1811   .rodata.__FUNCTION__.6623:0000000000000000 $d
     /tmp/ccxK9JzO.s:1815   .rodata.__FUNCTION__.6623:0000000000000000 __FUNCTION__.6623
     /tmp/ccxK9JzO.s:1818   .rodata.__FUNCTION__.6630:0000000000000000 $d
     /tmp/ccxK9JzO.s:1822   .rodata.__FUNCTION__.6630:0000000000000000 __FUNCTION__.6630
     /tmp/ccxK9JzO.s:1825   .rodata._rt_thread_init.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1829   .rodata.rt_thread_delay_until.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1833   .rodata.rt_thread_delete.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1838   .rodata.rt_thread_detach.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1842   .rodata.rt_thread_find.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1846   .rodata.rt_thread_init.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1850   .rodata.rt_thread_startup.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1855   .rodata.rt_thread_suspend.str1.4:0000000000000000 $d
     /tmp/ccxK9JzO.s:1859   .rodata.rt_thread_timeout.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_memset
rt_hw_stack_init
rt_timer_init
rt_assert_handler
rt_object_get_type
rt_schedule_insert_thread
rt_schedule
rt_object_init
rt_current_thread
rt_hw_interrupt_disable
rt_schedule_remove_thread
rt_timer_detach
rt_object_is_systemobject
rt_hw_interrupt_enable
rt_object_detach
rt_thread_defunct
rt_object_allocate
rt_malloc
rt_object_delete
rt_timer_stop
rt_timer_control
rt_timer_start
rt_tick_from_millisecond
rt_tick_get
rt_enter_critical
rt_object_get_information
ARM GAS  /tmp/ccxK9JzO.s 			page 58


rt_strncmp
rt_exit_critical
