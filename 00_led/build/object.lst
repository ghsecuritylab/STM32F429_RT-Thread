ARM GAS  /tmp/cctUyo4A.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"object.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_system_object_init,"ax",%progbits
  18              		.align	1
  19              		.global	rt_system_object_init
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_system_object_init:
  26              	.LFB15:
  27              		.file 1 "rt-thread/src/object.c"
   1:rt-thread/src/object.c **** /*
   2:rt-thread/src/object.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/object.c ****  *
   4:rt-thread/src/object.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/object.c ****  *
   6:rt-thread/src/object.c ****  * Change Logs:
   7:rt-thread/src/object.c ****  * Date           Author       Notes
   8:rt-thread/src/object.c ****  * 2006-03-14     Bernard      the first version
   9:rt-thread/src/object.c ****  * 2006-04-21     Bernard      change the scheduler lock to interrupt lock
  10:rt-thread/src/object.c ****  * 2006-05-18     Bernard      fix the object init bug
  11:rt-thread/src/object.c ****  * 2006-08-03     Bernard      add hook support
  12:rt-thread/src/object.c ****  * 2007-01-28     Bernard      rename RT_OBJECT_Class_Static to RT_Object_Class_Static
  13:rt-thread/src/object.c ****  * 2010-10-26     yi.qiu       add module support in rt_object_allocate and rt_object_free
  14:rt-thread/src/object.c ****  * 2017-12-10     Bernard      Add object_info enum.
  15:rt-thread/src/object.c ****  * 2018-01-25     Bernard      Fix the object find issue when enable MODULE.
  16:rt-thread/src/object.c ****  */
  17:rt-thread/src/object.c **** 
  18:rt-thread/src/object.c **** #include <rtthread.h>
  19:rt-thread/src/object.c **** #include <rthw.h>
  20:rt-thread/src/object.c **** 
  21:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
  22:rt-thread/src/object.c **** #include <dlmodule.h>
  23:rt-thread/src/object.c **** #endif
  24:rt-thread/src/object.c **** 
  25:rt-thread/src/object.c **** /*
  26:rt-thread/src/object.c ****  * define object_info for the number of rt_object_container items.
  27:rt-thread/src/object.c ****  */
  28:rt-thread/src/object.c **** enum rt_object_info_type
  29:rt-thread/src/object.c **** {
  30:rt-thread/src/object.c ****     RT_Object_Info_Thread = 0,                         /**< The object is a thread. */
  31:rt-thread/src/object.c **** #ifdef RT_USING_SEMAPHORE
ARM GAS  /tmp/cctUyo4A.s 			page 2


  32:rt-thread/src/object.c ****     RT_Object_Info_Semaphore,                          /**< The object is a semaphore. */
  33:rt-thread/src/object.c **** #endif
  34:rt-thread/src/object.c **** #ifdef RT_USING_MUTEX
  35:rt-thread/src/object.c ****     RT_Object_Info_Mutex,                              /**< The object is a mutex. */
  36:rt-thread/src/object.c **** #endif
  37:rt-thread/src/object.c **** #ifdef RT_USING_EVENT
  38:rt-thread/src/object.c ****     RT_Object_Info_Event,                              /**< The object is a event. */
  39:rt-thread/src/object.c **** #endif
  40:rt-thread/src/object.c **** #ifdef RT_USING_MAILBOX
  41:rt-thread/src/object.c ****     RT_Object_Info_MailBox,                            /**< The object is a mail box. */
  42:rt-thread/src/object.c **** #endif
  43:rt-thread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  44:rt-thread/src/object.c ****     RT_Object_Info_MessageQueue,                       /**< The object is a message queue. */
  45:rt-thread/src/object.c **** #endif
  46:rt-thread/src/object.c **** #ifdef RT_USING_MEMHEAP
  47:rt-thread/src/object.c ****     RT_Object_Info_MemHeap,                            /**< The object is a memory heap */
  48:rt-thread/src/object.c **** #endif
  49:rt-thread/src/object.c **** #ifdef RT_USING_MEMPOOL
  50:rt-thread/src/object.c ****     RT_Object_Info_MemPool,                            /**< The object is a memory pool. */
  51:rt-thread/src/object.c **** #endif
  52:rt-thread/src/object.c **** #ifdef RT_USING_DEVICE
  53:rt-thread/src/object.c ****     RT_Object_Info_Device,                             /**< The object is a device */
  54:rt-thread/src/object.c **** #endif
  55:rt-thread/src/object.c ****     RT_Object_Info_Timer,                              /**< The object is a timer. */
  56:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
  57:rt-thread/src/object.c ****     RT_Object_Info_Module,                             /**< The object is a module. */
  58:rt-thread/src/object.c **** #endif
  59:rt-thread/src/object.c ****     RT_Object_Info_Unknown,                            /**< The object is unknown. */
  60:rt-thread/src/object.c **** };
  61:rt-thread/src/object.c **** 
  62:rt-thread/src/object.c **** #define _OBJ_CONTAINER_LIST_INIT(c)     \
  63:rt-thread/src/object.c ****     {&(rt_object_container[c].object_list), &(rt_object_container[c].object_list)}
  64:rt-thread/src/object.c **** static struct rt_object_information rt_object_container[RT_Object_Info_Unknown] =
  65:rt-thread/src/object.c **** {
  66:rt-thread/src/object.c ****     /* initialize object container - thread */
  67:rt-thread/src/object.c ****     {RT_Object_Class_Thread, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Thread), sizeof(struct rt_thre
  68:rt-thread/src/object.c **** #ifdef RT_USING_SEMAPHORE
  69:rt-thread/src/object.c ****     /* initialize object container - semaphore */
  70:rt-thread/src/object.c ****     {RT_Object_Class_Semaphore, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Semaphore), sizeof(struct r
  71:rt-thread/src/object.c **** #endif
  72:rt-thread/src/object.c **** #ifdef RT_USING_MUTEX
  73:rt-thread/src/object.c ****     /* initialize object container - mutex */
  74:rt-thread/src/object.c ****     {RT_Object_Class_Mutex, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Mutex), sizeof(struct rt_mutex)
  75:rt-thread/src/object.c **** #endif
  76:rt-thread/src/object.c **** #ifdef RT_USING_EVENT
  77:rt-thread/src/object.c ****     /* initialize object container - event */
  78:rt-thread/src/object.c ****     {RT_Object_Class_Event, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Event), sizeof(struct rt_event)
  79:rt-thread/src/object.c **** #endif
  80:rt-thread/src/object.c **** #ifdef RT_USING_MAILBOX
  81:rt-thread/src/object.c ****     /* initialize object container - mailbox */
  82:rt-thread/src/object.c ****     {RT_Object_Class_MailBox, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MailBox), sizeof(struct rt_ma
  83:rt-thread/src/object.c **** #endif
  84:rt-thread/src/object.c **** #ifdef RT_USING_MESSAGEQUEUE
  85:rt-thread/src/object.c ****     /* initialize object container - message queue */
  86:rt-thread/src/object.c ****     {RT_Object_Class_MessageQueue, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MessageQueue), sizeof(st
  87:rt-thread/src/object.c **** #endif
  88:rt-thread/src/object.c **** #ifdef RT_USING_MEMHEAP
ARM GAS  /tmp/cctUyo4A.s 			page 3


  89:rt-thread/src/object.c ****     /* initialize object container - memory heap */
  90:rt-thread/src/object.c ****     {RT_Object_Class_MemHeap, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemHeap), sizeof(struct rt_me
  91:rt-thread/src/object.c **** #endif
  92:rt-thread/src/object.c **** #ifdef RT_USING_MEMPOOL
  93:rt-thread/src/object.c ****     /* initialize object container - memory pool */
  94:rt-thread/src/object.c ****     {RT_Object_Class_MemPool, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_MemPool), sizeof(struct rt_me
  95:rt-thread/src/object.c **** #endif
  96:rt-thread/src/object.c **** #ifdef RT_USING_DEVICE
  97:rt-thread/src/object.c ****     /* initialize object container - device */
  98:rt-thread/src/object.c ****     {RT_Object_Class_Device, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Device), sizeof(struct rt_devi
  99:rt-thread/src/object.c **** #endif
 100:rt-thread/src/object.c ****     /* initialize object container - timer */
 101:rt-thread/src/object.c ****     {RT_Object_Class_Timer, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Timer), sizeof(struct rt_timer)
 102:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
 103:rt-thread/src/object.c ****     /* initialize object container - module */
 104:rt-thread/src/object.c ****     {RT_Object_Class_Module, _OBJ_CONTAINER_LIST_INIT(RT_Object_Info_Module), sizeof(struct rt_dlmo
 105:rt-thread/src/object.c **** #endif
 106:rt-thread/src/object.c **** };
 107:rt-thread/src/object.c **** 
 108:rt-thread/src/object.c **** #ifdef RT_USING_HOOK
 109:rt-thread/src/object.c **** static void (*rt_object_attach_hook)(struct rt_object *object);
 110:rt-thread/src/object.c **** static void (*rt_object_detach_hook)(struct rt_object *object);
 111:rt-thread/src/object.c **** void (*rt_object_trytake_hook)(struct rt_object *object);
 112:rt-thread/src/object.c **** void (*rt_object_take_hook)(struct rt_object *object);
 113:rt-thread/src/object.c **** void (*rt_object_put_hook)(struct rt_object *object);
 114:rt-thread/src/object.c **** 
 115:rt-thread/src/object.c **** /**
 116:rt-thread/src/object.c ****  * @addtogroup Hook
 117:rt-thread/src/object.c ****  */
 118:rt-thread/src/object.c **** 
 119:rt-thread/src/object.c **** /**@{*/
 120:rt-thread/src/object.c **** 
 121:rt-thread/src/object.c **** /**
 122:rt-thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 123:rt-thread/src/object.c ****  * attaches to kernel object system.
 124:rt-thread/src/object.c ****  *
 125:rt-thread/src/object.c ****  * @param hook the hook function
 126:rt-thread/src/object.c ****  */
 127:rt-thread/src/object.c **** void rt_object_attach_sethook(void (*hook)(struct rt_object *object))
 128:rt-thread/src/object.c **** {
 129:rt-thread/src/object.c ****     rt_object_attach_hook = hook;
 130:rt-thread/src/object.c **** }
 131:rt-thread/src/object.c **** 
 132:rt-thread/src/object.c **** /**
 133:rt-thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 134:rt-thread/src/object.c ****  * detaches from kernel object system.
 135:rt-thread/src/object.c ****  *
 136:rt-thread/src/object.c ****  * @param hook the hook function
 137:rt-thread/src/object.c ****  */
 138:rt-thread/src/object.c **** void rt_object_detach_sethook(void (*hook)(struct rt_object *object))
 139:rt-thread/src/object.c **** {
 140:rt-thread/src/object.c ****     rt_object_detach_hook = hook;
 141:rt-thread/src/object.c **** }
 142:rt-thread/src/object.c **** 
 143:rt-thread/src/object.c **** /**
 144:rt-thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 145:rt-thread/src/object.c ****  * is taken from kernel object system.
ARM GAS  /tmp/cctUyo4A.s 			page 4


 146:rt-thread/src/object.c ****  *
 147:rt-thread/src/object.c ****  * The object is taken means:
 148:rt-thread/src/object.c ****  * semaphore - semaphore is taken by thread
 149:rt-thread/src/object.c ****  * mutex - mutex is taken by thread
 150:rt-thread/src/object.c ****  * event - event is received by thread
 151:rt-thread/src/object.c ****  * mailbox - mail is received by thread
 152:rt-thread/src/object.c ****  * message queue - message is received by thread
 153:rt-thread/src/object.c ****  *
 154:rt-thread/src/object.c ****  * @param hook the hook function
 155:rt-thread/src/object.c ****  */
 156:rt-thread/src/object.c **** void rt_object_trytake_sethook(void (*hook)(struct rt_object *object))
 157:rt-thread/src/object.c **** {
 158:rt-thread/src/object.c ****     rt_object_trytake_hook = hook;
 159:rt-thread/src/object.c **** }
 160:rt-thread/src/object.c **** 
 161:rt-thread/src/object.c **** /**
 162:rt-thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 163:rt-thread/src/object.c ****  * have been taken from kernel object system.
 164:rt-thread/src/object.c ****  *
 165:rt-thread/src/object.c ****  * The object have been taken means:
 166:rt-thread/src/object.c ****  * semaphore - semaphore have been taken by thread
 167:rt-thread/src/object.c ****  * mutex - mutex have been taken by thread
 168:rt-thread/src/object.c ****  * event - event have been received by thread
 169:rt-thread/src/object.c ****  * mailbox - mail have been received by thread
 170:rt-thread/src/object.c ****  * message queue - message have been received by thread
 171:rt-thread/src/object.c ****  * timer - timer is started
 172:rt-thread/src/object.c ****  *
 173:rt-thread/src/object.c ****  * @param hook the hook function
 174:rt-thread/src/object.c ****  */
 175:rt-thread/src/object.c **** void rt_object_take_sethook(void (*hook)(struct rt_object *object))
 176:rt-thread/src/object.c **** {
 177:rt-thread/src/object.c ****     rt_object_take_hook = hook;
 178:rt-thread/src/object.c **** }
 179:rt-thread/src/object.c **** 
 180:rt-thread/src/object.c **** /**
 181:rt-thread/src/object.c ****  * This function will set a hook function, which will be invoked when object
 182:rt-thread/src/object.c ****  * is put to kernel object system.
 183:rt-thread/src/object.c ****  *
 184:rt-thread/src/object.c ****  * @param hook the hook function
 185:rt-thread/src/object.c ****  */
 186:rt-thread/src/object.c **** void rt_object_put_sethook(void (*hook)(struct rt_object *object))
 187:rt-thread/src/object.c **** {
 188:rt-thread/src/object.c ****     rt_object_put_hook = hook;
 189:rt-thread/src/object.c **** }
 190:rt-thread/src/object.c **** 
 191:rt-thread/src/object.c **** /**@}*/
 192:rt-thread/src/object.c **** #endif
 193:rt-thread/src/object.c **** 
 194:rt-thread/src/object.c **** /**
 195:rt-thread/src/object.c ****  * @ingroup SystemInit
 196:rt-thread/src/object.c ****  *
 197:rt-thread/src/object.c ****  * This function will initialize system object management.
 198:rt-thread/src/object.c ****  *
 199:rt-thread/src/object.c ****  * @deprecated since 0.3.0, this function does not need to be invoked
 200:rt-thread/src/object.c ****  * in the system initialization.
 201:rt-thread/src/object.c ****  */
 202:rt-thread/src/object.c **** void rt_system_object_init(void)
ARM GAS  /tmp/cctUyo4A.s 			page 5


 203:rt-thread/src/object.c **** {
  28              		.loc 1 203 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32              		@ link register save eliminated.
  33 0000 7047     		bx	lr
  34              		.cfi_endproc
  35              	.LFE15:
  37              		.section	.text.rt_object_get_information,"ax",%progbits
  38              		.align	1
  39              		.global	rt_object_get_information
  40              		.syntax unified
  41              		.thumb
  42              		.thumb_func
  43              		.fpu fpv4-sp-d16
  45              	rt_object_get_information:
  46              	.LFB16:
 204:rt-thread/src/object.c **** }
 205:rt-thread/src/object.c **** 
 206:rt-thread/src/object.c **** /**
 207:rt-thread/src/object.c ****  * @addtogroup KernelObject
 208:rt-thread/src/object.c ****  */
 209:rt-thread/src/object.c **** 
 210:rt-thread/src/object.c **** /**@{*/
 211:rt-thread/src/object.c **** 
 212:rt-thread/src/object.c **** /**
 213:rt-thread/src/object.c ****  * This function will return the specified type of object information.
 214:rt-thread/src/object.c ****  *
 215:rt-thread/src/object.c ****  * @param type the type of object
 216:rt-thread/src/object.c ****  * @return the object type information or RT_NULL
 217:rt-thread/src/object.c ****  */
 218:rt-thread/src/object.c **** struct rt_object_information *
 219:rt-thread/src/object.c **** rt_object_get_information(enum rt_object_class_type type)
 220:rt-thread/src/object.c **** {
  47              		.loc 1 220 0
  48              		.cfi_startproc
  49              		@ args = 0, pretend = 0, frame = 0
  50              		@ frame_needed = 0, uses_anonymous_args = 0
  51              		@ link register save eliminated.
  52              	.LVL0:
 221:rt-thread/src/object.c ****     int index;
 222:rt-thread/src/object.c **** 
 223:rt-thread/src/object.c ****     for (index = 0; index < RT_Object_Info_Unknown; index ++)
  53              		.loc 1 223 0
  54 0000 0023     		movs	r3, #0
  55              	.LVL1:
  56              	.L3:
  57              		.loc 1 223 0 is_stmt 0 discriminator 1
  58 0002 032B     		cmp	r3, #3
  59 0004 09DC     		bgt	.L7
 224:rt-thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  60              		.loc 1 224 0 is_stmt 1
  61 0006 1A01     		lsls	r2, r3, #4
  62 0008 0549     		ldr	r1, .L9
  63 000a 8A5C     		ldrb	r2, [r1, r2]	@ zero_extendqisi2
  64 000c 8242     		cmp	r2, r0
ARM GAS  /tmp/cctUyo4A.s 			page 6


  65 000e 01D0     		beq	.L8
 223:rt-thread/src/object.c ****         if (rt_object_container[index].type == type) return &rt_object_container[index];
  66              		.loc 1 223 0 discriminator 2
  67 0010 0133     		adds	r3, r3, #1
  68              	.LVL2:
  69 0012 F6E7     		b	.L3
  70              	.L8:
  71              		.loc 1 224 0 discriminator 1
  72 0014 01EB0310 		add	r0, r1, r3, lsl #4
  73              	.LVL3:
  74 0018 7047     		bx	lr
  75              	.LVL4:
  76              	.L7:
 225:rt-thread/src/object.c **** 
 226:rt-thread/src/object.c ****     return RT_NULL;
  77              		.loc 1 226 0
  78 001a 0020     		movs	r0, #0
  79              	.LVL5:
 227:rt-thread/src/object.c **** }
  80              		.loc 1 227 0
  81 001c 7047     		bx	lr
  82              	.L10:
  83 001e 00BF     		.align	2
  84              	.L9:
  85 0020 00000000 		.word	.LANCHOR0
  86              		.cfi_endproc
  87              	.LFE16:
  89              		.section	.text.rt_object_init,"ax",%progbits
  90              		.align	1
  91              		.global	rt_object_init
  92              		.syntax unified
  93              		.thumb
  94              		.thumb_func
  95              		.fpu fpv4-sp-d16
  97              	rt_object_init:
  98              	.LFB17:
 228:rt-thread/src/object.c **** RTM_EXPORT(rt_object_get_information);
 229:rt-thread/src/object.c **** 
 230:rt-thread/src/object.c **** /**
 231:rt-thread/src/object.c ****  * This function will initialize an object and add it to object system
 232:rt-thread/src/object.c ****  * management.
 233:rt-thread/src/object.c ****  *
 234:rt-thread/src/object.c ****  * @param object the specified object to be initialized.
 235:rt-thread/src/object.c ****  * @param type the object type.
 236:rt-thread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 237:rt-thread/src/object.c ****  */
 238:rt-thread/src/object.c **** void rt_object_init(struct rt_object         *object,
 239:rt-thread/src/object.c ****                     enum rt_object_class_type type,
 240:rt-thread/src/object.c ****                     const char               *name)
 241:rt-thread/src/object.c **** {
  99              		.loc 1 241 0
 100              		.cfi_startproc
 101              		@ args = 0, pretend = 0, frame = 0
 102              		@ frame_needed = 0, uses_anonymous_args = 0
 103              	.LVL6:
 104 0000 2DE9F843 		push	{r3, r4, r5, r6, r7, r8, r9, lr}
 105              	.LCFI0:
ARM GAS  /tmp/cctUyo4A.s 			page 7


 106              		.cfi_def_cfa_offset 32
 107              		.cfi_offset 3, -32
 108              		.cfi_offset 4, -28
 109              		.cfi_offset 5, -24
 110              		.cfi_offset 6, -20
 111              		.cfi_offset 7, -16
 112              		.cfi_offset 8, -12
 113              		.cfi_offset 9, -8
 114              		.cfi_offset 14, -4
 115 0004 0746     		mov	r7, r0
 116 0006 8846     		mov	r8, r1
 117 0008 9146     		mov	r9, r2
 118              	.LVL7:
 242:rt-thread/src/object.c ****     register rt_base_t temp;
 243:rt-thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 244:rt-thread/src/object.c ****     struct rt_object_information *information;
 245:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
 246:rt-thread/src/object.c ****     struct rt_dlmodule *module = dlmodule_self();
 247:rt-thread/src/object.c **** #endif
 248:rt-thread/src/object.c **** 
 249:rt-thread/src/object.c ****     /* get object information */
 250:rt-thread/src/object.c ****     information = rt_object_get_information(type);
 119              		.loc 1 250 0
 120 000a 0846     		mov	r0, r1
 121              	.LVL8:
 122 000c FFF7FEFF 		bl	rt_object_get_information
 123              	.LVL9:
 251:rt-thread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 124              		.loc 1 251 0
 125 0010 0646     		mov	r6, r0
 126 0012 18B1     		cbz	r0, .L17
 127              	.LVL10:
 128              	.L12:
 252:rt-thread/src/object.c **** 
 253:rt-thread/src/object.c ****     /* check object type to avoid re-initialization */
 254:rt-thread/src/object.c **** 
 255:rt-thread/src/object.c ****     /* enter critical */
 256:rt-thread/src/object.c ****     rt_enter_critical();
 129              		.loc 1 256 0
 130 0014 FFF7FEFF 		bl	rt_enter_critical
 131              	.LVL11:
 257:rt-thread/src/object.c ****     /* try to find object */
 258:rt-thread/src/object.c ****     for (node  = information->object_list.next;
 132              		.loc 1 258 0
 133 0018 7468     		ldr	r4, [r6, #4]
 134              	.LVL12:
 135 001a 06E0     		b	.L13
 136              	.LVL13:
 137              	.L17:
 251:rt-thread/src/object.c **** 
 138              		.loc 1 251 0 discriminator 1
 139 001c FB22     		movs	r2, #251
 140 001e 1749     		ldr	r1, .L19
 141 0020 1748     		ldr	r0, .L19+4
 142              	.LVL14:
 143 0022 FFF7FEFF 		bl	rt_assert_handler
 144              	.LVL15:
ARM GAS  /tmp/cctUyo4A.s 			page 8


 145 0026 F5E7     		b	.L12
 146              	.LVL16:
 147              	.L14:
 259:rt-thread/src/object.c ****             node != &(information->object_list);
 260:rt-thread/src/object.c ****             node  = node->next)
 148              		.loc 1 260 0
 149 0028 2468     		ldr	r4, [r4]
 150              	.LVL17:
 151              	.L13:
 259:rt-thread/src/object.c ****             node != &(information->object_list);
 152              		.loc 1 259 0 discriminator 1
 153 002a 351D     		adds	r5, r6, #4
 258:rt-thread/src/object.c ****             node != &(information->object_list);
 154              		.loc 1 258 0 discriminator 1
 155 002c AC42     		cmp	r4, r5
 156 002e 0BD0     		beq	.L18
 157              	.LVL18:
 158              	.LBB12:
 261:rt-thread/src/object.c ****     {
 262:rt-thread/src/object.c ****         struct rt_object *obj;
 263:rt-thread/src/object.c **** 
 264:rt-thread/src/object.c ****         obj = rt_list_entry(node, struct rt_object, list);
 265:rt-thread/src/object.c ****         if (obj) /* skip warning when disable debug */
 159              		.loc 1 265 0
 160 0030 B4F10C03 		subs	r3, r4, #12
 161              	.LVL19:
 162 0034 F8D0     		beq	.L14
 266:rt-thread/src/object.c ****         {
 267:rt-thread/src/object.c ****             RT_ASSERT(obj != object);
 163              		.loc 1 267 0
 164 0036 BB42     		cmp	r3, r7
 165 0038 F6D1     		bne	.L14
 166              		.loc 1 267 0 is_stmt 0 discriminator 1
 167 003a 40F20B12 		movw	r2, #267
 168 003e 0F49     		ldr	r1, .L19
 169 0040 1048     		ldr	r0, .L19+8
 170 0042 FFF7FEFF 		bl	rt_assert_handler
 171              	.LVL20:
 172 0046 EFE7     		b	.L14
 173              	.LVL21:
 174              	.L18:
 175              	.LBE12:
 268:rt-thread/src/object.c ****         }
 269:rt-thread/src/object.c ****     }
 270:rt-thread/src/object.c ****     /* leave critical */
 271:rt-thread/src/object.c ****     rt_exit_critical();
 176              		.loc 1 271 0 is_stmt 1
 177 0048 FFF7FEFF 		bl	rt_exit_critical
 178              	.LVL22:
 272:rt-thread/src/object.c **** 
 273:rt-thread/src/object.c ****     /* initialize object's parameters */
 274:rt-thread/src/object.c ****     /* set object type to static */
 275:rt-thread/src/object.c ****     object->type = type | RT_Object_Class_Static;
 179              		.loc 1 275 0
 180 004c 68F07F08 		orn	r8, r8, #127
 181 0050 87F80880 		strb	r8, [r7, #8]
 276:rt-thread/src/object.c ****     /* copy name */
ARM GAS  /tmp/cctUyo4A.s 			page 9


 277:rt-thread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 182              		.loc 1 277 0
 183 0054 0822     		movs	r2, #8
 184 0056 4946     		mov	r1, r9
 185 0058 3846     		mov	r0, r7
 186 005a FFF7FEFF 		bl	rt_strncpy
 187              	.LVL23:
 278:rt-thread/src/object.c **** 
 279:rt-thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 280:rt-thread/src/object.c **** 
 281:rt-thread/src/object.c ****     /* lock interrupt */
 282:rt-thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 188              		.loc 1 282 0
 189 005e FFF7FEFF 		bl	rt_hw_interrupt_disable
 190              	.LVL24:
 283:rt-thread/src/object.c **** 
 284:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
 285:rt-thread/src/object.c ****     if (module)
 286:rt-thread/src/object.c ****     {
 287:rt-thread/src/object.c ****         rt_list_insert_after(&(module->object_list), &(object->list));
 288:rt-thread/src/object.c ****         object->module_id = (void *)module;
 289:rt-thread/src/object.c ****     }
 290:rt-thread/src/object.c ****     else
 291:rt-thread/src/object.c **** #endif
 292:rt-thread/src/object.c ****     {
 293:rt-thread/src/object.c ****         /* insert object into information object list */
 294:rt-thread/src/object.c ****         rt_list_insert_after(&(information->object_list), &(object->list));
 191              		.loc 1 294 0
 192 0062 07F10C03 		add	r3, r7, #12
 193              	.LVL25:
 194              	.LBB13:
 195              	.LBB14:
 196              		.file 2 "rt-thread/include/rtservice.h"
   1:rt-thread/include/rtservice.h **** /*
   2:rt-thread/include/rtservice.h ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/include/rtservice.h ****  *
   4:rt-thread/include/rtservice.h ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/include/rtservice.h ****  *
   6:rt-thread/include/rtservice.h ****  * Change Logs:
   7:rt-thread/include/rtservice.h ****  * Date           Author       Notes
   8:rt-thread/include/rtservice.h ****  * 2006-03-16     Bernard      the first version
   9:rt-thread/include/rtservice.h ****  * 2006-09-07     Bernard      move the kservice APIs to rtthread.h
  10:rt-thread/include/rtservice.h ****  * 2007-06-27     Bernard      fix the rt_list_remove bug
  11:rt-thread/include/rtservice.h ****  * 2012-03-22     Bernard      rename kservice.h to rtservice.h
  12:rt-thread/include/rtservice.h ****  * 2017-11-15     JasonJia     Modify rt_slist_foreach to rt_slist_for_each_entry.
  13:rt-thread/include/rtservice.h ****  *                             Make code cleanup.
  14:rt-thread/include/rtservice.h ****  */
  15:rt-thread/include/rtservice.h **** 
  16:rt-thread/include/rtservice.h **** #ifndef __RT_SERVICE_H__
  17:rt-thread/include/rtservice.h **** #define __RT_SERVICE_H__
  18:rt-thread/include/rtservice.h **** 
  19:rt-thread/include/rtservice.h **** #ifdef __cplusplus
  20:rt-thread/include/rtservice.h **** extern "C" {
  21:rt-thread/include/rtservice.h **** #endif
  22:rt-thread/include/rtservice.h **** 
  23:rt-thread/include/rtservice.h **** /**
  24:rt-thread/include/rtservice.h ****  * @addtogroup KernelService
ARM GAS  /tmp/cctUyo4A.s 			page 10


  25:rt-thread/include/rtservice.h ****  */
  26:rt-thread/include/rtservice.h **** 
  27:rt-thread/include/rtservice.h **** /**@{*/
  28:rt-thread/include/rtservice.h **** 
  29:rt-thread/include/rtservice.h **** /**
  30:rt-thread/include/rtservice.h ****  * rt_container_of - return the member address of ptr, if the type of ptr is the
  31:rt-thread/include/rtservice.h ****  * struct type.
  32:rt-thread/include/rtservice.h ****  */
  33:rt-thread/include/rtservice.h **** #define rt_container_of(ptr, type, member) \
  34:rt-thread/include/rtservice.h ****     ((type *)((char *)(ptr) - (unsigned long)(&((type *)0)->member)))
  35:rt-thread/include/rtservice.h **** 
  36:rt-thread/include/rtservice.h **** 
  37:rt-thread/include/rtservice.h **** /**
  38:rt-thread/include/rtservice.h ****  * @brief initialize a list object
  39:rt-thread/include/rtservice.h ****  */
  40:rt-thread/include/rtservice.h **** #define RT_LIST_OBJECT_INIT(object) { &(object), &(object) }
  41:rt-thread/include/rtservice.h **** 
  42:rt-thread/include/rtservice.h **** /**
  43:rt-thread/include/rtservice.h ****  * @brief initialize a list
  44:rt-thread/include/rtservice.h ****  *
  45:rt-thread/include/rtservice.h ****  * @param l list to be initialized
  46:rt-thread/include/rtservice.h ****  */
  47:rt-thread/include/rtservice.h **** rt_inline void rt_list_init(rt_list_t *l)
  48:rt-thread/include/rtservice.h **** {
  49:rt-thread/include/rtservice.h ****     l->next = l->prev = l;
  50:rt-thread/include/rtservice.h **** }
  51:rt-thread/include/rtservice.h **** 
  52:rt-thread/include/rtservice.h **** /**
  53:rt-thread/include/rtservice.h ****  * @brief insert a node after a list
  54:rt-thread/include/rtservice.h ****  *
  55:rt-thread/include/rtservice.h ****  * @param l list to insert it
  56:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  57:rt-thread/include/rtservice.h ****  */
  58:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_after(rt_list_t *l, rt_list_t *n)
  59:rt-thread/include/rtservice.h **** {
  60:rt-thread/include/rtservice.h ****     l->next->prev = n;
 197              		.loc 2 60 0
 198 0066 7268     		ldr	r2, [r6, #4]
 199 0068 5360     		str	r3, [r2, #4]
  61:rt-thread/include/rtservice.h ****     n->next = l->next;
 200              		.loc 2 61 0
 201 006a 7268     		ldr	r2, [r6, #4]
 202 006c FA60     		str	r2, [r7, #12]
  62:rt-thread/include/rtservice.h **** 
  63:rt-thread/include/rtservice.h ****     l->next = n;
 203              		.loc 2 63 0
 204 006e 7360     		str	r3, [r6, #4]
  64:rt-thread/include/rtservice.h ****     n->prev = l;
 205              		.loc 2 64 0
 206 0070 3D61     		str	r5, [r7, #16]
 207              	.LVL26:
 208              	.LBE14:
 209              	.LBE13:
 295:rt-thread/src/object.c ****     }
 296:rt-thread/src/object.c **** 
 297:rt-thread/src/object.c ****     /* unlock interrupt */
 298:rt-thread/src/object.c ****     rt_hw_interrupt_enable(temp);
ARM GAS  /tmp/cctUyo4A.s 			page 11


 210              		.loc 1 298 0
 211 0072 FFF7FEFF 		bl	rt_hw_interrupt_enable
 212              	.LVL27:
 213 0076 BDE8F883 		pop	{r3, r4, r5, r6, r7, r8, r9, pc}
 214              	.LVL28:
 215              	.L20:
 216 007a 00BF     		.align	2
 217              	.L19:
 218 007c 00000000 		.word	.LANCHOR1
 219 0080 00000000 		.word	.LC0
 220 0084 18000000 		.word	.LC1
 221              		.cfi_endproc
 222              	.LFE17:
 224              		.section	.text.rt_object_detach,"ax",%progbits
 225              		.align	1
 226              		.global	rt_object_detach
 227              		.syntax unified
 228              		.thumb
 229              		.thumb_func
 230              		.fpu fpv4-sp-d16
 232              	rt_object_detach:
 233              	.LFB18:
 299:rt-thread/src/object.c **** }
 300:rt-thread/src/object.c **** 
 301:rt-thread/src/object.c **** /**
 302:rt-thread/src/object.c ****  * This function will detach a static object from object system,
 303:rt-thread/src/object.c ****  * and the memory of static object is not freed.
 304:rt-thread/src/object.c ****  *
 305:rt-thread/src/object.c ****  * @param object the specified object to be detached.
 306:rt-thread/src/object.c ****  */
 307:rt-thread/src/object.c **** void rt_object_detach(rt_object_t object)
 308:rt-thread/src/object.c **** {
 234              		.loc 1 308 0
 235              		.cfi_startproc
 236              		@ args = 0, pretend = 0, frame = 0
 237              		@ frame_needed = 0, uses_anonymous_args = 0
 238              	.LVL29:
 239 0000 10B5     		push	{r4, lr}
 240              	.LCFI1:
 241              		.cfi_def_cfa_offset 8
 242              		.cfi_offset 4, -8
 243              		.cfi_offset 14, -4
 309:rt-thread/src/object.c ****     register rt_base_t temp;
 310:rt-thread/src/object.c **** 
 311:rt-thread/src/object.c ****     /* object check */
 312:rt-thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 244              		.loc 1 312 0
 245 0002 0446     		mov	r4, r0
 246 0004 80B1     		cbz	r0, .L24
 247              	.LVL30:
 248              	.L22:
 313:rt-thread/src/object.c **** 
 314:rt-thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 315:rt-thread/src/object.c **** 
 316:rt-thread/src/object.c ****     /* reset object type */
 317:rt-thread/src/object.c ****     object->type = 0;
 249              		.loc 1 317 0
ARM GAS  /tmp/cctUyo4A.s 			page 12


 250 0006 0023     		movs	r3, #0
 251 0008 2372     		strb	r3, [r4, #8]
 318:rt-thread/src/object.c **** 
 319:rt-thread/src/object.c ****     /* lock interrupt */
 320:rt-thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 252              		.loc 1 320 0
 253 000a FFF7FEFF 		bl	rt_hw_interrupt_disable
 254              	.LVL31:
 321:rt-thread/src/object.c **** 
 322:rt-thread/src/object.c ****     /* remove from old list */
 323:rt-thread/src/object.c ****     rt_list_remove(&(object->list));
 255              		.loc 1 323 0
 256 000e 04F10C03 		add	r3, r4, #12
 257              	.LVL32:
 258              	.LBB15:
 259              	.LBB16:
  65:rt-thread/include/rtservice.h **** }
  66:rt-thread/include/rtservice.h **** 
  67:rt-thread/include/rtservice.h **** /**
  68:rt-thread/include/rtservice.h ****  * @brief insert a node before a list
  69:rt-thread/include/rtservice.h ****  *
  70:rt-thread/include/rtservice.h ****  * @param n new node to be inserted
  71:rt-thread/include/rtservice.h ****  * @param l list to insert it
  72:rt-thread/include/rtservice.h ****  */
  73:rt-thread/include/rtservice.h **** rt_inline void rt_list_insert_before(rt_list_t *l, rt_list_t *n)
  74:rt-thread/include/rtservice.h **** {
  75:rt-thread/include/rtservice.h ****     l->prev->next = n;
  76:rt-thread/include/rtservice.h ****     n->prev = l->prev;
  77:rt-thread/include/rtservice.h **** 
  78:rt-thread/include/rtservice.h ****     l->prev = n;
  79:rt-thread/include/rtservice.h ****     n->next = l;
  80:rt-thread/include/rtservice.h **** }
  81:rt-thread/include/rtservice.h **** 
  82:rt-thread/include/rtservice.h **** /**
  83:rt-thread/include/rtservice.h ****  * @brief remove node from list.
  84:rt-thread/include/rtservice.h ****  * @param n the node to remove from the list.
  85:rt-thread/include/rtservice.h ****  */
  86:rt-thread/include/rtservice.h **** rt_inline void rt_list_remove(rt_list_t *n)
  87:rt-thread/include/rtservice.h **** {
  88:rt-thread/include/rtservice.h ****     n->next->prev = n->prev;
 260              		.loc 2 88 0
 261 0012 E268     		ldr	r2, [r4, #12]
 262 0014 2169     		ldr	r1, [r4, #16]
 263 0016 5160     		str	r1, [r2, #4]
  89:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 264              		.loc 2 89 0
 265 0018 2269     		ldr	r2, [r4, #16]
 266 001a E168     		ldr	r1, [r4, #12]
 267 001c 1160     		str	r1, [r2]
  90:rt-thread/include/rtservice.h **** 
  91:rt-thread/include/rtservice.h ****     n->next = n->prev = n;
 268              		.loc 2 91 0
 269 001e 2361     		str	r3, [r4, #16]
 270 0020 E360     		str	r3, [r4, #12]
 271              	.LVL33:
 272              	.LBE16:
 273              	.LBE15:
ARM GAS  /tmp/cctUyo4A.s 			page 13


 324:rt-thread/src/object.c **** 
 325:rt-thread/src/object.c ****     /* unlock interrupt */
 326:rt-thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 274              		.loc 1 326 0
 275 0022 FFF7FEFF 		bl	rt_hw_interrupt_enable
 276              	.LVL34:
 277 0026 10BD     		pop	{r4, pc}
 278              	.LVL35:
 279              	.L24:
 312:rt-thread/src/object.c **** 
 280              		.loc 1 312 0 discriminator 1
 281 0028 4FF49C72 		mov	r2, #312
 282 002c 0249     		ldr	r1, .L25
 283 002e 0348     		ldr	r0, .L25+4
 284              	.LVL36:
 285 0030 FFF7FEFF 		bl	rt_assert_handler
 286              	.LVL37:
 287 0034 E7E7     		b	.L22
 288              	.L26:
 289 0036 00BF     		.align	2
 290              	.L25:
 291 0038 00000000 		.word	.LANCHOR2
 292 003c 00000000 		.word	.LC2
 293              		.cfi_endproc
 294              	.LFE18:
 296              		.section	.text.rt_object_allocate,"ax",%progbits
 297              		.align	1
 298              		.global	rt_object_allocate
 299              		.syntax unified
 300              		.thumb
 301              		.thumb_func
 302              		.fpu fpv4-sp-d16
 304              	rt_object_allocate:
 305              	.LFB19:
 327:rt-thread/src/object.c **** }
 328:rt-thread/src/object.c **** 
 329:rt-thread/src/object.c **** #ifdef RT_USING_HEAP
 330:rt-thread/src/object.c **** /**
 331:rt-thread/src/object.c ****  * This function will allocate an object from object system
 332:rt-thread/src/object.c ****  *
 333:rt-thread/src/object.c ****  * @param type the type of object
 334:rt-thread/src/object.c ****  * @param name the object name. In system, the object's name must be unique.
 335:rt-thread/src/object.c ****  *
 336:rt-thread/src/object.c ****  * @return object
 337:rt-thread/src/object.c ****  */
 338:rt-thread/src/object.c **** rt_object_t rt_object_allocate(enum rt_object_class_type type, const char *name)
 339:rt-thread/src/object.c **** {
 306              		.loc 1 339 0
 307              		.cfi_startproc
 308              		@ args = 0, pretend = 0, frame = 0
 309              		@ frame_needed = 0, uses_anonymous_args = 0
 310              	.LVL38:
 311 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 312              	.LCFI2:
 313              		.cfi_def_cfa_offset 24
 314              		.cfi_offset 3, -24
 315              		.cfi_offset 4, -20
ARM GAS  /tmp/cctUyo4A.s 			page 14


 316              		.cfi_offset 5, -16
 317              		.cfi_offset 6, -12
 318              		.cfi_offset 7, -8
 319              		.cfi_offset 14, -4
 320 0002 0646     		mov	r6, r0
 321 0004 0F46     		mov	r7, r1
 322              	.LBB17:
 340:rt-thread/src/object.c ****     struct rt_object *object;
 341:rt-thread/src/object.c ****     register rt_base_t temp;
 342:rt-thread/src/object.c ****     struct rt_object_information *information;
 343:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
 344:rt-thread/src/object.c ****     struct rt_dlmodule *module = dlmodule_self();
 345:rt-thread/src/object.c **** #endif
 346:rt-thread/src/object.c **** 
 347:rt-thread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 323              		.loc 1 347 0
 324 0006 FFF7FEFF 		bl	rt_hw_interrupt_disable
 325              	.LVL39:
 326 000a 0446     		mov	r4, r0
 327              	.LVL40:
 328 000c FFF7FEFF 		bl	rt_interrupt_get_nest
 329              	.LVL41:
 330 0010 38BB     		cbnz	r0, .L33
 331              	.L28:
 332              		.loc 1 347 0 is_stmt 0 discriminator 5
 333 0012 2046     		mov	r0, r4
 334 0014 FFF7FEFF 		bl	rt_hw_interrupt_enable
 335              	.LVL42:
 336              	.LBE17:
 348:rt-thread/src/object.c **** 
 349:rt-thread/src/object.c ****     /* get object information */
 350:rt-thread/src/object.c ****     information = rt_object_get_information(type);
 337              		.loc 1 350 0 is_stmt 1 discriminator 5
 338 0018 3046     		mov	r0, r6
 339 001a FFF7FEFF 		bl	rt_object_get_information
 340              	.LVL43:
 351:rt-thread/src/object.c ****     RT_ASSERT(information != RT_NULL);
 341              		.loc 1 351 0 discriminator 5
 342 001e 0546     		mov	r5, r0
 343 0020 58B3     		cbz	r0, .L34
 344              	.LVL44:
 345              	.L29:
 352:rt-thread/src/object.c **** 
 353:rt-thread/src/object.c ****     object = (struct rt_object *)RT_KERNEL_MALLOC(information->object_size);
 346              		.loc 1 353 0
 347 0022 E868     		ldr	r0, [r5, #12]
 348 0024 FFF7FEFF 		bl	rt_malloc
 349              	.LVL45:
 354:rt-thread/src/object.c ****     if (object == RT_NULL)
 350              		.loc 1 354 0
 351 0028 0446     		mov	r4, r0
 352              	.LVL46:
 353 002a 68B3     		cbz	r0, .L31
 355:rt-thread/src/object.c ****     {
 356:rt-thread/src/object.c ****         /* no memory can be allocated */
 357:rt-thread/src/object.c ****         return RT_NULL;
 358:rt-thread/src/object.c ****     }
ARM GAS  /tmp/cctUyo4A.s 			page 15


 359:rt-thread/src/object.c **** 
 360:rt-thread/src/object.c ****     /* clean memory data of object */
 361:rt-thread/src/object.c ****     rt_memset(object, 0x0, information->object_size);
 354              		.loc 1 361 0
 355 002c EA68     		ldr	r2, [r5, #12]
 356 002e 0021     		movs	r1, #0
 357 0030 FFF7FEFF 		bl	rt_memset
 358              	.LVL47:
 362:rt-thread/src/object.c **** 
 363:rt-thread/src/object.c ****     /* initialize object's parameters */
 364:rt-thread/src/object.c **** 
 365:rt-thread/src/object.c ****     /* set object type */
 366:rt-thread/src/object.c ****     object->type = type;
 359              		.loc 1 366 0
 360 0034 2672     		strb	r6, [r4, #8]
 367:rt-thread/src/object.c **** 
 368:rt-thread/src/object.c ****     /* set object flag */
 369:rt-thread/src/object.c ****     object->flag = 0;
 361              		.loc 1 369 0
 362 0036 0023     		movs	r3, #0
 363 0038 6372     		strb	r3, [r4, #9]
 370:rt-thread/src/object.c **** 
 371:rt-thread/src/object.c ****     /* copy name */
 372:rt-thread/src/object.c ****     rt_strncpy(object->name, name, RT_NAME_MAX);
 364              		.loc 1 372 0
 365 003a 0822     		movs	r2, #8
 366 003c 3946     		mov	r1, r7
 367 003e 2046     		mov	r0, r4
 368 0040 FFF7FEFF 		bl	rt_strncpy
 369              	.LVL48:
 373:rt-thread/src/object.c **** 
 374:rt-thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_attach_hook, (object));
 375:rt-thread/src/object.c **** 
 376:rt-thread/src/object.c ****     /* lock interrupt */
 377:rt-thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 370              		.loc 1 377 0
 371 0044 FFF7FEFF 		bl	rt_hw_interrupt_disable
 372              	.LVL49:
 378:rt-thread/src/object.c **** 
 379:rt-thread/src/object.c **** #ifdef RT_USING_MODULE
 380:rt-thread/src/object.c ****     if (module)
 381:rt-thread/src/object.c ****     {
 382:rt-thread/src/object.c ****         rt_list_insert_after(&(module->object_list), &(object->list));
 383:rt-thread/src/object.c ****         object->module_id = (void *)module;
 384:rt-thread/src/object.c ****     }
 385:rt-thread/src/object.c ****     else
 386:rt-thread/src/object.c **** #endif
 387:rt-thread/src/object.c ****     {
 388:rt-thread/src/object.c ****         /* insert object into information object list */
 389:rt-thread/src/object.c ****         rt_list_insert_after(&(information->object_list), &(object->list));
 373              		.loc 1 389 0
 374 0048 2A1D     		adds	r2, r5, #4
 375 004a 04F10C03 		add	r3, r4, #12
 376              	.LVL50:
 377              	.LBB18:
 378              	.LBB19:
  60:rt-thread/include/rtservice.h ****     n->next = l->next;
ARM GAS  /tmp/cctUyo4A.s 			page 16


 379              		.loc 2 60 0
 380 004e 6968     		ldr	r1, [r5, #4]
 381 0050 4B60     		str	r3, [r1, #4]
  61:rt-thread/include/rtservice.h **** 
 382              		.loc 2 61 0
 383 0052 6968     		ldr	r1, [r5, #4]
 384 0054 E160     		str	r1, [r4, #12]
  63:rt-thread/include/rtservice.h ****     n->prev = l;
 385              		.loc 2 63 0
 386 0056 6B60     		str	r3, [r5, #4]
  64:rt-thread/include/rtservice.h **** }
 387              		.loc 2 64 0
 388 0058 2261     		str	r2, [r4, #16]
 389              	.LVL51:
 390              	.LBE19:
 391              	.LBE18:
 390:rt-thread/src/object.c ****     }
 391:rt-thread/src/object.c **** 
 392:rt-thread/src/object.c ****     /* unlock interrupt */
 393:rt-thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 392              		.loc 1 393 0
 393 005a FFF7FEFF 		bl	rt_hw_interrupt_enable
 394              	.LVL52:
 395              	.L27:
 394:rt-thread/src/object.c **** 
 395:rt-thread/src/object.c ****     /* return object */
 396:rt-thread/src/object.c ****     return object;
 397:rt-thread/src/object.c **** }
 396              		.loc 1 397 0
 397 005e 2046     		mov	r0, r4
 398 0060 F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 399              	.LVL53:
 400              	.L33:
 401              	.LBB20:
 347:rt-thread/src/object.c **** 
 402              		.loc 1 347 0 discriminator 1
 403 0062 0A4D     		ldr	r5, .L35
 404 0064 2946     		mov	r1, r5
 405 0066 0A48     		ldr	r0, .L35+4
 406 0068 FFF7FEFF 		bl	rt_kprintf
 407              	.LVL54:
 408 006c 40F25B12 		movw	r2, #347
 409 0070 2946     		mov	r1, r5
 410 0072 0848     		ldr	r0, .L35+8
 411 0074 FFF7FEFF 		bl	rt_assert_handler
 412              	.LVL55:
 413 0078 CBE7     		b	.L28
 414              	.LVL56:
 415              	.L34:
 416              	.LBE20:
 351:rt-thread/src/object.c **** 
 417              		.loc 1 351 0 discriminator 1
 418 007a 40F25F12 		movw	r2, #351
 419 007e 0349     		ldr	r1, .L35
 420 0080 0548     		ldr	r0, .L35+12
 421              	.LVL57:
 422 0082 FFF7FEFF 		bl	rt_assert_handler
ARM GAS  /tmp/cctUyo4A.s 			page 17


 423              	.LVL58:
 424 0086 CCE7     		b	.L29
 425              	.LVL59:
 426              	.L31:
 357:rt-thread/src/object.c ****     }
 427              		.loc 1 357 0
 428 0088 0024     		movs	r4, #0
 429 008a E8E7     		b	.L27
 430              	.L36:
 431              		.align	2
 432              	.L35:
 433 008c 00000000 		.word	.LANCHOR3
 434 0090 00000000 		.word	.LC3
 435 0094 28000000 		.word	.LC4
 436 0098 00000000 		.word	.LC0
 437              		.cfi_endproc
 438              	.LFE19:
 440              		.section	.text.rt_object_delete,"ax",%progbits
 441              		.align	1
 442              		.global	rt_object_delete
 443              		.syntax unified
 444              		.thumb
 445              		.thumb_func
 446              		.fpu fpv4-sp-d16
 448              	rt_object_delete:
 449              	.LFB20:
 398:rt-thread/src/object.c **** 
 399:rt-thread/src/object.c **** /**
 400:rt-thread/src/object.c ****  * This function will delete an object and release object memory.
 401:rt-thread/src/object.c ****  *
 402:rt-thread/src/object.c ****  * @param object the specified object to be deleted.
 403:rt-thread/src/object.c ****  */
 404:rt-thread/src/object.c **** void rt_object_delete(rt_object_t object)
 405:rt-thread/src/object.c **** {
 450              		.loc 1 405 0
 451              		.cfi_startproc
 452              		@ args = 0, pretend = 0, frame = 0
 453              		@ frame_needed = 0, uses_anonymous_args = 0
 454              	.LVL60:
 455 0000 10B5     		push	{r4, lr}
 456              	.LCFI3:
 457              		.cfi_def_cfa_offset 8
 458              		.cfi_offset 4, -8
 459              		.cfi_offset 14, -4
 406:rt-thread/src/object.c ****     register rt_base_t temp;
 407:rt-thread/src/object.c **** 
 408:rt-thread/src/object.c ****     /* object check */
 409:rt-thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 460              		.loc 1 409 0
 461 0002 0446     		mov	r4, r0
 462 0004 B8B1     		cbz	r0, .L41
 463              	.LVL61:
 464              	.L38:
 410:rt-thread/src/object.c ****     RT_ASSERT(!(object->type & RT_Object_Class_Static));
 465              		.loc 1 410 0
 466 0006 94F90830 		ldrsb	r3, [r4, #8]
 467 000a 002B     		cmp	r3, #0
ARM GAS  /tmp/cctUyo4A.s 			page 18


 468 000c 1ADB     		blt	.L42
 469              	.L39:
 411:rt-thread/src/object.c **** 
 412:rt-thread/src/object.c ****     RT_OBJECT_HOOK_CALL(rt_object_detach_hook, (object));
 413:rt-thread/src/object.c **** 
 414:rt-thread/src/object.c ****     /* reset object type */
 415:rt-thread/src/object.c ****     object->type = 0;
 470              		.loc 1 415 0
 471 000e 0023     		movs	r3, #0
 472 0010 2372     		strb	r3, [r4, #8]
 416:rt-thread/src/object.c **** 
 417:rt-thread/src/object.c ****     /* lock interrupt */
 418:rt-thread/src/object.c ****     temp = rt_hw_interrupt_disable();
 473              		.loc 1 418 0
 474 0012 FFF7FEFF 		bl	rt_hw_interrupt_disable
 475              	.LVL62:
 419:rt-thread/src/object.c **** 
 420:rt-thread/src/object.c ****     /* remove from old list */
 421:rt-thread/src/object.c ****     rt_list_remove(&(object->list));
 476              		.loc 1 421 0
 477 0016 04F10C03 		add	r3, r4, #12
 478              	.LVL63:
 479              	.LBB21:
 480              	.LBB22:
  88:rt-thread/include/rtservice.h ****     n->prev->next = n->next;
 481              		.loc 2 88 0
 482 001a E268     		ldr	r2, [r4, #12]
 483 001c 2169     		ldr	r1, [r4, #16]
 484 001e 5160     		str	r1, [r2, #4]
  89:rt-thread/include/rtservice.h **** 
 485              		.loc 2 89 0
 486 0020 2269     		ldr	r2, [r4, #16]
 487 0022 E168     		ldr	r1, [r4, #12]
 488 0024 1160     		str	r1, [r2]
 489              		.loc 2 91 0
 490 0026 2361     		str	r3, [r4, #16]
 491 0028 E360     		str	r3, [r4, #12]
 492              	.LVL64:
 493              	.LBE22:
 494              	.LBE21:
 422:rt-thread/src/object.c **** 
 423:rt-thread/src/object.c ****     /* unlock interrupt */
 424:rt-thread/src/object.c ****     rt_hw_interrupt_enable(temp);
 495              		.loc 1 424 0
 496 002a FFF7FEFF 		bl	rt_hw_interrupt_enable
 497              	.LVL65:
 425:rt-thread/src/object.c **** 
 426:rt-thread/src/object.c ****     /* free the memory of object */
 427:rt-thread/src/object.c ****     RT_KERNEL_FREE(object);
 498              		.loc 1 427 0
 499 002e 2046     		mov	r0, r4
 500 0030 FFF7FEFF 		bl	rt_free
 501              	.LVL66:
 502 0034 10BD     		pop	{r4, pc}
 503              	.LVL67:
 504              	.L41:
 409:rt-thread/src/object.c ****     RT_ASSERT(!(object->type & RT_Object_Class_Static));
ARM GAS  /tmp/cctUyo4A.s 			page 19


 505              		.loc 1 409 0 discriminator 1
 506 0036 40F29912 		movw	r2, #409
 507 003a 0649     		ldr	r1, .L43
 508 003c 0648     		ldr	r0, .L43+4
 509              	.LVL68:
 510 003e FFF7FEFF 		bl	rt_assert_handler
 511              	.LVL69:
 512 0042 E0E7     		b	.L38
 513              	.L42:
 410:rt-thread/src/object.c **** 
 514              		.loc 1 410 0 discriminator 1
 515 0044 4FF4CD72 		mov	r2, #410
 516 0048 0249     		ldr	r1, .L43
 517 004a 0448     		ldr	r0, .L43+8
 518 004c FFF7FEFF 		bl	rt_assert_handler
 519              	.LVL70:
 520 0050 DDE7     		b	.L39
 521              	.L44:
 522 0052 00BF     		.align	2
 523              	.L43:
 524 0054 00000000 		.word	.LANCHOR4
 525 0058 00000000 		.word	.LC2
 526 005c 00000000 		.word	.LC5
 527              		.cfi_endproc
 528              	.LFE20:
 530              		.section	.text.rt_object_is_systemobject,"ax",%progbits
 531              		.align	1
 532              		.global	rt_object_is_systemobject
 533              		.syntax unified
 534              		.thumb
 535              		.thumb_func
 536              		.fpu fpv4-sp-d16
 538              	rt_object_is_systemobject:
 539              	.LFB21:
 428:rt-thread/src/object.c **** }
 429:rt-thread/src/object.c **** #endif
 430:rt-thread/src/object.c **** 
 431:rt-thread/src/object.c **** /**
 432:rt-thread/src/object.c ****  * This function will judge the object is system object or not.
 433:rt-thread/src/object.c ****  * Normally, the system object is a static object and the type
 434:rt-thread/src/object.c ****  * of object set to RT_Object_Class_Static.
 435:rt-thread/src/object.c ****  *
 436:rt-thread/src/object.c ****  * @param object the specified object to be judged.
 437:rt-thread/src/object.c ****  *
 438:rt-thread/src/object.c ****  * @return RT_TRUE if a system object, RT_FALSE for others.
 439:rt-thread/src/object.c ****  */
 440:rt-thread/src/object.c **** rt_bool_t rt_object_is_systemobject(rt_object_t object)
 441:rt-thread/src/object.c **** {
 540              		.loc 1 441 0
 541              		.cfi_startproc
 542              		@ args = 0, pretend = 0, frame = 0
 543              		@ frame_needed = 0, uses_anonymous_args = 0
 544              	.LVL71:
 545 0000 10B5     		push	{r4, lr}
 546              	.LCFI4:
 547              		.cfi_def_cfa_offset 8
 548              		.cfi_offset 4, -8
ARM GAS  /tmp/cctUyo4A.s 			page 20


 549              		.cfi_offset 14, -4
 442:rt-thread/src/object.c ****     /* object check */
 443:rt-thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 550              		.loc 1 443 0
 551 0002 0446     		mov	r4, r0
 552 0004 28B1     		cbz	r0, .L50
 553              	.LVL72:
 554              	.L46:
 444:rt-thread/src/object.c **** 
 445:rt-thread/src/object.c ****     if (object->type & RT_Object_Class_Static)
 555              		.loc 1 445 0
 556 0006 94F90830 		ldrsb	r3, [r4, #8]
 557 000a 002B     		cmp	r3, #0
 558 000c 08DB     		blt	.L51
 446:rt-thread/src/object.c ****         return RT_TRUE;
 447:rt-thread/src/object.c **** 
 448:rt-thread/src/object.c ****     return RT_FALSE;
 559              		.loc 1 448 0
 560 000e 0020     		movs	r0, #0
 449:rt-thread/src/object.c **** }
 561              		.loc 1 449 0
 562 0010 10BD     		pop	{r4, pc}
 563              	.LVL73:
 564              	.L50:
 443:rt-thread/src/object.c **** 
 565              		.loc 1 443 0 discriminator 1
 566 0012 40F2BB12 		movw	r2, #443
 567 0016 0349     		ldr	r1, .L52
 568 0018 0348     		ldr	r0, .L52+4
 569              	.LVL74:
 570 001a FFF7FEFF 		bl	rt_assert_handler
 571              	.LVL75:
 572 001e F2E7     		b	.L46
 573              	.L51:
 446:rt-thread/src/object.c ****         return RT_TRUE;
 574              		.loc 1 446 0
 575 0020 0120     		movs	r0, #1
 576 0022 10BD     		pop	{r4, pc}
 577              	.LVL76:
 578              	.L53:
 579              		.align	2
 580              	.L52:
 581 0024 00000000 		.word	.LANCHOR5
 582 0028 00000000 		.word	.LC2
 583              		.cfi_endproc
 584              	.LFE21:
 586              		.section	.text.rt_object_get_type,"ax",%progbits
 587              		.align	1
 588              		.global	rt_object_get_type
 589              		.syntax unified
 590              		.thumb
 591              		.thumb_func
 592              		.fpu fpv4-sp-d16
 594              	rt_object_get_type:
 595              	.LFB22:
 450:rt-thread/src/object.c **** 
 451:rt-thread/src/object.c **** /**
ARM GAS  /tmp/cctUyo4A.s 			page 21


 452:rt-thread/src/object.c ****  * This function will return the type of object without
 453:rt-thread/src/object.c ****  * RT_Object_Class_Static flag.
 454:rt-thread/src/object.c ****  *
 455:rt-thread/src/object.c ****  * @param object the specified object to be get type.
 456:rt-thread/src/object.c ****  *
 457:rt-thread/src/object.c ****  * @return the type of object.
 458:rt-thread/src/object.c ****  */
 459:rt-thread/src/object.c **** rt_uint8_t rt_object_get_type(rt_object_t object)
 460:rt-thread/src/object.c **** {
 596              		.loc 1 460 0
 597              		.cfi_startproc
 598              		@ args = 0, pretend = 0, frame = 0
 599              		@ frame_needed = 0, uses_anonymous_args = 0
 600              	.LVL77:
 601 0000 10B5     		push	{r4, lr}
 602              	.LCFI5:
 603              		.cfi_def_cfa_offset 8
 604              		.cfi_offset 4, -8
 605              		.cfi_offset 14, -4
 461:rt-thread/src/object.c ****     /* object check */
 462:rt-thread/src/object.c ****     RT_ASSERT(object != RT_NULL);
 606              		.loc 1 462 0
 607 0002 0446     		mov	r4, r0
 608 0004 18B1     		cbz	r0, .L57
 609              	.LVL78:
 610              	.L55:
 463:rt-thread/src/object.c **** 
 464:rt-thread/src/object.c ****     return object->type & ~RT_Object_Class_Static;
 611              		.loc 1 464 0
 612 0006 207A     		ldrb	r0, [r4, #8]	@ zero_extendqisi2
 465:rt-thread/src/object.c **** }
 613              		.loc 1 465 0
 614 0008 00F07F00 		and	r0, r0, #127
 615 000c 10BD     		pop	{r4, pc}
 616              	.LVL79:
 617              	.L57:
 462:rt-thread/src/object.c **** 
 618              		.loc 1 462 0 discriminator 1
 619 000e 4FF4E772 		mov	r2, #462
 620 0012 0249     		ldr	r1, .L58
 621 0014 0248     		ldr	r0, .L58+4
 622              	.LVL80:
 623 0016 FFF7FEFF 		bl	rt_assert_handler
 624              	.LVL81:
 625 001a F4E7     		b	.L55
 626              	.L59:
 627              		.align	2
 628              	.L58:
 629 001c 00000000 		.word	.LANCHOR6
 630 0020 00000000 		.word	.LC2
 631              		.cfi_endproc
 632              	.LFE22:
 634              		.section	.text.rt_object_find,"ax",%progbits
 635              		.align	1
 636              		.global	rt_object_find
 637              		.syntax unified
 638              		.thumb
ARM GAS  /tmp/cctUyo4A.s 			page 22


 639              		.thumb_func
 640              		.fpu fpv4-sp-d16
 642              	rt_object_find:
 643              	.LFB23:
 466:rt-thread/src/object.c **** 
 467:rt-thread/src/object.c **** /**
 468:rt-thread/src/object.c ****  * This function will find specified name object from object
 469:rt-thread/src/object.c ****  * container.
 470:rt-thread/src/object.c ****  *
 471:rt-thread/src/object.c ****  * @param name the specified name of object.
 472:rt-thread/src/object.c ****  * @param type the type of object
 473:rt-thread/src/object.c ****  *
 474:rt-thread/src/object.c ****  * @return the found object or RT_NULL if there is no this object
 475:rt-thread/src/object.c ****  * in object container.
 476:rt-thread/src/object.c ****  *
 477:rt-thread/src/object.c ****  * @note this function shall not be invoked in interrupt status.
 478:rt-thread/src/object.c ****  */
 479:rt-thread/src/object.c **** rt_object_t rt_object_find(const char *name, rt_uint8_t type)
 480:rt-thread/src/object.c **** {
 644              		.loc 1 480 0
 645              		.cfi_startproc
 646              		@ args = 0, pretend = 0, frame = 0
 647              		@ frame_needed = 0, uses_anonymous_args = 0
 648              	.LVL82:
 649 0000 F8B5     		push	{r3, r4, r5, r6, r7, lr}
 650              	.LCFI6:
 651              		.cfi_def_cfa_offset 24
 652              		.cfi_offset 3, -24
 653              		.cfi_offset 4, -20
 654              		.cfi_offset 5, -16
 655              		.cfi_offset 6, -12
 656              		.cfi_offset 7, -8
 657              		.cfi_offset 14, -4
 658              	.LVL83:
 481:rt-thread/src/object.c ****     struct rt_object *object = RT_NULL;
 482:rt-thread/src/object.c ****     struct rt_list_node *node = RT_NULL;
 483:rt-thread/src/object.c ****     struct rt_object_information *information = RT_NULL;
 484:rt-thread/src/object.c **** 
 485:rt-thread/src/object.c ****     /* parameter check */
 486:rt-thread/src/object.c ****     if ((name == RT_NULL) || (type > RT_Object_Class_Unknown))
 659              		.loc 1 486 0
 660 0002 0028     		cmp	r0, #0
 661 0004 3CD0     		beq	.L67
 662 0006 0646     		mov	r6, r0
 663              		.loc 1 486 0 is_stmt 0 discriminator 1
 664 0008 0C29     		cmp	r1, #12
 665 000a 3BD8     		bhi	.L68
 666 000c 0C46     		mov	r4, r1
 667              	.LBB23:
 487:rt-thread/src/object.c ****         return RT_NULL;
 488:rt-thread/src/object.c **** 
 489:rt-thread/src/object.c ****     /* which is invoke in interrupt status */
 490:rt-thread/src/object.c ****     RT_DEBUG_NOT_IN_INTERRUPT;
 668              		.loc 1 490 0 is_stmt 1
 669 000e FFF7FEFF 		bl	rt_hw_interrupt_disable
 670              	.LVL84:
 671 0012 0546     		mov	r5, r0
ARM GAS  /tmp/cctUyo4A.s 			page 23


 672              	.LVL85:
 673 0014 FFF7FEFF 		bl	rt_interrupt_get_nest
 674              	.LVL86:
 675 0018 B8B9     		cbnz	r0, .L70
 676              	.L62:
 677              		.loc 1 490 0 is_stmt 0 discriminator 5
 678 001a 2846     		mov	r0, r5
 679 001c FFF7FEFF 		bl	rt_hw_interrupt_enable
 680              	.LVL87:
 681              	.LBE23:
 491:rt-thread/src/object.c **** 
 492:rt-thread/src/object.c ****     /* enter critical */
 493:rt-thread/src/object.c ****     rt_enter_critical();
 682              		.loc 1 493 0 is_stmt 1 discriminator 5
 683 0020 FFF7FEFF 		bl	rt_enter_critical
 684              	.LVL88:
 494:rt-thread/src/object.c **** 
 495:rt-thread/src/object.c ****     /* try to find object */
 496:rt-thread/src/object.c ****     if (information == RT_NULL)
 497:rt-thread/src/object.c ****     {
 498:rt-thread/src/object.c ****         information = rt_object_get_information((enum rt_object_class_type)type);
 685              		.loc 1 498 0 discriminator 5
 686 0024 2046     		mov	r0, r4
 687 0026 FFF7FEFF 		bl	rt_object_get_information
 688              	.LVL89:
 499:rt-thread/src/object.c ****         RT_ASSERT(information != RT_NULL);
 689              		.loc 1 499 0 discriminator 5
 690 002a 0746     		mov	r7, r0
 691 002c C8B1     		cbz	r0, .L71
 692              	.LVL90:
 693              	.L63:
 500:rt-thread/src/object.c ****     }
 501:rt-thread/src/object.c ****     for (node  = information->object_list.next;
 694              		.loc 1 501 0
 695 002e 7C68     		ldr	r4, [r7, #4]
 696              	.LVL91:
 697              	.L64:
 502:rt-thread/src/object.c ****             node != &(information->object_list);
 698              		.loc 1 502 0 discriminator 1
 699 0030 3B1D     		adds	r3, r7, #4
 501:rt-thread/src/object.c ****             node != &(information->object_list);
 700              		.loc 1 501 0 discriminator 1
 701 0032 9C42     		cmp	r4, r3
 702 0034 1FD0     		beq	.L72
 503:rt-thread/src/object.c ****             node  = node->next)
 504:rt-thread/src/object.c ****     {
 505:rt-thread/src/object.c ****         object = rt_list_entry(node, struct rt_object, list);
 703              		.loc 1 505 0
 704 0036 A4F10C05 		sub	r5, r4, #12
 705              	.LVL92:
 506:rt-thread/src/object.c ****         if (rt_strncmp(object->name, name, RT_NAME_MAX) == 0)
 706              		.loc 1 506 0
 707 003a 0822     		movs	r2, #8
 708 003c 3146     		mov	r1, r6
 709 003e 2846     		mov	r0, r5
 710 0040 FFF7FEFF 		bl	rt_strncmp
 711              	.LVL93:
ARM GAS  /tmp/cctUyo4A.s 			page 24


 712 0044 A0B1     		cbz	r0, .L73
 503:rt-thread/src/object.c ****             node  = node->next)
 713              		.loc 1 503 0
 714 0046 2468     		ldr	r4, [r4]
 715              	.LVL94:
 716 0048 F2E7     		b	.L64
 717              	.LVL95:
 718              	.L70:
 719              	.LBB24:
 490:rt-thread/src/object.c **** 
 720              		.loc 1 490 0 discriminator 1
 721 004a 0F4F     		ldr	r7, .L74
 722 004c 3946     		mov	r1, r7
 723 004e 0F48     		ldr	r0, .L74+4
 724 0050 FFF7FEFF 		bl	rt_kprintf
 725              	.LVL96:
 726 0054 4FF4F572 		mov	r2, #490
 727 0058 3946     		mov	r1, r7
 728 005a 0D48     		ldr	r0, .L74+8
 729 005c FFF7FEFF 		bl	rt_assert_handler
 730              	.LVL97:
 731 0060 DBE7     		b	.L62
 732              	.LVL98:
 733              	.L71:
 734              	.LBE24:
 499:rt-thread/src/object.c ****     }
 735              		.loc 1 499 0 discriminator 1
 736 0062 40F2F312 		movw	r2, #499
 737 0066 0849     		ldr	r1, .L74
 738 0068 0A48     		ldr	r0, .L74+12
 739              	.LVL99:
 740 006a FFF7FEFF 		bl	rt_assert_handler
 741              	.LVL100:
 742 006e DEE7     		b	.L63
 743              	.LVL101:
 744              	.L73:
 507:rt-thread/src/object.c ****         {
 508:rt-thread/src/object.c ****             /* leave critical */
 509:rt-thread/src/object.c ****             rt_exit_critical();
 745              		.loc 1 509 0
 746 0070 FFF7FEFF 		bl	rt_exit_critical
 747              	.LVL102:
 510:rt-thread/src/object.c **** 
 511:rt-thread/src/object.c ****             return object;
 748              		.loc 1 511 0
 749 0074 02E0     		b	.L60
 750              	.LVL103:
 751              	.L72:
 512:rt-thread/src/object.c ****         }
 513:rt-thread/src/object.c ****     }
 514:rt-thread/src/object.c **** 
 515:rt-thread/src/object.c ****     /* leave critical */
 516:rt-thread/src/object.c ****     rt_exit_critical();
 752              		.loc 1 516 0
 753 0076 FFF7FEFF 		bl	rt_exit_critical
 754              	.LVL104:
 517:rt-thread/src/object.c **** 
ARM GAS  /tmp/cctUyo4A.s 			page 25


 518:rt-thread/src/object.c ****     return RT_NULL;
 755              		.loc 1 518 0
 756 007a 0025     		movs	r5, #0
 757              	.LVL105:
 758              	.L60:
 519:rt-thread/src/object.c **** }
 759              		.loc 1 519 0
 760 007c 2846     		mov	r0, r5
 761 007e F8BD     		pop	{r3, r4, r5, r6, r7, pc}
 762              	.LVL106:
 763              	.L67:
 487:rt-thread/src/object.c **** 
 764              		.loc 1 487 0
 765 0080 0025     		movs	r5, #0
 766 0082 FBE7     		b	.L60
 767              	.L68:
 768 0084 0025     		movs	r5, #0
 769 0086 F9E7     		b	.L60
 770              	.L75:
 771              		.align	2
 772              	.L74:
 773 0088 00000000 		.word	.LANCHOR7
 774 008c 00000000 		.word	.LC3
 775 0090 28000000 		.word	.LC4
 776 0094 00000000 		.word	.LC0
 777              		.cfi_endproc
 778              	.LFE23:
 780              		.section	.data.rt_object_container,"aw",%progbits
 781              		.align	2
 782              		.set	.LANCHOR0,. + 0
 785              	rt_object_container:
 786 0000 01       		.byte	1
 787 0001 000000   		.space	3
 788 0004 04000000 		.word	rt_object_container+4
 789 0008 04000000 		.word	rt_object_container+4
 790 000c 78000000 		.word	120
 791 0010 02       		.byte	2
 792 0011 000000   		.space	3
 793 0014 14000000 		.word	rt_object_container+20
 794 0018 14000000 		.word	rt_object_container+20
 795 001c 20000000 		.word	32
 796 0020 09       		.byte	9
 797 0021 000000   		.space	3
 798 0024 24000000 		.word	rt_object_container+36
 799 0028 24000000 		.word	rt_object_container+36
 800 002c 40000000 		.word	64
 801 0030 0A       		.byte	10
 802 0031 000000   		.space	3
 803 0034 34000000 		.word	rt_object_container+52
 804 0038 34000000 		.word	rt_object_container+52
 805 003c 2C000000 		.word	44
 806              		.section	.rodata.__FUNCTION__.6538,"a",%progbits
 807              		.align	2
 808              		.set	.LANCHOR1,. + 0
 811              	__FUNCTION__.6538:
 812 0000 72745F6F 		.ascii	"rt_object_init\000"
 812      626A6563 
ARM GAS  /tmp/cctUyo4A.s 			page 26


 812      745F696E 
 812      697400
 813              		.section	.rodata.__FUNCTION__.6547,"a",%progbits
 814              		.align	2
 815              		.set	.LANCHOR2,. + 0
 818              	__FUNCTION__.6547:
 819 0000 72745F6F 		.ascii	"rt_object_detach\000"
 819      626A6563 
 819      745F6465 
 819      74616368 
 819      00
 820              		.section	.rodata.__FUNCTION__.6556,"a",%progbits
 821              		.align	2
 822              		.set	.LANCHOR3,. + 0
 825              	__FUNCTION__.6556:
 826 0000 72745F6F 		.ascii	"rt_object_allocate\000"
 826      626A6563 
 826      745F616C 
 826      6C6F6361 
 826      746500
 827              		.section	.rodata.__FUNCTION__.6561,"a",%progbits
 828              		.align	2
 829              		.set	.LANCHOR4,. + 0
 832              	__FUNCTION__.6561:
 833 0000 72745F6F 		.ascii	"rt_object_delete\000"
 833      626A6563 
 833      745F6465 
 833      6C657465 
 833      00
 834              		.section	.rodata.__FUNCTION__.6565,"a",%progbits
 835              		.align	2
 836              		.set	.LANCHOR5,. + 0
 839              	__FUNCTION__.6565:
 840 0000 72745F6F 		.ascii	"rt_object_is_systemobject\000"
 840      626A6563 
 840      745F6973 
 840      5F737973 
 840      74656D6F 
 841              		.section	.rodata.__FUNCTION__.6569,"a",%progbits
 842              		.align	2
 843              		.set	.LANCHOR6,. + 0
 846              	__FUNCTION__.6569:
 847 0000 72745F6F 		.ascii	"rt_object_get_type\000"
 847      626A6563 
 847      745F6765 
 847      745F7479 
 847      706500
 848              		.section	.rodata.__FUNCTION__.6578,"a",%progbits
 849              		.align	2
 850              		.set	.LANCHOR7,. + 0
 853              	__FUNCTION__.6578:
 854 0000 72745F6F 		.ascii	"rt_object_find\000"
 854      626A6563 
 854      745F6669 
 854      6E6400
 855              		.section	.rodata.rt_object_allocate.str1.4,"aMS",%progbits,1
 856              		.align	2
ARM GAS  /tmp/cctUyo4A.s 			page 27


 857              	.LC3:
 858 0000 46756E63 		.ascii	"Function[%s] shall not be used in ISR\012\000"
 858      74696F6E 
 858      5B25735D 
 858      20736861 
 858      6C6C206E 
 859 0027 00       		.space	1
 860              	.LC4:
 861 0028 3000     		.ascii	"0\000"
 862              		.section	.rodata.rt_object_delete.str1.4,"aMS",%progbits,1
 863              		.align	2
 864              	.LC5:
 865 0000 21286F62 		.ascii	"!(object->type & RT_Object_Class_Static)\000"
 865      6A656374 
 865      2D3E7479 
 865      70652026 
 865      2052545F 
 866              		.section	.rodata.rt_object_detach.str1.4,"aMS",%progbits,1
 867              		.align	2
 868              	.LC2:
 869 0000 6F626A65 		.ascii	"object != RT_NULL\000"
 869      63742021 
 869      3D205254 
 869      5F4E554C 
 869      4C00
 870              		.section	.rodata.rt_object_init.str1.4,"aMS",%progbits,1
 871              		.align	2
 872              	.LC0:
 873 0000 696E666F 		.ascii	"information != RT_NULL\000"
 873      726D6174 
 873      696F6E20 
 873      213D2052 
 873      545F4E55 
 874 0017 00       		.space	1
 875              	.LC1:
 876 0018 6F626A20 		.ascii	"obj != object\000"
 876      213D206F 
 876      626A6563 
 876      7400
 877              		.text
 878              	.Letext0:
 879              		.file 3 "rt-thread/include/rtdef.h"
 880              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 881              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 882              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 883              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 884              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 885              		.file 9 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 886              		.file 10 "rt-thread/include/rtthread.h"
 887              		.file 11 "rt-thread/include/rthw.h"
ARM GAS  /tmp/cctUyo4A.s 			page 28


DEFINED SYMBOLS
                            *ABS*:0000000000000000 object.c
     /tmp/cctUyo4A.s:18     .text.rt_system_object_init:0000000000000000 $t
     /tmp/cctUyo4A.s:25     .text.rt_system_object_init:0000000000000000 rt_system_object_init
     /tmp/cctUyo4A.s:38     .text.rt_object_get_information:0000000000000000 $t
     /tmp/cctUyo4A.s:45     .text.rt_object_get_information:0000000000000000 rt_object_get_information
     /tmp/cctUyo4A.s:85     .text.rt_object_get_information:0000000000000020 $d
     /tmp/cctUyo4A.s:90     .text.rt_object_init:0000000000000000 $t
     /tmp/cctUyo4A.s:97     .text.rt_object_init:0000000000000000 rt_object_init
     /tmp/cctUyo4A.s:218    .text.rt_object_init:000000000000007c $d
     /tmp/cctUyo4A.s:225    .text.rt_object_detach:0000000000000000 $t
     /tmp/cctUyo4A.s:232    .text.rt_object_detach:0000000000000000 rt_object_detach
     /tmp/cctUyo4A.s:291    .text.rt_object_detach:0000000000000038 $d
     /tmp/cctUyo4A.s:297    .text.rt_object_allocate:0000000000000000 $t
     /tmp/cctUyo4A.s:304    .text.rt_object_allocate:0000000000000000 rt_object_allocate
     /tmp/cctUyo4A.s:433    .text.rt_object_allocate:000000000000008c $d
     /tmp/cctUyo4A.s:441    .text.rt_object_delete:0000000000000000 $t
     /tmp/cctUyo4A.s:448    .text.rt_object_delete:0000000000000000 rt_object_delete
     /tmp/cctUyo4A.s:524    .text.rt_object_delete:0000000000000054 $d
     /tmp/cctUyo4A.s:531    .text.rt_object_is_systemobject:0000000000000000 $t
     /tmp/cctUyo4A.s:538    .text.rt_object_is_systemobject:0000000000000000 rt_object_is_systemobject
     /tmp/cctUyo4A.s:581    .text.rt_object_is_systemobject:0000000000000024 $d
     /tmp/cctUyo4A.s:587    .text.rt_object_get_type:0000000000000000 $t
     /tmp/cctUyo4A.s:594    .text.rt_object_get_type:0000000000000000 rt_object_get_type
     /tmp/cctUyo4A.s:629    .text.rt_object_get_type:000000000000001c $d
     /tmp/cctUyo4A.s:635    .text.rt_object_find:0000000000000000 $t
     /tmp/cctUyo4A.s:642    .text.rt_object_find:0000000000000000 rt_object_find
     /tmp/cctUyo4A.s:773    .text.rt_object_find:0000000000000088 $d
     /tmp/cctUyo4A.s:781    .data.rt_object_container:0000000000000000 $d
     /tmp/cctUyo4A.s:785    .data.rt_object_container:0000000000000000 rt_object_container
     /tmp/cctUyo4A.s:807    .rodata.__FUNCTION__.6538:0000000000000000 $d
     /tmp/cctUyo4A.s:811    .rodata.__FUNCTION__.6538:0000000000000000 __FUNCTION__.6538
     /tmp/cctUyo4A.s:814    .rodata.__FUNCTION__.6547:0000000000000000 $d
     /tmp/cctUyo4A.s:818    .rodata.__FUNCTION__.6547:0000000000000000 __FUNCTION__.6547
     /tmp/cctUyo4A.s:821    .rodata.__FUNCTION__.6556:0000000000000000 $d
     /tmp/cctUyo4A.s:825    .rodata.__FUNCTION__.6556:0000000000000000 __FUNCTION__.6556
     /tmp/cctUyo4A.s:828    .rodata.__FUNCTION__.6561:0000000000000000 $d
     /tmp/cctUyo4A.s:832    .rodata.__FUNCTION__.6561:0000000000000000 __FUNCTION__.6561
     /tmp/cctUyo4A.s:835    .rodata.__FUNCTION__.6565:0000000000000000 $d
     /tmp/cctUyo4A.s:839    .rodata.__FUNCTION__.6565:0000000000000000 __FUNCTION__.6565
     /tmp/cctUyo4A.s:842    .rodata.__FUNCTION__.6569:0000000000000000 $d
     /tmp/cctUyo4A.s:846    .rodata.__FUNCTION__.6569:0000000000000000 __FUNCTION__.6569
     /tmp/cctUyo4A.s:849    .rodata.__FUNCTION__.6578:0000000000000000 $d
     /tmp/cctUyo4A.s:853    .rodata.__FUNCTION__.6578:0000000000000000 __FUNCTION__.6578
     /tmp/cctUyo4A.s:856    .rodata.rt_object_allocate.str1.4:0000000000000000 $d
     /tmp/cctUyo4A.s:863    .rodata.rt_object_delete.str1.4:0000000000000000 $d
     /tmp/cctUyo4A.s:867    .rodata.rt_object_detach.str1.4:0000000000000000 $d
     /tmp/cctUyo4A.s:871    .rodata.rt_object_init.str1.4:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_enter_critical
rt_assert_handler
rt_exit_critical
rt_strncpy
rt_hw_interrupt_disable
rt_hw_interrupt_enable
ARM GAS  /tmp/cctUyo4A.s 			page 29


rt_interrupt_get_nest
rt_malloc
rt_memset
rt_kprintf
rt_free
rt_strncmp
