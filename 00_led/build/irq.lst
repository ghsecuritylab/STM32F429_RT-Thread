ARM GAS  /tmp/ccxHbl55.s 			page 1


   1              		.cpu cortex-m4
   2              		.eabi_attribute 27, 1
   3              		.eabi_attribute 28, 1
   4              		.eabi_attribute 20, 1
   5              		.eabi_attribute 21, 1
   6              		.eabi_attribute 23, 3
   7              		.eabi_attribute 24, 1
   8              		.eabi_attribute 25, 1
   9              		.eabi_attribute 26, 1
  10              		.eabi_attribute 30, 1
  11              		.eabi_attribute 34, 1
  12              		.eabi_attribute 18, 4
  13              		.file	"irq.c"
  14              		.text
  15              	.Ltext0:
  16              		.cfi_sections	.debug_frame
  17              		.section	.text.rt_interrupt_enter,"ax",%progbits
  18              		.align	1
  19              		.global	rt_interrupt_enter
  20              		.syntax unified
  21              		.thumb
  22              		.thumb_func
  23              		.fpu fpv4-sp-d16
  25              	rt_interrupt_enter:
  26              	.LFB15:
  27              		.file 1 "rt-thread/src/irq.c"
   1:rt-thread/src/irq.c **** /*
   2:rt-thread/src/irq.c ****  * Copyright (c) 2006-2018, RT-Thread Development Team
   3:rt-thread/src/irq.c ****  *
   4:rt-thread/src/irq.c ****  * SPDX-License-Identifier: Apache-2.0
   5:rt-thread/src/irq.c ****  *
   6:rt-thread/src/irq.c ****  * Change Logs:
   7:rt-thread/src/irq.c ****  * Date           Author       Notes
   8:rt-thread/src/irq.c ****  * 2006-02-24     Bernard      first version
   9:rt-thread/src/irq.c ****  * 2006-05-03     Bernard      add IRQ_DEBUG
  10:rt-thread/src/irq.c ****  * 2016-08-09     ArdaFu       add interrupt enter and leave hook.
  11:rt-thread/src/irq.c ****  * 2018-11-22     Jesven       rt_interrupt_get_nest function add disable irq
  12:rt-thread/src/irq.c ****  */
  13:rt-thread/src/irq.c **** 
  14:rt-thread/src/irq.c **** #include <rthw.h>
  15:rt-thread/src/irq.c **** #include <rtthread.h>
  16:rt-thread/src/irq.c **** 
  17:rt-thread/src/irq.c **** #ifdef RT_USING_HOOK
  18:rt-thread/src/irq.c **** 
  19:rt-thread/src/irq.c **** static void (*rt_interrupt_enter_hook)(void);
  20:rt-thread/src/irq.c **** static void (*rt_interrupt_leave_hook)(void);
  21:rt-thread/src/irq.c **** 
  22:rt-thread/src/irq.c **** /**
  23:rt-thread/src/irq.c ****  * @ingroup Hook
  24:rt-thread/src/irq.c ****  * This function set a hook function when the system enter a interrupt 
  25:rt-thread/src/irq.c ****  *
  26:rt-thread/src/irq.c ****  * @note the hook function must be simple and never be blocked or suspend.
  27:rt-thread/src/irq.c ****  */
  28:rt-thread/src/irq.c **** void rt_interrupt_enter_sethook(void (*hook)(void))
  29:rt-thread/src/irq.c **** {
  30:rt-thread/src/irq.c ****     rt_interrupt_enter_hook = hook;
  31:rt-thread/src/irq.c **** }
ARM GAS  /tmp/ccxHbl55.s 			page 2


  32:rt-thread/src/irq.c **** /**
  33:rt-thread/src/irq.c ****  * @ingroup Hook
  34:rt-thread/src/irq.c ****  * This function set a hook function when the system exit a interrupt. 
  35:rt-thread/src/irq.c ****  *
  36:rt-thread/src/irq.c ****  * @note the hook function must be simple and never be blocked or suspend.
  37:rt-thread/src/irq.c ****  */
  38:rt-thread/src/irq.c **** void rt_interrupt_leave_sethook(void (*hook)(void))
  39:rt-thread/src/irq.c **** {
  40:rt-thread/src/irq.c ****     rt_interrupt_leave_hook = hook;
  41:rt-thread/src/irq.c **** }
  42:rt-thread/src/irq.c **** #endif
  43:rt-thread/src/irq.c **** 
  44:rt-thread/src/irq.c **** /* #define IRQ_DEBUG */
  45:rt-thread/src/irq.c **** 
  46:rt-thread/src/irq.c **** /**
  47:rt-thread/src/irq.c ****  * @addtogroup Kernel
  48:rt-thread/src/irq.c ****  */
  49:rt-thread/src/irq.c **** 
  50:rt-thread/src/irq.c **** /**@{*/
  51:rt-thread/src/irq.c **** 
  52:rt-thread/src/irq.c **** #ifdef RT_USING_SMP
  53:rt-thread/src/irq.c **** #define rt_interrupt_nest rt_cpu_self()->irq_nest
  54:rt-thread/src/irq.c **** #else
  55:rt-thread/src/irq.c **** volatile rt_uint8_t rt_interrupt_nest = 0;
  56:rt-thread/src/irq.c **** #endif
  57:rt-thread/src/irq.c **** 
  58:rt-thread/src/irq.c **** /**
  59:rt-thread/src/irq.c ****  * This function will be invoked by BSP, when enter interrupt service routine
  60:rt-thread/src/irq.c ****  *
  61:rt-thread/src/irq.c ****  * @note please don't invoke this routine in application
  62:rt-thread/src/irq.c ****  *
  63:rt-thread/src/irq.c ****  * @see rt_interrupt_leave
  64:rt-thread/src/irq.c ****  */
  65:rt-thread/src/irq.c **** void rt_interrupt_enter(void)
  66:rt-thread/src/irq.c **** {
  28              		.loc 1 66 0
  29              		.cfi_startproc
  30              		@ args = 0, pretend = 0, frame = 0
  31              		@ frame_needed = 0, uses_anonymous_args = 0
  32 0000 08B5     		push	{r3, lr}
  33              	.LCFI0:
  34              		.cfi_def_cfa_offset 8
  35              		.cfi_offset 3, -8
  36              		.cfi_offset 14, -4
  67:rt-thread/src/irq.c ****     rt_base_t level;
  68:rt-thread/src/irq.c **** 
  69:rt-thread/src/irq.c ****     RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq coming..., irq nest:%d\n",
  70:rt-thread/src/irq.c ****                                 rt_interrupt_nest));
  71:rt-thread/src/irq.c **** 
  72:rt-thread/src/irq.c ****     level = rt_hw_interrupt_disable();
  37              		.loc 1 72 0
  38 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
  39              	.LVL0:
  73:rt-thread/src/irq.c ****     rt_interrupt_nest ++;
  40              		.loc 1 73 0
  41 0006 044A     		ldr	r2, .L3
  42 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
ARM GAS  /tmp/ccxHbl55.s 			page 3


  43 000a 0133     		adds	r3, r3, #1
  44 000c DBB2     		uxtb	r3, r3
  45 000e 1370     		strb	r3, [r2]
  74:rt-thread/src/irq.c ****     RT_OBJECT_HOOK_CALL(rt_interrupt_enter_hook,());
  75:rt-thread/src/irq.c ****     rt_hw_interrupt_enable(level);
  46              		.loc 1 75 0
  47 0010 FFF7FEFF 		bl	rt_hw_interrupt_enable
  48              	.LVL1:
  49 0014 08BD     		pop	{r3, pc}
  50              	.L4:
  51 0016 00BF     		.align	2
  52              	.L3:
  53 0018 00000000 		.word	.LANCHOR0
  54              		.cfi_endproc
  55              	.LFE15:
  57              		.section	.text.rt_interrupt_leave,"ax",%progbits
  58              		.align	1
  59              		.global	rt_interrupt_leave
  60              		.syntax unified
  61              		.thumb
  62              		.thumb_func
  63              		.fpu fpv4-sp-d16
  65              	rt_interrupt_leave:
  66              	.LFB16:
  76:rt-thread/src/irq.c **** }
  77:rt-thread/src/irq.c **** RTM_EXPORT(rt_interrupt_enter);
  78:rt-thread/src/irq.c **** 
  79:rt-thread/src/irq.c **** /**
  80:rt-thread/src/irq.c ****  * This function will be invoked by BSP, when leave interrupt service routine
  81:rt-thread/src/irq.c ****  *
  82:rt-thread/src/irq.c ****  * @note please don't invoke this routine in application
  83:rt-thread/src/irq.c ****  *
  84:rt-thread/src/irq.c ****  * @see rt_interrupt_enter
  85:rt-thread/src/irq.c ****  */
  86:rt-thread/src/irq.c **** void rt_interrupt_leave(void)
  87:rt-thread/src/irq.c **** {
  67              		.loc 1 87 0
  68              		.cfi_startproc
  69              		@ args = 0, pretend = 0, frame = 0
  70              		@ frame_needed = 0, uses_anonymous_args = 0
  71 0000 08B5     		push	{r3, lr}
  72              	.LCFI1:
  73              		.cfi_def_cfa_offset 8
  74              		.cfi_offset 3, -8
  75              		.cfi_offset 14, -4
  88:rt-thread/src/irq.c ****     rt_base_t level;
  89:rt-thread/src/irq.c **** 
  90:rt-thread/src/irq.c ****     RT_DEBUG_LOG(RT_DEBUG_IRQ, ("irq leave, irq nest:%d\n",
  91:rt-thread/src/irq.c ****                                 rt_interrupt_nest));
  92:rt-thread/src/irq.c **** 
  93:rt-thread/src/irq.c ****     level = rt_hw_interrupt_disable();
  76              		.loc 1 93 0
  77 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
  78              	.LVL2:
  94:rt-thread/src/irq.c ****     rt_interrupt_nest --;
  79              		.loc 1 94 0
  80 0006 044A     		ldr	r2, .L7
ARM GAS  /tmp/ccxHbl55.s 			page 4


  81 0008 1378     		ldrb	r3, [r2]	@ zero_extendqisi2
  82 000a 013B     		subs	r3, r3, #1
  83 000c DBB2     		uxtb	r3, r3
  84 000e 1370     		strb	r3, [r2]
  95:rt-thread/src/irq.c ****     RT_OBJECT_HOOK_CALL(rt_interrupt_leave_hook,());
  96:rt-thread/src/irq.c ****     rt_hw_interrupt_enable(level);
  85              		.loc 1 96 0
  86 0010 FFF7FEFF 		bl	rt_hw_interrupt_enable
  87              	.LVL3:
  88 0014 08BD     		pop	{r3, pc}
  89              	.L8:
  90 0016 00BF     		.align	2
  91              	.L7:
  92 0018 00000000 		.word	.LANCHOR0
  93              		.cfi_endproc
  94              	.LFE16:
  96              		.section	.text.rt_interrupt_get_nest,"ax",%progbits
  97              		.align	1
  98              		.weak	rt_interrupt_get_nest
  99              		.syntax unified
 100              		.thumb
 101              		.thumb_func
 102              		.fpu fpv4-sp-d16
 104              	rt_interrupt_get_nest:
 105              	.LFB17:
  97:rt-thread/src/irq.c **** }
  98:rt-thread/src/irq.c **** RTM_EXPORT(rt_interrupt_leave);
  99:rt-thread/src/irq.c **** 
 100:rt-thread/src/irq.c **** /**
 101:rt-thread/src/irq.c ****  * This function will return the nest of interrupt.
 102:rt-thread/src/irq.c ****  *
 103:rt-thread/src/irq.c ****  * User application can invoke this function to get whether current
 104:rt-thread/src/irq.c ****  * context is interrupt context.
 105:rt-thread/src/irq.c ****  *
 106:rt-thread/src/irq.c ****  * @return the number of nested interrupts.
 107:rt-thread/src/irq.c ****  */
 108:rt-thread/src/irq.c **** RT_WEAK rt_uint8_t rt_interrupt_get_nest(void)
 109:rt-thread/src/irq.c **** {
 106              		.loc 1 109 0
 107              		.cfi_startproc
 108              		@ args = 0, pretend = 0, frame = 0
 109              		@ frame_needed = 0, uses_anonymous_args = 0
 110 0000 10B5     		push	{r4, lr}
 111              	.LCFI2:
 112              		.cfi_def_cfa_offset 8
 113              		.cfi_offset 4, -8
 114              		.cfi_offset 14, -4
 110:rt-thread/src/irq.c ****     rt_uint8_t ret;
 111:rt-thread/src/irq.c ****     rt_base_t level;
 112:rt-thread/src/irq.c **** 
 113:rt-thread/src/irq.c ****     level = rt_hw_interrupt_disable();
 115              		.loc 1 113 0
 116 0002 FFF7FEFF 		bl	rt_hw_interrupt_disable
 117              	.LVL4:
 114:rt-thread/src/irq.c ****     ret = rt_interrupt_nest;
 118              		.loc 1 114 0
 119 0006 034B     		ldr	r3, .L11
ARM GAS  /tmp/ccxHbl55.s 			page 5


 120 0008 1C78     		ldrb	r4, [r3]	@ zero_extendqisi2
 121 000a E4B2     		uxtb	r4, r4
 122              	.LVL5:
 115:rt-thread/src/irq.c ****     rt_hw_interrupt_enable(level);
 123              		.loc 1 115 0
 124 000c FFF7FEFF 		bl	rt_hw_interrupt_enable
 125              	.LVL6:
 116:rt-thread/src/irq.c ****     return ret;
 117:rt-thread/src/irq.c **** }
 126              		.loc 1 117 0
 127 0010 2046     		mov	r0, r4
 128 0012 10BD     		pop	{r4, pc}
 129              	.LVL7:
 130              	.L12:
 131              		.align	2
 132              	.L11:
 133 0014 00000000 		.word	.LANCHOR0
 134              		.cfi_endproc
 135              	.LFE17:
 137              		.global	rt_interrupt_nest
 138              		.section	.bss.rt_interrupt_nest,"aw",%nobits
 139              		.set	.LANCHOR0,. + 0
 142              	rt_interrupt_nest:
 143 0000 00       		.space	1
 144              		.text
 145              	.Letext0:
 146              		.file 2 "rt-thread/include/rtdef.h"
 147              		.file 3 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/lock.h"
 148              		.file 4 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/_types.h"
 149              		.file 5 "/opt/gcc-arm-none-eabi-6-2017-q2-update/lib/gcc/arm-none-eabi/6.3.1/include/stddef.h"
 150              		.file 6 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/reent.h"
 151              		.file 7 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/time.h"
 152              		.file 8 "/opt/gcc-arm-none-eabi-6-2017-q2-update/arm-none-eabi/include/sys/errno.h"
 153              		.file 9 "rt-thread/include/rtthread.h"
 154              		.file 10 "rt-thread/include/rthw.h"
ARM GAS  /tmp/ccxHbl55.s 			page 6


DEFINED SYMBOLS
                            *ABS*:0000000000000000 irq.c
     /tmp/ccxHbl55.s:18     .text.rt_interrupt_enter:0000000000000000 $t
     /tmp/ccxHbl55.s:25     .text.rt_interrupt_enter:0000000000000000 rt_interrupt_enter
     /tmp/ccxHbl55.s:53     .text.rt_interrupt_enter:0000000000000018 $d
     /tmp/ccxHbl55.s:58     .text.rt_interrupt_leave:0000000000000000 $t
     /tmp/ccxHbl55.s:65     .text.rt_interrupt_leave:0000000000000000 rt_interrupt_leave
     /tmp/ccxHbl55.s:92     .text.rt_interrupt_leave:0000000000000018 $d
     /tmp/ccxHbl55.s:97     .text.rt_interrupt_get_nest:0000000000000000 $t
     /tmp/ccxHbl55.s:104    .text.rt_interrupt_get_nest:0000000000000000 rt_interrupt_get_nest
     /tmp/ccxHbl55.s:133    .text.rt_interrupt_get_nest:0000000000000014 $d
     /tmp/ccxHbl55.s:142    .bss.rt_interrupt_nest:0000000000000000 rt_interrupt_nest
     /tmp/ccxHbl55.s:143    .bss.rt_interrupt_nest:0000000000000000 $d
                     .debug_frame:0000000000000010 $d

UNDEFINED SYMBOLS
rt_hw_interrupt_disable
rt_hw_interrupt_enable
